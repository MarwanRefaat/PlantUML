@startuml

title Acorns OpenAPI Schemas Diagram

entity AboutSection {
    image: Image
    * title: String
}

entity AbstractSwitch {
    * source: SwitchSource
    * type: SwitchType
    * url: String
    * vendorTargetId: String
    requiresEmployerMailingAddress: Boolean
    requiresNonSsnEmployeeId: Boolean
    requiresSsnLastFour: Boolean
}

entity AcceptDocumentInput {
    * acceptedDate: OasAnyTypeNotMapped
    * documentType: String
    * documentVersion: String
    * signature: String
}

entity AcceptDocumentResponse {
    * acceptedDate: OasAnyTypeNotMapped
    * documentType: String
    * documentUrl: String
    * documentVersion: String
    * signature: String
    userId: String
}

entity AcceptUploadedDocumentInput {
    * documentRequestId: String
    * reviewerId: String
}

entity AcceptanceDocument {
    * id: String
    mustScrollToBottom: Boolean
    * name: String
    requiredFor: String
    summaryName: String
    summaryUrl: OasAnyTypeNotMapped
    * type: String
    * url: OasAnyTypeNotMapped
    * version: String
}

entity AcceptedDocument {
    * acceptedDate: OasAnyTypeNotMapped
    * documentType: String
    * documentUrl: String
    * documentVersion: String
    * signature: String
}

entity Account {
    * accountType: AccountType
    * createdAt: OasAnyTypeNotMapped
    * creatorId: String
    * id: String
    * status: AccountStatus
    * updatedAt: OasAnyTypeNotMapped
}

entity AccountAchievement {
    * achievement: AchievementItem
    * completed: Boolean
    * dateCompleted: OasAnyTypeNotMapped
}

entity AccountAlreadyClosedException {
    message: String
}

entity AccountClosedException {
    errorMessage: String
}

entity AccountNotFoundException {
    errorMessage: String
}

entity AccountPoints {
    * details: String
    * earned: BigDecimal
    * pointsPerCompletion: BigDecimal
    summary: String
}

entity AccountPointsRule {
    * details: String
    * milestoneID: String
    * pointsPerCompletion: BigDecimal
    summary: String
}

entity AccountRequirement {
    * actionable: Boolean
    description: String
    * status: AccountRequirementStatus
    * type: AccountRequirementType
}

entity AccountRequirementStatus {
}

entity AccountRequirementType {
}

entity AccountRequirements {
    * close: List<AccountRequirement>
}

entity AccountStatus {
}

entity AccountStrengthResult {
    achievements: List<AccountAchievement>
    * percentage: BigDecimal
}

entity AccountType {
}

entity AccountValue {
    amount: BigDecimal
    timestamp: OasAnyTypeNotMapped
}

entity AchievementItem {
}

entity AcornsPdfSwitch {
    * source: SwitchSource
    * type: SwitchType
}

entity ActionCard {
    body: String
    ctaDetails: ActionCardButton
    eyebrow: String
    headline: String
    heroImageUrl: OasAnyTypeNotMapped
    icon: String
    image: OasAnyTypeNotMapped
    imageUrl: OasAnyTypeNotMapped
    ownerName: String
    * style: ActionCardStyle
    title: String
    * type: String
    userCardDigest: String
    widget: OasAnyTypeNotMapped
}

entity ActionCardButton {
    id: String
    image: OasAnyTypeNotMapped
    * title: String
    * type: String
    video: OasAnyTypeNotMapped
    videoUrl: OasAnyTypeNotMapped
}

entity ActionCardStyle {
}

entity ActionCardsInput {
    feedContext: ActionFeedContext
}

entity ActionFeedContext {
}

entity ActionFeedCta {
    hideCardIfUnknown: Boolean
    id: String
    image: String
    * title: String
    type: ActionFeedCtaType
    video: String
    videoUrl: String
}

entity ActionFeedCtaType {
}

entity ActionFeedEvent {
    accountId: String
    * action: ActionFeedEventAction
    body: String
    ctaId: String
    * eventKey: String
    * eventType: ActionFeedEventType
    userCardDigest: String
}

entity ActionFeedEventAction {
}

entity ActionFeedEventResponse {
    * success: Boolean
}

entity ActionFeedEventType {
}

entity ActivateBankCardInput {
    * cardNumberMasked: OasAnyTypeNotMapped
}

entity ActivateBankCardPayload {
    bankCard: BankCard
}

entity Activity {
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * meta: OasAnyTypeNotMapped
    pending: Boolean
    * type: ActivityType
}

entity ActivitySummaryProduct {
}

entity ActivitySummaryResponse {
    activitySummaryItems: List<SummaryItem>
    numberOfDays: BigDecimal
    total: CurrencyAmount
}

entity ActivityType {
}

entity AddActionToMilestoneAchievementActionRuleInput {
    * actionToAdd: MilestoneAchievementActionType
    * milestoneID: String
}

entity AddActionToMilestoneAchievementActionRuleResult {
    * actions: List<MilestoneAchievementActionType>
    * milestoneID: String
    * message: String
}

entity AddDocumentUrlsInput {
    * documentRequestId: String
    * documents: List<DocumentInput>
}

entity Address {
    * addressType: AddressType
    * city: String
    * country: String
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * state: String
    * street1: String
    street2: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    * verified: Boolean
    * zipCode: String
}

entity AddressDeliverabilityAdditionalInfo {
    isBusiness: Boolean
    isPoBox: Boolean
    isPrivateMailbox: Boolean
    isVacant: Boolean
}

entity AddressDeliverabilityCorrectedAddress {
    additionalInfo: AddressDeliverabilityAdditionalInfo
    city: String
    country: String
    state: String
    street1: String
    street2: String
    zipCode: String
}

entity AddressDeliverabilityInput {
    city: String
    country: String
    state: String
    * street1: String
    street2: String
    zipCode: String
}

entity AddressDeliverabilityResult {
    additionalInfo: AddressDeliverabilityAdditionalInfo
    requestId: String
    failureReason: AddressDeliverabilityVerificationErrorFailureReason
    city: String
    country: String
    state: String
    street1: String
    street2: String
    zipCode: String
}

entity AddressDeliverabilityUnavailableError {
    requestId: String
}

entity AddressDeliverabilityVerificationError {
    failureReason: AddressDeliverabilityVerificationErrorFailureReason
    requestId: String
}

entity AddressDeliverabilityVerificationErrorFailureReason {
}

entity AddressDeliverabilityVerified {
    additionalInfo: AddressDeliverabilityAdditionalInfo
    requestId: String
}

entity AddressDocumentRequestedUserAlert {
    * requestedDocumentType: DocumentType
    * type: String
    * userId: String
}

entity AddressInput {
    city: String
    country: String
    state: String
    street1: String
    street2: String
    zipCode: String
}

entity AddressType {
}

entity Advocate {
    experienceContent: ExperienceContent
    friends: List<Friend>
    referralCodes: List<String>
    referralHistory: ReferralHistory
    userId: String
}

entity AdvocateFriendsStatuses {
    friends: List<Friend>
    referralCodes: List<String>
    * userId: String
}

entity Alert {
    * type: String
    * userId: String
}

entity AlertHubBeneficiaryAlert {
    * beneficiary: Beneficiary
    * type: String
    * userId: String
}

entity AllBankAccountsInput {
    type: BankAccountType
}

entity AllBankCardsFilter {
    showNonActive: Boolean
}

entity AllBankDocumentsInput {
    isActive: Boolean
}

entity AllCheckPaymentsResult {
    * edges: List<CheckPaymentEdge>
    * pageInfo: PageInfo
    * requestId: String
}

entity AllPastCoreItemsSchemaFilter {
    pending: Boolean
}

entity AllPastEarlyItemsSchemaFilter {
    pending: Boolean
}

entity AllPastLaterItemsSchemaFilter {
    pending: Boolean
}

entity AllPastSpendItemsSchemaFilter {
    pending: Boolean
}

entity AllSupportArticlesFilterInput {
    promoted: Boolean
}

entity AllTransferableToInput {
    * from: String
}

entity Answer {
    * id: String
    * title: String
    * type: AnswerType
}

entity AnswerType {
}

entity ApplyPromotionInput {
    * promotionId: String
    * subscriptionId: String
}

entity ApplyPromotionResult {
    activePromotion: Promotion
    * createdAt: OasAnyTypeNotMapped
    createdBy: TierSubscriptionCreatedBy
    * id: String
    migration: SubscriptionMigration
    migrationId: String
    offer: Offer
    offerExpiresAt: OasAnyTypeNotMapped
    promotionAppliedAt: OasAnyTypeNotMapped
    promotionExpiresAt: OasAnyTypeNotMapped
    * status: TierSubscriptionStatus
    * tier: Tier
    * tierPrice: TierPrice
    transition: TierSubscriptionTransition
    * updatedAt: OasAnyTypeNotMapped
    * message: String
    * expiredAt: OasAnyTypeNotMapped
}

entity Article {
    * body: String
    cta: Cta
    * eyebrow: String
    * id: String
    image: Image
    * title: String
}

entity AssignLinkedSubaccountInput {
    * role: LinkedSubaccountRoleEnum
}

entity AsyncLinkSessionResult {
    * success: Boolean
}

entity AuthAlert {
    * type: String
    * userId: String
}

entity AuthChallenge {
    * alternateAuthenticators: List<AuthenticatorInfo>
    * id: String
}

entity AuthChallengeAnswerAttemptsExhaustedException {
    * message: String
}

entity AuthChallengeAnswerIncorrectException {
    * message: String
}

entity AuthChallengeExpiredException {
    * message: String
}

entity AuthProfile {
    defaultAuthenticator: Authenticator
    email: OasAnyTypeNotMapped
    emailVerifiedAt: OasAnyTypeNotMapped
    phoneNumber: String
    phoneNumberVerifiedAt: OasAnyTypeNotMapped
    requireLoginChallenge: Boolean
    * userId: String
}

entity AuthProfileAlreadyExistsException {
    * message: String
}

entity AuthSession {
    * id: String
    * identityId: String
    refreshToken: String
    * token: String
}

entity AuthType {
}

entity AuthenticateForFeeNegotiationChallengeInput {
    * linkedAccountId: String
    * tfaInput: String
}

entity AuthenticateForFeeNegotiationChallengeMethodInput {
    * linkedAccountId: String
    * restart: Boolean
    * tfaOption: String
    * tfaType: TfaType
}

entity AuthenticateForFeeNegotiationInput {
    * bankName: BankName
    * linkedAccountId: String
    * password: String
    * reconnect: Boolean
    * userName: String
}

entity AuthenticateForFeeNegotiationResult {
    * credentialStatus: CredentialStatus
    operationError: AutomationError
    * operationStage: OperationStage
    tfaMethod: String
    tfaOptions: TfaOptions
    * tfaStatus: TfaStatus
    * tfaType: TfaType
    * message: String
}

entity AuthenticateForFeeNegotiationStatus {
    * credentialStatus: CredentialStatus
    operationError: AutomationError
    * operationStage: OperationStage
    tfaMethod: String
    tfaOptions: TfaOptions
    * tfaStatus: TfaStatus
    * tfaType: TfaType
}

entity AuthenticateInput {
    * email: OasAnyTypeNotMapped
    * password: String
    rememberMe: Boolean
    * udid: String
}

entity AuthenticateNegotiationStatusResult {
    * credentialStatus: CredentialStatus
    operationError: AutomationError
    * operationStage: OperationStage
    tfaMethod: String
    tfaOptions: TfaOptions
    * tfaStatus: TfaStatus
    * tfaType: TfaType
    * message: String
}

entity AuthenticateResult {
    * alternateAuthenticators: List<AuthenticatorInfo>
    * id: String
    * maskedPhoneNumber: String
    * maskedEmail: String
    * identityId: String
    refreshToken: String
    * token: String
    * message: String
}

entity AuthenticateWithAppleInput {
    firstName: String
    * idToken: String
    lastName: String
    * udid: String
}

entity AuthenticateWithAppleResult {
    * id: String
    * identityId: String
    refreshToken: String
    * token: String
    * alternateAuthenticators: List<AuthenticatorInfo>
    * maskedPhoneNumber: String
    * maskedEmail: String
    * message: String
}

entity Authenticator {
    * createdAt: OasAnyTypeNotMapped
    * id: String
    lastUsedAt: OasAnyTypeNotMapped
    * name: String
    * updatedAt: OasAnyTypeNotMapped
}

entity AuthenticatorAlreadyDefaultException {
    * message: String
}

entity AuthenticatorInfo {
    * id: String
    * type: AuthType
}

entity AuthenticatorNotFoundException {
    * message: String
}

entity AuthenticatorTypeAlreadyRegisteredException {
    * message: String
}

entity AuthenticatorUnavailableException {
    * message: String
}

entity AuthorizationError {
    * requestId: String
}

entity AutomationError {
    error: String
    errorCode: AutomationErrorCode
}

entity AutomationErrorCode {
}

entity BackgroundImage {
    horizontalFocalPoint: String
    url: OasAnyTypeNotMapped
    verticalFocalPoint: String
}

entity BadgeCategory {
}

entity BankAccount {
    * accountHolderReferenceId: String
    * availableBalance: CurrencyAmount
    * balance: CurrencyAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * isEligible: Boolean
    * isLocked: Boolean
    isPendingClosure: Boolean
    lockReason: BankAccountLockReason
    * number: String
    * pendingBalance: CurrencyAmount
    * referenceId: String
    * requirements: BankAccountRequirements
    * routingNumber: String
    * status: BankAccountStatus
    * type: BankAccountType
    * updatedAt: OasAnyTypeNotMapped
}

entity BankAccountClosureReason {
}

entity BankAccountLockReason {
}

entity BankAccountNotFoundError {
    * message: String
}

entity BankAccountRequirement {
    * actionable: Boolean
    description: String
    * status: BankAccountRequirementStatus
    * type: BankAccountRequirementType
}

entity BankAccountRequirementStatus {
}

entity BankAccountRequirementType {
}

entity BankAccountRequirements {
    * close: List<BankAccountRequirement>
}

entity BankAccountStatus {
}

entity BankAccountType {
}

entity BankCard {
    activatedAt: OasAnyTypeNotMapped
    cardNumberMasked: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * expireMonth: BigDecimal
    * expireYear: BigDecimal
    * id: String
    lockReason: BankCardLockReason
    * lockTypeCode: BankCardLockTypeCode
    * paymentProcessor: BankCardPaymentProcessor
    * referenceId: String
    * status: BankCardStatus
    * tier: BankCardTier
    * type: BankCardType
}

entity BankCardLockReason {
}

entity BankCardLockTypeCode {
}

entity BankCardOrder {
    addressVerification: BankCardOrderAddressVerification
    * cardOrderStatus: BankCardOrderStatus
    failureReason: BankCardOrderFailureReason
    fundingSourceVerification: BankCardOrderFundingSourceVerification
    identityVerification: BankCardOrderIdentityVerification
    prefundVerification: BankCardOrderPrefundVerification
}

entity BankCardOrderAddressVerification {
    actionRequired: String
    * status: BankCardOrderVerificationStatus
}

entity BankCardOrderFailureReason {
}

entity BankCardOrderFundingSourceVerification {
    actionRequired: BankCardOrderFundingSourceVerificationActions
    pendingReason: BankCardOrderFundingSourceVerificationPendingReason
    * status: BankCardOrderVerificationStatus
}

entity BankCardOrderFundingSourceVerificationActions {
}

entity BankCardOrderFundingSourceVerificationPendingReason {
}

entity BankCardOrderIdentityVerification {
    actionRequired: String
    documentUploadUrl: String
    * status: BankCardOrderVerificationStatus
}

entity BankCardOrderPrefundVerification {
    actionRequired: String
    * status: BankCardOrderVerificationStatus
}

entity BankCardOrderStatus {
}

entity BankCardOrderVerificationStatus {
}

entity BankCardPaymentProcessor {
}

entity BankCardPermanentLockReason {
}

entity BankCardPrefundTransfer {
    * amount: PositiveCurrencyAmountInput
}

entity BankCardReissue {
    bankCardRequest: BankCardRequest
    * reissueBankCardEligibility: ReissueBankCardEligibility
}

entity BankCardRequest {
    * id: String
    * isActivated: Boolean
    * isReissue: Boolean
    issuedDate: OasAnyTypeNotMapped
    mailingAddress: BankCardRequestMailingAddress
    previousBankCardId: String
    * reason: BankCardRequestReason
    reasonComment: String
    reasonDate: OasAnyTypeNotMapped
    * requestedDate: OasAnyTypeNotMapped
    * status: BankCardRequestStatus
    * userId: String
}

entity BankCardRequestMailingAddress {
    * city: String
    * country: String
    * state: String
    * street1: String
    street2: String
    * zipCode: String
}

entity BankCardRequestMailingAddressInput {
    * city: String
    * country: String
    * state: String
    * street1: String
    street2: String
    * zipCode: String
}

entity BankCardRequestReason {
}

entity BankCardRequestStatus {
}

entity BankCardStatus {
}

entity BankCardTemporaryLockReason {
}

entity BankCardTier {
}

entity BankCardType {
}

entity BankDocument {
    * name: String
    * type: String
    * url: String
}

entity BankDocumentRequestedUserAlert {
    * requestedDocumentType: DocumentType
    * type: String
    * userId: String
}

entity BankFee {
    * accountName: String
    * amount: MonetaryAmount
    * category: TransactionCategory
    * digit: String
    * linkedAccountId: String
    * linkedSubAccountId: String
    * name: String
    * status: FeeStatus
    submissionKey: String
    subtitle: String
    * transactionDate: OasAnyTypeNotMapped
    * type: BankFeeType
}

entity BankFeeConnection {
    * bank: BankName
    * eligible: Boolean
    latestSubmission: Submission
    * linkedAccountId: String
    * status: ConnectionStatus
    submissions: List<Submission>
}

entity BankFeeConnectionAlert {
    * bankName: BankName
    * linkedAccountId: String
    * status: SubmissionStatus
}

entity BankFeeNegotiationAlert {
    alertData: List<BankFeeConnectionAlert>
    * type: String
    * userId: String
}

entity BankFeeSummary {
    * coffeeCount: BigDecimal
    * eligible: Boolean
    * feesFound: FeeStatusSummary
    * linkedAccounts: List<BankFeeConnection>
    * totalNegotiableFees: MonetaryAmount
    * totalNegotiatedFees: MonetaryAmount
    * totalReimbursedFees: MonetaryAmount
}

entity BankFeeType {
}

entity BankMetadata {
    totals: BankMetadataTotals
}

entity BankMetadataTotals {
    * oak: BigDecimal
    * royalOak: BigDecimal
}

entity BankName {
}

entity BankStatement {
    * createdAt: OasAnyTypeNotMapped
    * month: String
    * type: BankStatementType
    * url: String
    * year: String
}

entity BankStatementType {
}

entity BankTransaction {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    bankCard: BankCard
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    settledAt: OasAnyTypeNotMapped
    * status: BankTransactionStatus
    * summary: String
    tag: String
    * type: BankTransactionType
    * typeCode: String
    * updatedAt: OasAnyTypeNotMapped
    voidedAt: OasAnyTypeNotMapped
}

entity BankTransactionConnection {
    * edges: List<BankTransactionEdge>
    * pageInfo: PageInfo
}

entity BankTransactionEdge {
    * cursor: String
    node: BankTransaction
}

entity BankTransactionStatus {
}

entity BankTransactionType {
}

entity BatchAddTierSubscriptions {
    * addedIds: List<String>
    * unaddedIds: List<String>
}

entity BatchAddTierSubscriptionsInput {
    createdBy: TierSubscriptionCreatedBy
    migrationId: String
    * tierId: String
    * tierPriceId: String
    * userIds: List<String>
}

entity BatchAddTierSubscriptionsResult {
    * message: String
    * validTierPrices: List<TierPrice>
    * validTiers: List<Tier>
    * addedIds: List<String>
    * unaddedIds: List<String>
}

entity Beneficiary {
    addresses: List<Address>
    avatarUrl: String
    * createdAt: OasAnyTypeNotMapped
    * custodianId: String
    * dateOfBirth: String
    deactivatedAt: OasAnyTypeNotMapped
    email: OasAnyTypeNotMapped
    * firstName: String
    * id: String
    * lastName: String
    phoneNumbers: List<Phone>
    * ssnPresent: Boolean
    * updatedAt: OasAnyTypeNotMapped
}

entity BeneficiaryAccountExistsException {
    message: String
}

entity BeneficiaryExceedsAgeLimitException {
    message: String
}

entity BeneficiaryInfoInput {
    email: OasAnyTypeNotMapped
    mailingAddress: AddressInput
    phoneNumber: String
}

entity BeneficiaryInput {
    * dateOfBirth: String
    * firstName: String
    * lastName: String
}

entity BeneficiaryNotFoundException {
    message: String
}

entity BeneficiaryRequestedLaterAlert {
    * type: String
    * userId: String
}

entity BeneficiaryType {
}

entity BigCurrencyAmount {
    * currency: String
    * value: OasAnyTypeNotMapped
}

entity BillingCycle {
    * active: Boolean
    amount: BigDecimal
    amountCollected: BigDecimal
    amountOwed: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    * endDate: String
    * extension: String
    * fees: List<Fee>
    * id: String
    * invoiceDate: String
    * startDate: String
    * state: BillingCycleState
    tierSubscription: TierSubscription
    tierSubscriptionId: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
}

entity BillingCycleFeesArgs {
    execution_methods: List<FeeExecutionMethod>
}

entity BillingCycleState {
}

entity BillingFrequency {
}

entity BlockDeviceInput {
    * deviceId: String
}

entity BlockDeviceResult {
    appVersion: String
    * createdAt: OasAnyTypeNotMapped
    firstLoginAt: OasAnyTypeNotMapped
    * id: String
    * isBlocked: Boolean
    lastLoginAt: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
    userAgent: String
    * userId: String
    * message: String
}

entity BriefInsuranceSection {
    * cta: Cta
    * image: Image
    * insuranceType: String
    * recommendType: String
    * title: String
}

entity CacheControlScope {
}

entity CancelCheckPaymentResult {
    * amount: CurrencyAmount
    canceledAt: OasAnyTypeNotMapped
    checkNumber: String
    * createdAt: OasAnyTypeNotMapped
    * estimatedArrivalAt: OasAnyTypeNotMapped
    failedAt: OasAnyTypeNotMapped
    failureReason: String
    * fromAccountId: String
    * id: String
    memo: String
    * recipientAddress: CheckPaymentAddress
    * recipientName: String
    * status: CheckPaymentStatus
    trackingNumber: String
    * requestId: String
}

entity CancelInvestmentAccountClosureRequestInput {
    * investmentAccountId: String
}

entity CancelInvestmentAccountClosureRequestResult {
    errorMessage: String
    beneficiary: Beneficiary
    beneficiaryId: String
    * cashBalance: MonetaryAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    currentBalance: MonetaryAmount
    * currentBalanceWithPending: MonetaryAmount
    * hasInvested: Boolean
    * id: String
    * investmentAccountType: InvestmentAccountType
    * name: String
    * netInvestments: MonetaryAmount
    * pendingBalance: MonetaryAmount
    * pendingWithdrawals: List<Withdrawal>
    performance: Performance
    portfolio: Portfolio
    * product: InvestmentProduct
    recommendedPortfolio: Portfolio
    recurringInvestmentSettings: RecurringInvestmentSettings
    * requirements: AccountRequirements
    * status: InvestmentAccountStatus
    * summary: InvestmentAccountSummary
    * totalBonds: MonetaryAmount
    * totalEquities: MonetaryAmount
    transferability: InvestmentAccountTransferability
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    yearToDateReturn: MarketReturn
}

entity CancelInvestmentInput {
    * investmentAccountId: String
    * investmentId: String
}

entity CancelInvestmentPayload {
    * id: String
}

entity CancelInvestmentResult {
    * id: String
}

entity CancelRecurringTransferResult {
    * active: Boolean
    * id: String
    nextTransferDate: OasAnyTypeNotMapped
    * recurrenceRule: RecurrenceRule
    * transferEvent: RecurringTransferEvent
    latestVersion: String
}

entity CancelRequestedDocumentInput {
    * documentRequestId: String
    * reviewerId: String
}

entity CancelTransferPayload {
    * transactionId: String
}

entity CardDeliveryStatus {
    description: String
    * picNumber: String
    * referenceId: String
    * status: PackageStatus
}

entity CarouselOffer {
    * campaignId: String
    * cta: Cta
    * fastQuote: Boolean
    * logo: Image
    * offerId: String
    * ownerId: String
    tip: String
    * title: String
}

entity CarouselType {
}

entity ChallengeAnswerInput {
    * challengeAnswer: String
    * challengeId: String
}

entity ChallengePointsEarned {
    * challengeID: String
    * details: String
    * earningProgress: DiscreteMilestoneProgress
    summary: String
}

entity ChangeOutsideContributionAmountInput {
    * investmentAmount: String
    * paymentIntentId: String
}

entity ChangeOutsideContributionAmountResult {
    * maximumThresholdAmount: String
    * minimumThresholdAmount: String
    * code: OutsideContributionCode
    * createdAt: OasAnyTypeNotMapped
    * feeAmount: String
    * id: String
    * investmentAmount: String
    * paymentIntentId: String
    * status: CheckoutCartStatus
    * updatedAt: OasAnyTypeNotMapped
}

entity CheckImage {
    * image: String
    * type: ImageType
}

entity CheckPayment {
    * amount: CurrencyAmount
    canceledAt: OasAnyTypeNotMapped
    checkNumber: String
    * createdAt: OasAnyTypeNotMapped
    * estimatedArrivalAt: OasAnyTypeNotMapped
    failedAt: OasAnyTypeNotMapped
    failureReason: String
    * fromAccountId: String
    * id: String
    memo: String
    * recipientAddress: CheckPaymentAddress
    * recipientName: String
    * status: CheckPaymentStatus
    trackingNumber: String
}

entity CheckPaymentAddress {
    * city: String
    * country: String
    * state: String
    * street1: String
    street2: String
    * zipCode: String
}

entity CheckPaymentAddressInput {
    * city: String
    * country: String
    * state: String
    * street1: String
    street2: String
    * zipCode: String
}

entity CheckPaymentConnection {
    * edges: List<CheckPaymentEdge>
    * pageInfo: PageInfo
}

entity CheckPaymentEdge {
    * cursor: String
    * node: CheckPayment
}

entity CheckPaymentRecipient {
    businessName: String
    firstName: String
    lastName: String
}

entity CheckPaymentRecipientAddressType {
    * recipient: CheckPaymentRecipient
    * recipientAddress: CheckPaymentAddress
}

entity CheckPaymentRecipientInput {
    businessName: String
    firstName: String
    lastName: String
}

entity CheckPaymentStatus {
}

entity CheckoutCartStatus {
}

entity ClientInfo {
    * appVersion: String
    * manufacturer: String
    * model: String
    * os: String
    * osVersion: String
    * platform: String
}

entity CloseAccountReason {
    * key: String
    * label: String
}

entity CloseBankAccountInput {
    * accountId: String
    bankAccountClosureReason: BankAccountClosureReason
    feedback: String
}

entity CloseBankAccountResult {
    * accountHolderReferenceId: String
    * availableBalance: CurrencyAmount
    * balance: CurrencyAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * isEligible: Boolean
    * isLocked: Boolean
    isPendingClosure: Boolean
    lockReason: BankAccountLockReason
    * number: String
    * pendingBalance: CurrencyAmount
    * referenceId: String
    * requirements: BankAccountRequirements
    * routingNumber: String
    * status: BankAccountStatus
    * type: BankAccountType
    * updatedAt: OasAnyTypeNotMapped
    * message: String
}

entity CloseInvestmentAccountInput {
    accountClosureReasons: List<String>
    comments: String
    * investmentAccountId: String
}

entity CloseInvestmentAccountResult {
    errorMessage: String
    beneficiary: Beneficiary
    beneficiaryId: String
    * cashBalance: MonetaryAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    currentBalance: MonetaryAmount
    * currentBalanceWithPending: MonetaryAmount
    * hasInvested: Boolean
    * id: String
    * investmentAccountType: InvestmentAccountType
    * name: String
    * netInvestments: MonetaryAmount
    * pendingBalance: MonetaryAmount
    * pendingWithdrawals: List<Withdrawal>
    performance: Performance
    portfolio: Portfolio
    * product: InvestmentProduct
    recommendedPortfolio: Portfolio
    recurringInvestmentSettings: RecurringInvestmentSettings
    * requirements: AccountRequirements
    * status: InvestmentAccountStatus
    * summary: InvestmentAccountSummary
    * totalBonds: MonetaryAmount
    * totalEquities: MonetaryAmount
    transferability: InvestmentAccountTransferability
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    yearToDateReturn: MarketReturn
    * accountClosedAt: OasAnyTypeNotMapped
    * clientMessage: String
}

entity CloseUserAccountResult {
    openAccountTypes: List<String>
    message: String
    userId: String
    closedAt: OasAnyTypeNotMapped
    * email: String
    * uuid: String
}

entity ClosureRequestDoesNotExistException {
    errorMessage: String
}

entity ClosureRequestExistsException {
    message: String
}

entity CollapsedLifeRecommendation {
    * cta: Cta
    * recommendedCoverage: BigDecimal
    * title: String
}

entity CompleteCheckDepositInput {
    * amount: CurrencyAmountInput
    * sessionToken: String
}

entity CompleteCheckDepositPayload {
    * sessionToken: String
}

entity CondensedSocialCopies {
    all: String
    sms: String
    twitter: String
}

entity ConfigureSettingsInput {
    employerHidden: Boolean
    * employerName: String
    * splitPercent: String
    * splitType: DistributionType
}

entity ConfigureSplitDepositDirectDepositIntentGenericError {
    * requestId: String
}

entity ConfigureSplitDepositDirectDepositIntentPayload {
    * intent: SplitDepositDirectDepositIntentSetting
}

entity ConfigureSplitDepositDirectDepositIntentSettingInput {
    * allocations: List<SplitDepositAllocationInput>
    * estimatedPaycheckAmount: CurrencyAmountInput
    id: String
    * isActive: Boolean
    * isHidden: Boolean
    * isUsingRecommendedAllocations: Boolean
}

entity ConfigureSplitDepositDirectDepositIntentSettingResult {
    * intent: SplitDepositDirectDepositIntentSetting
    * requestId: String
}

entity ConfigureSplitDepositDirectDepositSettingGenericError {
    * requestId: String
}

entity ConfigureSplitDepositDirectDepositSettingInput {
    * allocations: List<SplitDepositAllocationInput>
    directDepositIntentSettingId: String
    * id: String
    * isActive: Boolean
    * isHidden: Boolean
    * isUsingRecommendedAllocations: Boolean
}

entity ConfigureSplitDepositDirectDepositSettingPayload {
    * setting: SplitDepositDirectDepositSetting
}

entity ConfigureSplitDepositDirectDepositSettingResult {
    * setting: SplitDepositDirectDepositSetting
    * requestId: String
}

entity ConnectAchAccountInput {
    * account: OasAnyTypeNotMapped
    * routing: OasAnyTypeNotMapped
}

entity ConnectAchAccountResult {
    * message: String
}

entity ConnectAchAccountSucceeded {
    * message: String
}

entity ConnectionStatus {
}

entity ContactCategory {
    * id: String
    * label: String
    subcategories: List<ContactSubcategory>
    * value: String
}

entity ContactFaq {
    * answer: String
    * href: String
    * id: String
    * question: String
}

entity ContactFormAlert {
    message: String
}

entity ContactInfoInput {
    address1: String
    address2: String
    city: String
    phoneNumber: String
    state: String
    zip: String
}

entity ContactSubcategory {
    * chatEnabled: Boolean
    * emailEnabled: Boolean
    * faqs: List<ContactFaq>
    * id: String
    * label: String
    message: SubcategoryMessage
    * phoneEnabled: Boolean
    * value: String
}

entity ContributionAbility {
    canContribute: Boolean
    planLimit: BigDecimal
    remaining: BigDecimal
    * taxYear: BigDecimal
    yearToDate: BigDecimal
}

entity ContributionAbilityByYear {
    contributionAbilities: List<ContributionAbility>
}

entity ContributionActionRequiredError {
    * paymentIntentId: String
    redirectUrl: String
    * requiredAction: ContributionRequiredAction
}

entity ContributionAmountAboveThresholdError {
    * maximumThresholdAmount: String
}

entity ContributionAmountBelowThresholdError {
    * minimumThresholdAmount: String
}

entity ContributionCardDeclinedError {
    * paymentIntentId: String
}

entity ContributionHistoryItem {
    * year: BigDecimal
}

entity ContributionInvalidOwnerEmailError {
    * providedEmail: String
}

entity ContributionRequiredAction {
}

entity ContributionState {
}

entity CoreAccountAlreadyExistsException {
    message: String
}

entity CoreAccountClosedException {
    message: String
}

entity CoreAchSubscriptionFeeItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreAdjustmentItem {
    amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreCashForwardItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * relatedMonth: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreCollectionItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreDividendsItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * etfCategory: String
    * etfTicker: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreEmployeeCreditItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * employerName: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreFeeInvestmentItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreFoundMoneyRewardItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    merchantName: String
    partnerLogoUrl: OasAnyTypeNotMapped
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreGiftCardCreditRedemptionItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreHoldingsTransferInItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreInvestmentItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * isCombinedInvestment: Boolean
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreLocalFoundMoneyItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    merchantName: String
    partnerLogoUrl: OasAnyTypeNotMapped
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CorePartnerRewardItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    merchantName: String
    partnerLogoUrl: OasAnyTypeNotMapped
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreRebalanceItem {
    amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreReferralRewardItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreRoundUpsItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * initialAmount: CurrencyAmount
    * isCombinedInvestment: Boolean
    merchantName: String
    * multiplier: BigDecimal
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    transactionAmount: CurrencyAmount
    * type: RoundUpType
    * updatedAt: OasAnyTypeNotMapped
}

entity CoreWithdrawalItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity CoverageAsk {
    * body: String
    * image: Image
    * noCta: Cta
    * title: String
    * yesCta: Cta
}

entity CoverageCalculator {
    * body: String
    * cta: Cta
    * headline: String
    * image: Image
    recommendedCoverage: BigDecimal
    * title: String
}

entity CoverageGrow {
    * body: String
    * cta: Cta
    * image: Image
    * title: String
}

entity CoverageKnown {
    * body: String
    * cta: Cta
    * educationSection: EducationSection
    * image: Image
    * subtitle: String
    * title: String
}

entity CoverageResponse {
    * covered: Boolean
    * insuranceType: InsuranceType
    provider: String
    providerId: String
}

entity CoverageShop {
    * body: String
    * id: String
    * legalDisclaimer: Disclaimer
    * modals: List<Modal>
    * partnerDisclaimer: Disclaimer
    * title: String
    * widgets: List<CoverageShopWidget>
}

entity CoverageShopWidget {
    * body: String
    * offers: List<CarouselOffer>
    * title: String
    * insuranceType: InsuranceType
    * cta: Cta
    * icon: Image
}

entity CoverageUnknown {
    body: String
    * cta: Cta
    * educationSection: EducationSection
    * icon: Image
    * image: Image
    * subtitle: String
    * title: String
}

entity CreateAccountPointsRuleInput {
    * details: String
    * milestoneID: String
    * pointsPerCompletion: BigDecimal
    summary: String
}

entity CreateAccountPointsRuleResult {
    * message: String
    * details: String
    * milestoneID: String
    * pointsPerCompletion: BigDecimal
    summary: String
}

entity CreateAuthProfileInput {
    email: OasAnyTypeNotMapped
    phoneNumber: OasAnyTypeNotMapped
}

entity CreateAuthProfileResult {
    defaultAuthenticator: Authenticator
    email: OasAnyTypeNotMapped
    emailVerifiedAt: OasAnyTypeNotMapped
    phoneNumber: String
    phoneNumberVerifiedAt: OasAnyTypeNotMapped
    requireLoginChallenge: Boolean
    * userId: String
    * message: String
}

entity CreateBankAccountInput {
    accountName: String
    * isDocumentsAccepted: Boolean
    tag: String
    * type: BankAccountType
}

entity CreateBankAccountPayload {
    bankAccount: BankAccount
}

entity CreateBeneficiaryResult {
    addresses: List<Address>
    avatarUrl: String
    * createdAt: OasAnyTypeNotMapped
    * custodianId: String
    * dateOfBirth: String
    deactivatedAt: OasAnyTypeNotMapped
    email: OasAnyTypeNotMapped
    * firstName: String
    * id: String
    * lastName: String
    phoneNumbers: List<Phone>
    * ssnPresent: Boolean
    * updatedAt: OasAnyTypeNotMapped
    message: String
}

entity CreateCustomSupportTicketInput {
    attachments: List<String>
    category: String
    customFields: List<String>
    * dateOfBirth: String
    * description: String
    * email: String
    * phoneNumber: String
    * subject: String
    ticketFormId: String
}

entity CreateDocumentUpload {
    * createdAt: OasAnyTypeNotMapped
    * expiresAt: OasAnyTypeNotMapped
    * requestedDocumentId: String
    * uploadUrl: OasAnyTypeNotMapped
}

entity CreateDocumentUploadInput {
    * contentType: String
    * documentType: DocumentType
}

entity CreateInvestmentAccountResponse {
    * id: String
    * iraType: InvestmentAccountTypes
    * userUuid: String
}

entity CreateMilestoneAccountLevelDefinitionInput {
    * activeBackgroundUrl: String
    * activeForegroundUrl: String
    * id: BigDecimal
    * inactiveBackgroundUrl: String
    * max: BigDecimal
    * min: BigDecimal
}

entity CreateMilestoneAccountLevelDefinitionResult {
    * message: String
    * activeBackground: Image
    * activeForeground: Image
    * id: BigDecimal
    * inactiveBackground: Image
    * max: BigDecimal
    * min: BigDecimal
}

entity CreateMilestoneAchievementActionRuleInput {
    * actions: List<MilestoneAchievementActionType>
    * milestoneID: String
}

entity CreateMilestoneAchievementActionRuleResult {
    * actions: List<MilestoneAchievementActionType>
    * milestoneID: String
    * message: String
}

entity CreateMilestoneChallengeDefinitionInput {
    details: String
    * endsAt: OasAnyTypeNotMapped
    * id: String
    logo: ImageInput
    * milestonesIds: List<String>
    name: String
    * startsAt: OasAnyTypeNotMapped
}

entity CreateMilestoneChallengeDefinitionResult {
    details: String
    * endsAt: OasAnyTypeNotMapped
    * id: String
    logo: Image
    * milestones: List<MilestoneDefinition>
    * name: String
    * startsAt: OasAnyTypeNotMapped
    * message: String
}

entity CreateMilestoneChallengePointsRuleInput {
    * challengeID: String
    * earningDetails: String
    earningSummary: String
    * maxPointsAllowed: BigDecimal
    * milestoneID: String
    * pointsPerCompletion: BigDecimal
}

entity CreateMilestoneChallengePointsRuleResult {
    * challengeID: String
    * details: String
    * maxPointsAllowed: BigDecimal
    * pointsPerCompletion: BigDecimal
    summary: String
    * message: String
}

entity CreateMilestoneDefinitionInput {
    arg1DateTime: OasAnyTypeNotMapped
    arg1Int: BigDecimal
    inactiveLogo: ImageInput
    * isRepeatable: Boolean
    * logo: ImageInput
    * name: String
    * ruleId: String
    * theme: MilestoneTheme
}

entity CreateMilestoneDefinitionResult {
    accountPointsRule: AccountPointsRule
    arg1DateTime: OasAnyTypeNotMapped
    arg1Int: BigDecimal
    challengePointsRule: MilestoneChallengePointsRule
    * id: String
    inactiveLogo: Image
    * isRepeatable: Boolean
    * logo: Image
    * name: String
    * rule: MilestoneRule
    * theme: MilestoneTheme
    * message: String
}

entity CreateMilestoneRuleInput {
    * argInput: MilestoneRuleArgInput
    * id: String
    * name: String
    * themes: List<MilestoneTheme>
}

entity CreateMilestoneRuleResult {
    * argInput: MilestoneRuleArgInput
    * id: String
    * name: String
    * themes: List<MilestoneTheme>
    * message: String
}

entity CreateOfferInput {
    * availableTo: OfferAvailability
    expiresAt: OasAnyTypeNotMapped
    * offerType: OfferType
    * price: OfferPriceInput
}

entity CreateOutsideContributionCheckoutCartInput {
    * code: String
    * investmentAmount: String
}

entity CreateOutsideContributionCheckoutCartResult {
    * maximumThresholdAmount: String
    * minimumThresholdAmount: String
    * code: OutsideContributionCode
    * createdAt: OasAnyTypeNotMapped
    * feeAmount: String
    * id: String
    * investmentAmount: String
    * paymentIntentId: String
    * status: CheckoutCartStatus
    * updatedAt: OasAnyTypeNotMapped
}

entity CreateOutsideContributionInput {
    * cardNumberLast4: String
    * cardProvider: String
    * contributorEmail: String
    * contributorFirstName: String
    * contributorLastName: String
    note: String
    noteAuthor: String
    * paymentIntentId: String
    * paymentMethodId: String
}

entity CreateOutsideContributionResult {
    * paymentIntentId: String
    redirectUrl: String
    * requiredAction: ContributionRequiredAction
    * providedEmail: String
    * accountId: String
    * checkoutCart: OutsideContributionCheckoutCart
    * createdAt: OasAnyTypeNotMapped
    failureReason: String
    * id: String
    investmentId: String
    note: String
    noteAuthor: String
    * paymentMethodId: String
    * state: ContributionState
    transferRequestId: String
    * updatedAt: OasAnyTypeNotMapped
}

entity CreatePlaidLinkedAccountInput {
    disableRoundUps: Boolean
    externalInstitutionId: String
    * linkSessionId: String
}

entity CreateProspectUserInput {
    * email: String
    * type: ProspectType
}

entity CreateProspectUserResult {
    * email: String
    * id: String
    message: String
    closedAt: OasAnyTypeNotMapped
    * uuid: String
}

entity CreateSubscriptionMigrationInput {
    * description: String
    * effectiveAt: OasAnyTypeNotMapped
    * fromTierId: String
    * toTierId: String
}

entity CreateSupportTicketInput {
    category: String
    * dob: String
    * email: String
    * firstName: String
    * lastName: String
    * message: String
    * phone: String
    recaptchaToken: String
    subcategory: String
    tags: List<String>
}

entity CreateUserInput {
    acceptanceDocumentVersionUuids: List<String>
    authorizationAccessToken: String
    authorizationExpiresAt: OasAnyTypeNotMapped
    authorizationProvider: String
    authorizationRefreshToken: String
    authorizationUid: String
    captchaToken: String
    clientCredentialsToken: String
    codeGroup: String
    * email: String
    firstName: String
    invitationCode: String
    lastName: String
    * password: String
    sourceAttributes: OasAnyTypeNotMapped
    sourceId: String
    * udid: String
    usResident: Boolean
    withBasicAccount: Boolean
}

entity CredentialStatus {
}

entity Cta {
    * id: String
    image: Image
    title: String
    * type: CtaType
}

entity CtaDetails {
    android: String
    buttonUrl: String
    email: String
    internallyRouted: Boolean
    ios: String
    title: String
    type: String
    userMetadata: String
    web: String
}

entity CtaType {
}

entity CurrencyAmount {
    * currency: String
    * value: BigDecimal
}

entity CurrencyAmountInput {
    * currency: String
    * value: BigDecimal
}

entity CurrencyMilestoneProgress {
    * currency: String
    * currentAmount: BigDecimal
    * targetAmount: BigDecimal
}

entity CurrentBankStatementNotProvided {
    message: String
    userId: String
}

entity CustodianAddressInput {
    * city: String
    * country: String
    * line1: String
    line2: String
    * state: StateCode
    * zipCode: String
}

entity CustodianCompany {
    * companyId: String
    * name: String
}

entity CustomFieldOption {
    default: Boolean
    id: String
    label: String
    name: String
    raw_name: String
    value: String
}

entity DayOfWeek {
}

entity DeactivateBeneficiaryResult {
    addresses: List<Address>
    avatarUrl: String
    * createdAt: OasAnyTypeNotMapped
    * custodianId: String
    * dateOfBirth: String
    deactivatedAt: OasAnyTypeNotMapped
    email: OasAnyTypeNotMapped
    * firstName: String
    * id: String
    * lastName: String
    phoneNumbers: List<Phone>
    * ssnPresent: Boolean
    * updatedAt: OasAnyTypeNotMapped
    message: String
}

entity DeactivateTierSubscriptionInput {
    feedback: String
    * subscriptionDeactivationReason: TierSubscriptionDeactivationReason
    * userId: String
}

entity DeactivateTierSubscriptionResult {
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * updatedAt: OasAnyTypeNotMapped
    activePromotion: Promotion
    createdBy: TierSubscriptionCreatedBy
    migration: SubscriptionMigration
    migrationId: String
    offer: Offer
    offerExpiresAt: OasAnyTypeNotMapped
    promotionAppliedAt: OasAnyTypeNotMapped
    promotionExpiresAt: OasAnyTypeNotMapped
    * status: TierSubscriptionStatus
    * tier: Tier
    * tierPrice: TierPrice
    transition: TierSubscriptionTransition
}

entity DealType {
}

entity DeleteExpiredBankCardOrderNotExpiredError {
    * expiresAt: OasAnyTypeNotMapped
}

entity DeleteExpiredBankCardOrderNotFoundError {
    * userId: String
}

entity DeleteExpiredBankCardOrderResult {
    addressVerification: BankCardOrderAddressVerification
    * cardOrderStatus: BankCardOrderStatus
    failureReason: BankCardOrderFailureReason
    fundingSourceVerification: BankCardOrderFundingSourceVerification
    identityVerification: BankCardOrderIdentityVerification
    prefundVerification: BankCardOrderPrefundVerification
    * userId: String
    * expiresAt: OasAnyTypeNotMapped
}

entity DepositField {
}

entity DepositRiskFactor {
    * description: String
    * fields: List<DepositField>
    * status: RiskStatus
}

entity DeregisterAuthenticatorInput {
    * id: String
}

entity DeregisterAuthenticatorResult {
    * createdAt: OasAnyTypeNotMapped
    * deviceId: String
    * id: String
    lastUsedAt: OasAnyTypeNotMapped
    * name: String
    * phoneNumber: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
    * email: OasAnyTypeNotMapped
    * message: String
}

entity Destination {
    * deepLink: OasAnyTypeNotMapped
    * labelKey: OasAnyTypeNotMapped
}

entity Device {
    appVersion: String
    * createdAt: OasAnyTypeNotMapped
    firstLoginAt: OasAnyTypeNotMapped
    * id: String
    * isBlocked: Boolean
    lastLoginAt: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
    userAgent: String
    * userId: String
}

entity DeviceBlockedException {
    * message: String
}

entity DeviceNotFoundException {
    * message: String
}

entity DirectDepositDistribution {
}

entity DirectDepositState {
    createdAt: OasAnyTypeNotMapped
    * switchMethod: SwitchMethod
    * switchState: SwitchState
    updatedAt: OasAnyTypeNotMapped
}

entity DirectDepositStatePayload {
    state: DirectDepositState
}

entity Disclaimer {
    * body: String
    cta: Cta
    image: Image
    title: String
}

entity DiscreteMilestoneProgress {
    * currentInt: BigDecimal
    * targetInt: BigDecimal
}

entity DistributionAmounts {
    * investment: String
    * retirement: String
    * savings: String
}

entity DistributionType {
}

entity Document {
    * uploadedAt: OasAnyTypeNotMapped
    * url: OasAnyTypeNotMapped
}

entity DocumentInput {
    * uploadedAt: OasAnyTypeNotMapped
    * url: OasAnyTypeNotMapped
}

entity DocumentNotFound {
    * documentType: String
    * documentVersion: String
}

entity DocumentQueryType {
}

entity DocumentRequest {
    acceptedAt: OasAnyTypeNotMapped
    canceledAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * documentType: DocumentType
    documents: List<Document>
    externalId: String
    * id: String
    parentRequestId: String
    rejectedAt: OasAnyTypeNotMapped
    rejectedNote: String
    rejectedReason: RejectedReason
    requestKey: String
    requestedFileCount: BigDecimal
    requesterId: String
    reviewerId: String
    * status: DocumentStatus
    * userId: String
}

entity DocumentRequestEdge {
    node: DocumentRequest
}

entity DocumentRequestInput {
    * documentRequestId: String
}

entity DocumentRequestsConnection {
    edges: List<DocumentRequestEdge>
    * pageInfo: DocumentRequestsPageInfo
}

entity DocumentRequestsInput {
    pageInput: DocumentRequestsPageInput
    status: DocumentStatus
    * type: DocumentQueryType
    uploaded: Boolean
}

entity DocumentRequestsPageInfo {
    cursor: String
    * hasNext: Boolean
}

entity DocumentRequestsPageInput {
    ascending: Boolean
    cursor: String
    limit: BigDecimal
}

entity DocumentStatus {
}

entity DocumentType {
}

entity DuplicateActionError {
    * requestId: String
}

entity EarlyAccountStateRegulation {
    * accountType: EarlyInvestmentAccountType
    * defaultAge: BigDecimal
    maxAge: BigDecimal
    minAge: BigDecimal
    * state: String
    * stateCode: String
}

entity EarlyAccountStateRegulationResult {
    * accountType: EarlyInvestmentAccountType
    * defaultAge: BigDecimal
    maxAge: BigDecimal
    minAge: BigDecimal
    * state: String
    * stateCode: String
    message: String
    userId: String
}

entity EarlyAccountTransferInfo {
    * stateCode: String
    * terminationAge: BigDecimal
    * terminationDate: OasAnyTypeNotMapped
}

entity EarlyDividendsItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * etfCategory: String
    * etfTicker: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity EarlyFeeInvestmentItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity EarlyGiftItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    note: String
    noteAuthor: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity EarlyInvestmentAccountType {
}

entity EarlyInvestmentItem {
    amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity EarlyWithdrawalItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity EarnCtaRecord {
    ctaDates: List<OasAnyTypeNotMapped>
    devicePlatform: String
    partnerName: String
    * userId: String
}

entity EarnOffer {
    affiliateCategoryList: List<String>
    affiliateCategoryType: String
    * backgroundColorHex: String
    * backgroundImageUrl: OasAnyTypeNotMapped
    badgeCategory: BadgeCategory
    * campaignDescription: String
    * campaignId: String
    * campaignOfferId: String
    * colorBackgroundLogoImageUrl: OasAnyTypeNotMapped
    * ctaDetails: EarnOfferCtaDetails
    dealType: DealType
    desktopBackgroundImageUrl: OasAnyTypeNotMapped
    * details: List<String>
    * devicePlatforms: List<String>
    displayBody: String
    displayEndDate: String
    * displayName: String
    displayStartDate: String
    displaySubtitle: String
    * displayTitle: String
    * exclusions: List<String>
    * favoriteRank: BigDecimal
    * featuredCategoryOffer: Boolean
    * featuredCategoryOfferRank: BigDecimal
    * incentiveSummary: String
    * isFavorite: Boolean
    keyphraseCategoryNames: List<String>
    merchantId: String
    * ownerDescription: String
    * ownerId: String
    * promoted: Boolean
    * promotionRank: BigDecimal
    * slug: String
    * termsAndConditionsUrl: String
    visibilityEndTime: String
    visibilityStartTime: String
    * webviewEnabled: Boolean
}

entity EarnOfferCtaDetails {
    android: String
    buttonUrl: String
    chromeExt: String
    email: String
    * internallyRouted: Boolean
    ios: String
    * notificationTitle: String
    * notificationUrl: OasAnyTypeNotMapped
    * repeatTitle: String
    * title: String
    * type: String
    userMetadata: String
    web: String
}

entity EarnOfferQueryPage {
    * earnOffers: List<EarnOffer>
    * pageInfo: EarnPageInfo
}

entity EarnPageInfo {
    * endCursor: String
}

entity Education {
    * articles: List<Article>
}

entity EducationSection {
    * body: String
    * title: String
}

entity EducationTip {
    * detailsKey: OasAnyTypeNotMapped
    * summaryKey: OasAnyTypeNotMapped
}

entity Eligibility {
    * eligible: Boolean
}

entity EligibilityScope {
}

entity EmailAuthChallenge {
    * alternateAuthenticators: List<AuthenticatorInfo>
    * id: String
    * maskedEmail: String
}

entity EmailAuthenticator {
    * createdAt: OasAnyTypeNotMapped
    * deviceId: String
    * email: OasAnyTypeNotMapped
    * id: String
    lastUsedAt: OasAnyTypeNotMapped
    * name: String
    * updatedAt: OasAnyTypeNotMapped
}

entity EmailTakenException {
    * message: String
}

entity Employees {
}

entity Employer {
    dunsName: String
    dunsNumber: String
    * employerName: String
    * id: String
    logoUrl: String
    * switch: AbstractSwitch
    * switchType: SwitchType
}

entity EmploymentInput {
    employer: String
    occupation: String
    suitability: List<SuitabilityInput>
}

entity EmploymentStatus {
}

entity EnterEventInput {
    comment: String
    * email: OasAnyTypeNotMapped
    * eventId: String
    * firstName: String
    * hasAccount: Boolean
    * lastName: String
    * optedIn: Boolean
}

entity EnterSweepstakesInput {
    * email: OasAnyTypeNotMapped
    * name: String
    reason: String
    * sweepstakesId: String
}

entity EnterSweepstakesResult {
    * createdAt: OasAnyTypeNotMapped
    id: String
    * name: String
    * updatedAt: OasAnyTypeNotMapped
    * message: String
}

entity Error {
    * message: String
}

entity EstimatedCheckPaymentDates {
    * estimatedArrivalAt: OasAnyTypeNotMapped
    * estimatedShippingAt: OasAnyTypeNotMapped
    * estimatedTransferAtText: String
}

entity EstimatedTransferDatesInput {
    * fromAccountType: TransferableAccountTypeEnum
    * toAccountType: TransferableAccountTypeEnum
    transferCreatedAt: OasAnyTypeNotMapped
}

entity EstimatedTransferDatesPayload {
    * estimatedTransferCompletedAt: OasAnyTypeNotMapped
}

entity Etf {
    amount: BigDecimal
    annualHigh: BigDecimal
    annualLow: BigDecimal
    currentPrice: BigDecimal
    * displayName: String
    holdings: List<Holding>
    * investmentCategories: InvestmentCategory
    lastClosePrice: BigDecimal
    * name: String
    netAssets: String
    openPrice: BigDecimal
    ownedShares: BigDecimal
    percent: BigDecimal
    * performance: EtfPerformance
    position: BigDecimal
    priceRangeOverWeek: String
    * symbol: String
    volume: BigDecimal
    ytdReturn: BigDecimal
}

entity EtfGain {
    * amount: BigDecimal
    * percentage: BigDecimal
}

entity EtfPerformance {
    gain: EtfGain
    prices: List<EtfPrice>
}

entity EtfPerformanceArgs {
    points: BigDecimal
    * timescale: EtfTimescale
    * timespan: BigDecimal
}

entity EtfPrice {
    * amount: BigDecimal
    * timestamp: OasAnyTypeNotMapped
}

entity EtfTimescale {
}

entity EvaluateCheckDepositInput {
    * amount: CurrencyAmountInput
    * sessionToken: String
}

entity EvaluateCheckDepositPayload {
    * ocrAmount: CurrencyAmount
    * riskFactors: List<DepositRiskFactor>
}

entity EventSubmission {
    comment: String
    * createdAt: OasAnyTypeNotMapped
    * email: OasAnyTypeNotMapped
    * eventId: String
    * firstName: String
    * hasAccount: Boolean
    * lastName: String
    * optedIn: Boolean
    * updatedAt: OasAnyTypeNotMapped
}

entity ExistingEmailVerifiedException {
    * message: String
}

entity ExistingPhoneVerifiedException {
    * message: String
}

entity ExistingRequestPendingReview {
    * reopenRequest: InvestmentAccountReopenRequest
}

entity ExistingRequestPendingUserAction {
    * reopenRequest: InvestmentAccountReopenRequest
}

entity ExpandedLifeRecommendation {
    * coverageBreakdown: LifeCoverageBreakdown
    * cta: Cta
    * title: String
}

entity ExperienceContent {
    * campaignId: String
    * rawContent: String
}

entity ExploreCarousel {
    * title: String
    * widgets: List<InsuranceSection>
}

entity ExtensionCampaign {
    backgroundColorHex: String
    backgroundImage: ExtensionCampaignBackgroundImage
    backgroundImageUrl: OasAnyTypeNotMapped
    * ctaDetails: ExtensionCampaignCtaDetails
    ctaTitle: String
    description: String
    displayEndDate: OasAnyTypeNotMapped
    displayTitle: String
    * id: String
    incentiveSummary: String
    * name: String
    rank: BigDecimal
    stores: List<ExtensionCampaignStore>
    termsAndConditionsUrl: String
}

entity ExtensionCampaignBackgroundImage {
    horizontalFocalPoint: String
    url: String
    verticalFocalPoint: String
}

entity ExtensionCampaignCtaDetails {
    chromeExt: OasAnyTypeNotMapped
    notificationTitle: String
    notificationUrl: OasAnyTypeNotMapped
    repeatTitle: String
    title: String
    type: String
    userAttribution: String
}

entity ExtensionCampaignStore {
    * checkoutMatchRegex: String
    * checkoutMatchType: String
    checkoutTotalAmountSelector: String
    * conversionMatchRegex: String
    * conversionMatchType: String
    conversionTotalAmountSelector: String
    * domain: OasAnyTypeNotMapped
    * enabled: Boolean
    id: String
}

entity ExtensionOwner {
    campaigns: List<ExtensionCampaign>
    colorBackgroundLogoImageUrl: OasAnyTypeNotMapped
    description: String
    greyLogoImageUrl: OasAnyTypeNotMapped
    * id: String
    imageUrl: OasAnyTypeNotMapped
    monochromeImageUrl: OasAnyTypeNotMapped
    * name: String
    * slug: String
    twitterHandle: String
}

entity ExtensionRewardsSummary {
    * totalFulfilledRewardsDollarValue: RewardSummary
    * totalPendingRewardsDollarValue: RewardSummary
    * totalRewardsDollarValue: RewardSummary
}

entity ExtensionTransaction {
    activatedAt: String
    campaignId: String
    confirmedAt: String
    convertedAt: String
    * createdAt: String
    * id: String
    lockedAt: String
    salesAmount: BigDecimal
    status: String
    userUuid: String
}

entity ExternalSource {
}

entity FavoritePartnerOfferGroup {
    * offers: List<PartnerOfferGroupItem>
}

entity FavoritePartnerOfferInput {
    * ids: List<String>
}

entity FeaturedOffer {
    * campaignId: String
    * cta: Cta
    * fastQuote: Boolean
    image: Image
    * logo: Image
    * offerId: String
    * ownerId: String
    subtitle: String
    tip: String
    * title: String
}

entity FeaturedOffers {
    body: String
    * offers: List<FeaturedOffer>
    * title: String
}

entity Fee {
    accountId: String
    * amount: BigDecimal
    assessedAt: String
    balance: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    discount: BigDecimal
    discountedAmount: BigDecimal
    * feeCategoryId: String
    * feeExecutions: List<FeeExecution>
    * feeType: FeeType
    * id: String
    * state: String
    * updatedAt: OasAnyTypeNotMapped
    userId: String
}

entity FeeExecution {
    * createdAt: OasAnyTypeNotMapped
    * executionMethod: String
    externalId: String
    fundingAccountId: String
    * id: String
    reason: String
    state: String
    * updatedAt: OasAnyTypeNotMapped
}

entity FeeExecutionMethod {
}

entity FeeStatus {
}

entity FeeStatusFilter {
}

entity FeeStatusSummary {
    * negotiable: BigDecimal
    * negotiated: BigDecimal
    * processing: BigDecimal
    * total: BigDecimal
    * unnegotiable: BigDecimal
}

entity FeeType {
}

entity FeedContext {
}

entity File {
    * documentRequestId: String
    * encoding: String
    * filename: String
    * mimetype: String
    * url: OasAnyTypeNotMapped
}

entity FileOrException {
    * documentRequestId: String
    * encoding: String
    * filename: String
    * mimetype: String
    * url: OasAnyTypeNotMapped
    * message: String
}

entity FileSizeError {
    * message: String
}

entity FileTooLarge {
    message: String
    userId: String
}

entity FilingType {
}

entity FinancialInstitution {
    * blacklisted: Boolean
    * boost: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    * deleted: Boolean
    * directBank: Boolean
    * externalId: String
    * hasMfa: Boolean
    * id: String
    linkProviderType: LinkProviderType
    * logoUrl: String
    * name: String
    oauthUrl: String
    * products: List<String>
    * updatedAt: OasAnyTypeNotMapped
    url: String
}

entity FinancialInstitutionTypeEdge {
    * cursor: String
    * node: FinancialInstitution
}

entity FinancialInstitutionTypePagination {
    * edges: List<FinancialInstitutionTypeEdge>
    * pageInfo: PageInfo
}

entity FinishSetup {
    * eyebrow: String
    * tips: List<SetUpTip>
}

entity Footer {
    image: Image
    title: String
}

entity FormType {
}

entity FormattedMonetaryAmount {
    * currency: String
    * value: String
}

entity FoundMoneyCampaign {
    backgroundImageUrl: OasAnyTypeNotMapped
    * id: String
    * name: String
    * offers: List<FoundMoneyOffer>
    ownerImageUrl: OasAnyTypeNotMapped
    * ownerName: String
}

entity FoundMoneyCampaignOfferV2 {
    * id: String
    * incentiveSummary: String
}

entity FoundMoneyCampaignV2 {
    * backgroundColorHex: String
    * backgroundImageUrl: OasAnyTypeNotMapped
    * cohortSlug: String
    colorBackgroundLogoImageUrl: OasAnyTypeNotMapped
    * colorImageUrl: OasAnyTypeNotMapped
    * displayName: String
    * id: String
    * imageUrl: OasAnyTypeNotMapped
    * offers: List<FoundMoneyCampaignOfferV2>
    * ownerId: String
}

entity FoundMoneyOffer {
    active: Boolean
    backgroundColorHex: String
    backgroundImage: BackgroundImage
    backgroundImageUrl: OasAnyTypeNotMapped
    campaignId: String
    colorBackgroundLogoImageUrl: OasAnyTypeNotMapped
    condensedSocialCopies: CondensedSocialCopies
    ctaDetails: CtaDetails
    ctaTitle: String
    dealType: DealType
    description: String
    devicePlatforms: List<String>
    displayEndDate: String
    displayStartDate: String
    displaySubtitle: String
    displayTitle: String
    * id: String
    owner: Owner
    promoted: Boolean
    promotionRank: BigDecimal
    rank: BigDecimal
    redemptionAction: String
    termsAndConditionsUrl: OasAnyTypeNotMapped
    webviewEnabled: Boolean
}

entity FoundMoneyOfferCategory {
    featuredOffer: FoundMoneyOffer
    iconUrl: String
    * id: String
    name: String
    offers: List<FoundMoneyOffer>
}

entity FoundMoneyOfferGroup {
    displayName: String
    * id: String
    offers: List<FoundMoneyOffer>
}

entity FoundMoneyReward {
    campaignOwnerName: String
    categoryIcon: String
    colorBackgroundLogoImageUrl: OasAnyTypeNotMapped
    daysFulfilledWithin: BigDecimal
    dollarValue: MonetaryAmount
    fulfillmentDate: String
    * id: String
    isFoundMoneyPlus: Boolean
    originationDate: String
    status: String
}

entity FoundMoneySummary {
    totalFulfilledRewardsDollarValue: MonetaryAmount
    totalPendingRewardsDollarValue: MonetaryAmount
    totalRewardsDollarValue: MonetaryAmount
}

entity Friend {
    advocateUserId: String
    campaigns: List<ReferralCampaign>
    * email: String
    friendExperienceContent: FriendExperienceContent
    name: String
    status: FriendStatus
    userId: String
}

entity FriendExperienceContent {
    advocateFirstName: String
    advocateLastName: String
    advocateMinimumIncentive: String
}

entity FriendStatus {
}

entity FriendSummary {
    * campaignId: String
    name: String
    status: FriendStatus
    * userId: String
}

entity Fund {
    * lastClosePrice: BigCurrencyAmount
    * lastUpdatedAt: OasAnyTypeNotMapped
    longName: String
    * marketCap: OasAnyTypeNotMapped
    * openPrice: BigCurrencyAmount
    * securityHeadlines: List<SecurityHeadline>
    * securityProfile: SecurityProfile
    * shortName: String
    * symbol: OasAnyTypeNotMapped
    * topHoldings: List<TopHolding>
    * type: SecurityType
    * volume: OasAnyTypeNotMapped
    * week52High: BigCurrencyAmount
    * week52Low: BigCurrencyAmount
}

entity FundingSource {
    alert: OasAnyTypeNotMapped
    * fundingType: String
    icon: OasAnyTypeNotMapped
    last4: String
    * name: String
    rdvSettledAt: OasAnyTypeNotMapped
    rdvTriggeredAt: OasAnyTypeNotMapped
    * type: String
    verificationStatus: BigDecimal
    verified: Boolean
}

entity FundingSourceAccount {
    * accountName: String
    alert: OasAnyTypeNotMapped
    balance: BigDecimal
    bankRoutingNumber: String
    * canCancel: Boolean
    * canTriggerRdv: Boolean
    canVerifyRdv: Boolean
    * createdAt: OasAnyTypeNotMapped
    * deleted: Boolean
    * frozen: Boolean
    * fundType: FundingSourceType
    icon: String
    * id: BigDecimal
    * institutionName: String
    insufficientFunds: Boolean
    last4: String
    * linked: Boolean
    linkedSubaccountId: String
    logoUrl: String
    * name: String
    rdvSettledAt: OasAnyTypeNotMapped
    rdvTriggeredAt: OasAnyTypeNotMapped
    role: FundingSourceRoleEnum
    * status: FundingSourceStatus
    * transfersApproved: Boolean
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    uuid: String
    * verificationStatus: BigDecimal
    verified: Boolean
}

entity FundingSourceAlreadyExists {
    message: String
    userId: String
}

entity FundingSourceInfo {
    accountNumberLastFour: String
    alert: OasAnyTypeNotMapped
    balance: BigDecimal
    icon: OasAnyTypeNotMapped
    linkedSubaccountId: String
    * name: String
    rdvSettledAt: OasAnyTypeNotMapped
    rdvTriggeredAt: OasAnyTypeNotMapped
    type: FundingSourceType
    verificationStatus: BigDecimal
    verified: Boolean
}

entity FundingSourceRequiresRdvException {
    message: String
}

entity FundingSourceRoleEnum {
}

entity FundingSourceStatus {
}

entity FundingSourceStatusEnum {
}

entity FundingSourceType {
}

entity FundsAvailability {
}

entity Funnel {
}

entity GenerateLinkSessionInput {
    * institutionId: String
    isWebview: Boolean
    language: LinkSessionLanguage
    linkedAccountId: String
    redirectUrl: OasAnyTypeNotMapped
}

entity GenerateUpdatedPdfPayload {
    * pdf: String
}

entity GrowProspect {
    * email: String
    * id: String
}

entity Header {
    * image: Image
    * title: String
}

entity HelpFormContent {
    body: String
    title: String
}

entity HelpFormType {
}

entity Holding {
    * amount: BigDecimal
    * name: String
    * percent: BigDecimal
    * symbol: String
}

entity HomeIcon {
    * body: String
    * cta: Cta
    * icon: Image
    title: String
}

entity HomeIcons {
    * icons: List<HomeIcon>
}

entity IdentityDocumentRequestedUserAlert {
    * requestedDocumentType: DocumentType
    * type: String
    * userId: String
}

entity Image {
    * url: String
}

entity ImageInput {
    * url: String
}

entity ImageType {
}

entity Incentive {
    copyKey: String
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    updatedAt: OasAnyTypeNotMapped
}

entity IncorrectOldPasswordException {
    * message: String
}

entity IneligibilityLander {
    alternatePartners: InsuranceCarousel
    * body: String
    * cta: Cta
    disclaimer: Disclaimer
    * id: String
    * logo: Image
    * title: String
}

entity InitiateEmailChallengeInput {
    * email: OasAnyTypeNotMapped
}

entity InitiateEmailChallengeResult {
    * alternateAuthenticators: List<AuthenticatorInfo>
    * id: String
    * maskedEmail: String
    * message: String
}

entity InitiateSmsChallengeInput {
    * phoneNumber: OasAnyTypeNotMapped
}

entity InitiateSmsChallengeResult {
    * alternateAuthenticators: List<AuthenticatorInfo>
    * id: String
    * maskedPhoneNumber: String
    * message: String
}

entity InitiateTransferInput {
    * amount: CurrencyAmountInput
    * fromAccountId: String
    nonce: String
    * toAccountId: String
}

entity InitiateTransferPayload {
    transfer: Transfer
}

entity InstitutionNotSupportedError {
    * message: String
}

entity InsufficientFundsUserAlert {
    * type: String
    * userId: String
}

entity InsuranceCarousel {
    body: String
    * insuranceType: InsuranceType
    * offers: List<CarouselOffer>
    * title: String
}

entity InsuranceHome {
    * body: String
    * disclaimerBody: String
    * disclaimerCta: Cta
    * image: Image
    * insuranceType: InsuranceType
    * modals: List<Modal>
    * subtitle: String
    * title: String
    * widgets: List<InsuranceHomeWidget>
}

entity InsuranceHomeWidget {
    * body: String
    * image: Image
    * noCta: Cta
    * title: String
    * yesCta: Cta
    * cta: Cta
    * headline: String
    recommendedCoverage: BigDecimal
    * educationSection: EducationSection
    * subtitle: String
    * icon: Image
    * insuranceType: InsuranceType
    * offers: List<CarouselOffer>
}

entity InsuranceSection {
    * body: String
    * cta: Cta
    * image: Image
    * insuranceType: String
    * recommendType: String
    * title: String
}

entity InsuranceType {
}

entity InternalErrorException {
    message: String
}

entity InvalidAccountNumber {
    message: String
    userId: String
}

entity InvalidAccountTypeException {
    message: String
}

entity InvalidActionOnAccount {
    message: String
}

entity InvalidAddressError {
    errorMessage: String
    * requestId: String
}

entity InvalidAddressException {
    message: String
}

entity InvalidCredentialsException {
    * message: String
}

entity InvalidDateOfBirthException {
    message: String
}

entity InvalidEmailException {
    message: String
}

entity InvalidFile {
    message: String
    userId: String
}

entity InvalidFirstNameException {
    message: String
}

entity InvalidLastNameException {
    message: String
}

entity InvalidLaterInput {
    * id: String
    * message: String
}

entity InvalidManualLink {
    message: String
    userId: String
}

entity InvalidPasswordException {
    * message: String
}

entity InvalidPhoneException {
    message: String
}

entity InvalidPhoneNumberException {
    * message: String
}

entity InvalidPinException {
    * message: String
}

entity InvalidPortfolioIdException {
    message: String
}

entity InvalidRoutingNumber {
    message: String
    userId: String
}

entity InvalidSsnError {
    * message: String
}

entity InvalidSsnException {
    message: String
}

entity InvalidStateException {
    message: String
    state: String
}

entity InvalidSubscriptionTierException {
    currentUserTierKey: String
}

entity InvalidTerminationAgeException {
    message: String
}

entity InvalidTier {
    * message: String
    * validTiers: List<Tier>
}

entity InvalidTierForMigrationError {
    * message: String
}

entity InvalidTierPrice {
    * message: String
    * validTierPrices: List<TierPrice>
}

entity InvalidTierPriceCombination {
    * message: String
    * tier: Tier
}

entity InvalidTierPriceId {
    * message: String
}

entity Investment {
    allocations: List<InvestmentAllocation>
    * amount: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    description: String
    details: OasAnyTypeNotMapped
    executionDate: OasAnyTypeNotMapped
    * id: String
    pending: Boolean
    receivedAt: OasAnyTypeNotMapped
    * reversible: Boolean
    shares: BigDecimal
    * status: InvestmentStatus
    * type: String
    typeHelp: String
}

entity InvestmentAccount {
    beneficiary: Beneficiary
    beneficiaryId: String
    * cashBalance: MonetaryAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    currentBalance: MonetaryAmount
    * currentBalanceWithPending: MonetaryAmount
    * hasInvested: Boolean
    * id: String
    * investmentAccountType: InvestmentAccountType
    * name: String
    * netInvestments: MonetaryAmount
    * pendingBalance: MonetaryAmount
    * pendingWithdrawals: List<Withdrawal>
    performance: Performance
    portfolio: Portfolio
    * product: InvestmentProduct
    recommendedPortfolio: Portfolio
    recurringInvestmentSettings: RecurringInvestmentSettings
    * requirements: AccountRequirements
    * status: InvestmentAccountStatus
    * summary: InvestmentAccountSummary
    * totalBonds: MonetaryAmount
    * totalEquities: MonetaryAmount
    transferability: InvestmentAccountTransferability
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    yearToDateReturn: MarketReturn
}

entity InvestmentAccountAlreadyClosed {
    * accountClosedAt: OasAnyTypeNotMapped
}

entity InvestmentAccountClosureInProgress {
    * clientMessage: String
}

entity InvestmentAccountClosureReason {
}

entity InvestmentAccountCreationException {
    message: String
}

entity InvestmentAccountNeedsTransferException {
    message: String
}

entity InvestmentAccountNotClosedException {
    accountType: InvestmentAccountType
}

entity InvestmentAccountNotFoundException {
    message: String
}

entity InvestmentAccountPerformanceArgs {
    * days: BigDecimal
}

entity InvestmentAccountReopenCheck {
}

entity InvestmentAccountReopenRequest {
    * createdAt: OasAnyTypeNotMapped
    * id: BigDecimal
    * investmentAccountId: String
    * reopenChecks: List<UserInvestmentAccountReopenCheck>
    * state: InvestmentAccountReopenRequestState
    * updatedAt: OasAnyTypeNotMapped
    * user: UserV2
    * userId: BigDecimal
}

entity InvestmentAccountReopenRequestAction {
    * createdAt: Date
    * fromState: String
    * id: String
    * toState: String
    * updatedAt: Date
}

entity InvestmentAccountReopenRequestNote {
    * adminAction: InvestmentAccountReopenRequestAction
    * createdAt: OasAnyTypeNotMapped
    * emailSent: Boolean
    * id: String
    * note: String
    * reopenRequest: InvestmentAccountReopenRequest
    * updatedAt: OasAnyTypeNotMapped
}

entity InvestmentAccountReopenRequestState {
}

entity InvestmentAccountStatus {
}

entity InvestmentAccountSummary {
    firstInvestmentDate: OasAnyTypeNotMapped
    mostRecentOneTimeInvestmentDate: OasAnyTypeNotMapped
    * totalCredits: BigDecimal
    * totalDividends: BigDecimal
    * totalFoundMoneyRewards: BigDecimal
    * totalInvested: BigDecimal
    * totalOneTime: BigDecimal
    * totalOutsideContributions: BigDecimal
    * totalPlan: BigDecimal
    * totalRecurring: BigDecimal
    * totalReferralRewards: BigDecimal
    * totalRoundUps: BigDecimal
    * totalRtru: BigDecimal
}

entity InvestmentAccountSummaryArgs {
    * endPeriod: OasAnyTypeNotMapped
    * startPeriod: OasAnyTypeNotMapped
}

entity InvestmentAccountTransferability {
    * transferAge: BigDecimal
    * transferDate: OasAnyTypeNotMapped
    * transferReached: Boolean
    * transferStateCode: UsStateCodes
}

entity InvestmentAccountType {
}

entity InvestmentAccountTypes {
}

entity InvestmentAccountsByUserIdFilter {
    accountStatus: InvestmentAccountStatus
    product: InvestmentProduct
}

entity InvestmentAllocation {
    * amount: BigDecimal
    * shares: BigDecimal
    * symbol: String
}

entity InvestmentCategory {
    * bond: BigDecimal
    * equity: BigDecimal
    * realEstate: BigDecimal
}

entity InvestmentFilter {
    operation: InvestmentOperation
    status: InvestmentStatus
    type: InvestmentType
}

entity InvestmentFrequency {
}

entity InvestmentNotFoundException {
    id: String
}

entity InvestmentOperation {
}

entity InvestmentProduct {
}

entity InvestmentStatus {
}

entity InvestmentType {
}

entity InvestmentTypes {
}

entity InvestmentUncancellableException {
    id: String
}

entity InvestmentsPausedUserAlert {
    * type: String
    * userId: String
}

entity InvestorQuestionsInput {
    employedAffiliatedWithBrokerDealer: Boolean
    shareholderOrDirector: Boolean
    subjectToBackupWithholding: Boolean
}

entity JobAlert {
    * id: String
    * keyPhrase: String
    * location: String
}

entity JobAlertCriteriaInput {
    * filters: List<JobSearchFilterInput>
    * location: JobLocationInput
}

entity JobLocation {
    city: String
    state: String
    value: String
}

entity JobLocationInput {
    city: String
    state: String
    value: String
}

entity JobOffer {
    * companyLogo: Image
    * companyName: String
    * id: String
    industryName: String
    * jobName: String
    * location: OfferLocation
    salary: JobOfferSalary
    * tags: List<String>
    * url: OasAnyTypeNotMapped
}

entity JobOfferSalary {
    * interval: SalaryInterval
    * maxValue: BigDecimal
    * minValue: BigDecimal
}

entity JobSearchCriteria {
    * filters: List<JobSearchFilter>
    * location: JobLocation
    searchRadius: BigDecimal
}

entity JobSearchCriteriaInput {
    * filters: List<JobSearchFilterInput>
    * location: JobLocationInput
    searchRadius: BigDecimal
}

entity JobSearchFilter {
    * key: JobSearchFilterKey
    * value: String
}

entity JobSearchFilterInput {
    * key: JobSearchFilterKey
    * value: String
}

entity JobSearchFilterKey {
}

entity JobSearchOffer {
    * backgroundImage: Image
    body: String
    * desktopBackgroundImage: Image
    * id: String
    logo: Image
    * searchFilters: List<JobSearchFilter>
    subtitle: String
    * title: String
}

entity JobSearchPage {
    * recentSearches: List<JobSearchCriteria>
}

entity JobsArticle {
    * body: String
    cta: Cta
    * eyebrow: String
    * id: String
    image: Image
    * title: String
}

entity JobsEducation {
    * articles: List<JobsArticle>
    * id: String
    * title: String
}

entity JobsOffer {
    * companyLogo: Image
    * companyName: String
    * id: String
    industryName: String
    * jobName: String
    * location: JobLocation
    salary: JobsOfferSalary
    * tags: List<String>
    * url: OasAnyTypeNotMapped
}

entity JobsOfferConnection {
    * edges: List<JobsOfferEdge>
    * pageInfo: PageInfo
}

entity JobsOfferEdge {
    * cursor: String
    * node: JobsOffer
}

entity JobsOfferSalary {
    * interval: SalaryInterval
    * maxValue: BigDecimal
    * minValue: BigDecimal
}

entity LadderLinkResponse {
    * id: String
    * url: String
    * urlExpires: BigDecimal
}

entity LadderQuote {
    coverage: BigDecimal
    monthlyPremium: BigDecimal
    term: BigDecimal
}

entity LadderQuoteStatus {
    complete: Boolean
    eligible: Boolean
    valid: Boolean
}

entity LadderResponse {
    * id: String
    quoteStatus: LadderQuoteStatus
    * quotes: List<LadderQuote>
}

entity LaterAccount {
    * accountId: String
    accountNumber: String
    * amount: BigDecimal
    * code: LaterAccountCodes
    * contributionLimit: BigDecimal
    * name: String
    performance: LaterPortfolioPerformance
    * portfolioId: String
    * portfolioName: String
    recurringSettings: RecurringInvestmentSettings
    status: LaterAccountStatus
}

entity LaterAccountAlreadyVerified {
    * id: String
    * message: String
}

entity LaterAccountCodes {
}

entity LaterAccountIneligibleForVerification {
    * id: String
    * message: String
}

entity LaterAccountInfo {
    * investmentAccountId: String
    * plan: InvestmentAccountTypes
    * status: LaterAccountStatus
    * userId: String
}

entity LaterAccountInfoOrError {
    * id: String
    * message: String
    * investmentAccountId: String
    * plan: InvestmentAccountTypes
    * status: LaterAccountStatus
    * userId: String
}

entity LaterAccountNotFound {
    * id: String
    * message: String
}

entity LaterAccountStatus {
}

entity LaterBeneficiary {
    * accountId: String
    beneficiaryId: String
    percentageShare: BigDecimal
    type: BeneficiaryType
}

entity LaterContributionLimitMet {
    * year: BigDecimal
}

entity LaterDeposit {
    * amount: BigDecimal
    * date: OasAnyTypeNotMapped
    * depositId: String
    depositType: LaterDepositType
    * name: String
    pending: Boolean
    reversible: Boolean
    * status: String
    * taxYear: BigDecimal
    tradeConfirmUrl: String
    type: LaterHistoryItemType
}

entity LaterDepositType {
}

entity LaterDividendsItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * etfCategory: String
    * etfTicker: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity LaterEntityBeneficiary {
    * accountId: String
    beneficiaryId: String
    * name: String
    percentageShare: BigDecimal
    type: BeneficiaryType
}

entity LaterFeeInvestmentItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity LaterFullContributionSuccess {
    * year: BigDecimal
}

entity LaterHistoryItem {
    * amount: BigDecimal
    * date: OasAnyTypeNotMapped
    pending: Boolean
    reversible: Boolean
    * status: String
    * taxYear: BigDecimal
    tradeConfirmUrl: String
    type: LaterHistoryItemType
}

entity LaterHistoryItemType {
}

entity LaterIndividualBeneficiary {
    * accountId: String
    addressLine1: String
    addressLine2: String
    beneficiaryId: String
    * birthDate: OasAnyTypeNotMapped
    city: String
    country: String
    * firstName: String
    * lastName: String
    percentageShare: BigDecimal
    * relationship: String
    state: String
    type: BeneficiaryType
    zip: String
}

entity LaterIndividualBeneficiaryResponse {
    * accountId: String
    addressLine1: String
    addressLine2: String
    * beneficiaryId: String
    birthDate: OasAnyTypeNotMapped
    city: String
    country: String
    * firstName: String
    * lastName: String
    percentageShare: BigDecimal
    * relationship: String
    state: String
    zip: String
}

entity LaterInvestmentItem {
    amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity LaterPartialContributionSuccess {
    * acceptedAmount: CurrencyAmount
    * year: BigDecimal
}

entity LaterPortfolioPerformance {
    * periodMarketChange: BigDecimal
    * periodMarketChangePercent: BigDecimal
    * periodMarketChangePercentWithoutFees: BigDecimal
    * periodMarketChangeWithoutFees: BigDecimal
}

entity LaterProgramAccountContributionInput {
    * amount: CurrencyAmountInput
    * nonce: String
    * programAccountType: String
    year: BigDecimal
}

entity LaterProgramAccountContributionResult {
    * year: BigDecimal
    * acceptedAmount: CurrencyAmount
}

entity LaterRebalanceItem {
    amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity LaterTotalLiquidationInput {
    earlyDistributionTaxExceptionReason: String
    * federalTaxes: BigDecimal
    reason: LaterWithdrawalReason
    * stateTaxes: BigDecimal
    * taxYear: BigDecimal
    withdrawalType: LaterWithdrawalType
}

entity LaterTypedException {
    * id: String
    * message: String
}

entity LaterWaitlistProspect {
    * email: String
    * id: String
}

entity LaterWithdrawal {
    * amount: BigDecimal
    * date: OasAnyTypeNotMapped
    earlyDistributionTaxExceptionReason: String
    federalTaxes: BigDecimal
    * name: String
    pending: Boolean
    reversible: Boolean
    stateTaxes: BigDecimal
    * status: String
    * taxYear: BigDecimal
    tradeConfirmUrl: String
    type: LaterHistoryItemType
    * withdrawalId: String
    withdrawalType: LaterWithdrawalType
}

entity LaterWithdrawalItem {
    * amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    federalWithholdings: LaterWithholdingValues
    * id: String
    * reversible: Boolean
    stateWithholdings: LaterWithholdingValues
    * status: PastItemStatus
    * title: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity LaterWithdrawalReason {
}

entity LaterWithdrawalType {
}

entity LaterWithholdingValues {
    * amount: CurrencyAmount
    * percentage: BigDecimal
}

entity LegacyUploadDocument {
    * documentType: DocumentType
    * id: String
    * userId: String
}

entity LegacyUploadDocumentInput {
    * documentType: DocumentType
    * upload: OasAnyTypeNotMapped
}

entity LegacyUploadDocumentResult {
    message: String
    * userId: String
    * documentType: DocumentType
    * id: String
}

entity LifeCalculatorInput {
    debt: LifeCalculatorUserResponse
    mortgage: LifeCalculatorUserResponse
    * netIncome: LifeCalculatorUserResponse
    numberOfChildren: LifeCalculatorUserResponse
    * payoutYears: LifeCalculatorUserResponse
    savings: LifeCalculatorUserResponse
    youngestChildAge: LifeCalculatorUserResponse
}

entity LifeCalculatorQuestion {
    * column: BigDecimal
    * id: String
    maxDigits: BigDecimal
    maxValue: BigDecimal
    minValue: BigDecimal
    * name: String
    * placeholder: String
    * row: BigDecimal
    tip: Tip
    * title: String
    * type: LifeCalculatorQuestionType
    value: BigDecimal
}

entity LifeCalculatorQuestionType {
}

entity LifeCalculatorSurvey {
    * body: String
    * cta: Cta
    * id: String
    * modals: List<Modal>
    * questions: List<LifeCalculatorQuestion>
    * tip: Tip
    * title: String
    * tutorialTitle: String
}

entity LifeCalculatorUserResponse {
    * id: String
    * value: BigDecimal
}

entity LifeCoverageBreakdown {
    * debt: LifeCoverageBreakdownCategory
    * education: LifeCoverageBreakdownCategory
    * expenses: LifeCoverageBreakdownCategory
    * nearestCoverage: LifeCoverageBreakdownCategory
    * savings: LifeCoverageBreakdownCategory
    * totalNeeds: LifeCoverageBreakdownCategory
}

entity LifeCoverageBreakdownCategory {
    tip: String
    * title: String
    * value: BigDecimal
}

entity LifeQuoteApplyInput {
    * coverageAmount: BigDecimal
    * providerName: String
    * termLength: BigDecimal
}

entity LifeQuoteInput {
    * dateOfBirth: String
    * familyHistory: Boolean
    * gender: String
    * heightInches: BigDecimal
    * householdIncome: BigDecimal
    * providerName: String
    * smoker: Boolean
    * userMetadata: QuoteUserMetadata
    * weightPounds: BigDecimal
    * zipCode: String
}

entity LifeQuoteQuestion {
    answers: List<QuestionAnswer>
    * id: String
    maxValue: String
    minValue: String
    * name: String
    * placeholder: String
    * required: String
    tip: Tip
    * title: String
    * type: LifeQuoteQuestionType
    value: String
}

entity LifeQuoteQuestionType {
}

entity LifeQuoteResponse {
    * success: Boolean
}

entity LifeQuoteResultSliders {
    * cta: Cta
    * footer: Footer
    * header: Header
    * id: String
    * modals: List<Modal>
    * navBody: String
    * navTitle: String
    * partnerBody: String
    * partnerTitle: String
    * partnerUrl: String
    premiums: List<Premium>
    requestedCoverage: BigDecimal
    * sliders: List<QuoteSlider>
}

entity LifeQuoteStep {
    body: String
    cta: Cta
    footer: Footer
    navBody: String
    navTitle: String
    * questions: List<LifeQuoteQuestion>
    tip: Tip
    title: String
}

entity LifeQuoteSurvey {
    * id: String
    * modals: List<Modal>
    * steps: List<LifeQuoteStep>
}

entity LinkManualFundingSourceInput {
    * accountNumber: String
    * routingNumber: OasAnyTypeNotMapped
}

entity LinkManualFundingSourceResult {
    message: String
    userId: String
    * accountName: String
    alert: OasAnyTypeNotMapped
    balance: BigDecimal
    bankRoutingNumber: String
    * canCancel: Boolean
    * canTriggerRdv: Boolean
    canVerifyRdv: Boolean
    * createdAt: OasAnyTypeNotMapped
    * deleted: Boolean
    * frozen: Boolean
    * fundType: FundingSourceType
    icon: String
    * id: BigDecimal
    * institutionName: String
    insufficientFunds: Boolean
    last4: String
    * linked: Boolean
    linkedSubaccountId: String
    logoUrl: String
    * name: String
    rdvSettledAt: OasAnyTypeNotMapped
    rdvTriggeredAt: OasAnyTypeNotMapped
    role: FundingSourceRoleEnum
    * status: FundingSourceStatus
    * transfersApproved: Boolean
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    uuid: String
    * verificationStatus: BigDecimal
    verified: Boolean
}

entity LinkProviderType {
}

entity LinkSessionInput {
    * authorizationCode: String
    disableRoundUps: Boolean
    * financialInstitutionId: String
    linkSessionId: String
    linkedAccountId: String
}

entity LinkSessionLanguage {
}

entity LinkSessionResult {
    * externalId: String
    * token: String
    * linkedAccountId: String
    * url: OasAnyTypeNotMapped
}

entity LinkedAccount {
    * createdAt: OasAnyTypeNotMapped
    errorCode: String
    externalId: String
    * externalSource: LinkedAccountExternalSourceEnum
    financialInstitution: FinancialInstitution
    financialInstitutionId: String
    * id: String
    institutionName: String
    * linked: Boolean
    * linkedSubaccounts: List<LinkedSubaccount>
    * logoUrl: String
    publicToken: String
    * status: LinkedAccountStatusEnum
    transactionsLastSyncedAt: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
}

entity LinkedAccountAlert {
    * type: String
    * userId: String
}

entity LinkedAccountAlertsResponse {
    * type: String
    * userId: String
}

entity LinkedAccountExternalSourceEnum {
}

entity LinkedAccountLinkingErrorsEnum {
}

entity LinkedAccountNotFound {
    * message: String
}

entity LinkedAccountStatusEnum {
}

entity LinkedSubaccount {
    accountNumberLastFour: String
    * allowedRoles: List<LinkedSubaccountRoleEnum>
    balanceAvailable: BigDecimal
    balanceCurrent: BigDecimal
    balanceLimit: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    externalId: String
    externalSource: String
    * id: String
    * linked: Boolean
    * linkedAccountId: String
    * name: String
    officialName: String
    * paymentEngines: List<String>
    role: LinkedSubaccountRoleEnum
    routingNumber: String
    status: FundingSourceStatusEnum
    * subaccountSubtype: String
    * subaccountType: String
    * transactionsLastSyncedCount: BigDecimal
    transfersApproved: Boolean
    transfersAtRisk: Boolean
    * updatedAt: OasAnyTypeNotMapped
}

entity LinkedSubaccountRoleEnum {
}

entity LockBankCardInput {
    * lockReason: BankCardTemporaryLockReason
}

entity LockBankCardPayload {
    bankCard: BankCard
}

entity LoginRateLimitedException {
    * message: String
}

entity MakeInvestmentInput {
    * amount: BigDecimal
    fundingSourceId: String
    investmentAccountId: String
    * type: InvestmentTypes
}

entity MakeInvestmentPayload {
    * id: String
}

entity MalformedRecurringTransferException {
    * pathExceptions: List<RecurringTransferPathException>
}

entity MaritalStatus {
}

entity MaritalStatusType {
}

entity Market {
    * isOpen: Boolean
}

entity MarketReturn {
    * marketValue: MonetaryAmount
    * percent: BigDecimal
}

entity MaxAccountsCreatedException {
    message: String
}

entity MfaMissingAuthAlert {
    * type: String
    * userId: String
}

entity Milestone {
    * accountPoints: AccountPoints
    challengePoints: ChallengePointsEarned
    * descriptionKey: OasAnyTypeNotMapped
    destination: Destination
    detailsKey: OasAnyTypeNotMapped
    * educationTip: EducationTip
    firstCompletedAt: OasAnyTypeNotMapped
    * id: String
    * isRepeatable: Boolean
    lastCompletedAt: OasAnyTypeNotMapped
    * logo: Image
    * name: String
    * progress: MilestoneProgress
    * rule: MilestoneRuleType
    * status: MilestoneStatus
    * theme: MilestoneTheme
    * timesCompleted: BigDecimal
}

entity MilestoneAccountLevelDefinition {
    * activeBackground: Image
    * activeForeground: Image
    * id: BigDecimal
    * inactiveBackground: Image
    * max: BigDecimal
    * min: BigDecimal
}

entity MilestoneAchievementActionRule {
    * actions: List<MilestoneAchievementActionType>
    * milestoneID: String
}

entity MilestoneAchievementActionType {
}

entity MilestoneByThemeFilterInput {
    challengeId: String
    rule: MilestoneRuleType
}

entity MilestoneChallenge {
    * closingAt: String
    details: String
    * endsAt: OasAnyTypeNotMapped
    faqDeepLink: OasAnyTypeNotMapped
    * groupedMilestones: List<MilestoneGroup>
    * id: String
    logo: Image
    * milestonesCompleted: DiscreteMilestoneProgress
    * name: String
    pointsEarned: DiscreteMilestoneProgress
    rulesDeepLink: OasAnyTypeNotMapped
}

entity MilestoneChallengeDefinition {
    details: String
    * endsAt: OasAnyTypeNotMapped
    * id: String
    logo: Image
    * milestones: List<MilestoneDefinition>
    * name: String
    * startsAt: OasAnyTypeNotMapped
}

entity MilestoneChallengePointsArgs {
    * challengeId: String
}

entity MilestoneChallengePointsRule {
    * challengeID: String
    * details: String
    * maxPointsAllowed: BigDecimal
    * pointsPerCompletion: BigDecimal
    summary: String
}

entity MilestoneDefinition {
    accountPointsRule: AccountPointsRule
    arg1DateTime: OasAnyTypeNotMapped
    arg1Int: BigDecimal
    challengePointsRule: MilestoneChallengePointsRule
    * id: String
    inactiveLogo: Image
    * isRepeatable: Boolean
    * logo: Image
    * name: String
    * rule: MilestoneRule
    * theme: MilestoneTheme
}

entity MilestoneDefinitionChallengePointsRuleArgs {
    * challengeId: String
}

entity MilestoneGroup {
    * contents: List<MilestoneThemeGroupContent>
    * descriptionKey: OasAnyTypeNotMapped
    * groupCompletion: DiscreteMilestoneProgress
    * logo: Image
    * nameKey: OasAnyTypeNotMapped
    * rule: MilestoneRuleType
    groupPointsProgress: DiscreteMilestoneProgress
    * isLocked: Boolean
    * theme: MilestoneTheme
}

entity MilestoneHub {
    * groupedMilestones: List<MilestoneGroup>
    * levelDefinitions: List<MilestoneAccountLevelDefinition>
    * userAccount: MilestoneHubAccount
}

entity MilestoneHubAccount {
    * accountPointsProgress: DiscreteMilestoneProgress
    * currentLevel: BigDecimal
    * milestoneProgress: DiscreteMilestoneProgress
}

entity MilestoneProgress {
    * currency: String
    * currentAmount: BigDecimal
    * targetAmount: BigDecimal
    * currentInt: BigDecimal
    * targetInt: BigDecimal
}

entity MilestoneRule {
    * argInput: MilestoneRuleArgInput
    * id: String
    * name: String
    * themes: List<MilestoneTheme>
}

entity MilestoneRuleArgInput {
}

entity MilestoneRuleGroup {
    * contents: List<Milestone>
    * descriptionKey: OasAnyTypeNotMapped
    * groupCompletion: DiscreteMilestoneProgress
    * logo: Image
    * nameKey: OasAnyTypeNotMapped
    * rule: MilestoneRuleType
}

entity MilestoneRuleType {
}

entity MilestoneStatus {
}

entity MilestoneTheme {
}

entity MilestoneThemeGroup {
    * contents: List<MilestoneThemeGroupContent>
    * groupCompletion: DiscreteMilestoneProgress
    groupPointsProgress: DiscreteMilestoneProgress
    * isLocked: Boolean
    * theme: MilestoneTheme
}

entity MilestoneThemeGroupContent {
    * contents: List<Milestone>
    * descriptionKey: OasAnyTypeNotMapped
    * groupCompletion: DiscreteMilestoneProgress
    * logo: Image
    * nameKey: OasAnyTypeNotMapped
    * rule: MilestoneRuleType
    * accountPoints: AccountPoints
    challengePoints: ChallengePointsEarned
    destination: Destination
    detailsKey: OasAnyTypeNotMapped
    * educationTip: EducationTip
    firstCompletedAt: OasAnyTypeNotMapped
    * id: String
    * isRepeatable: Boolean
    lastCompletedAt: OasAnyTypeNotMapped
    * name: String
    * progress: MilestoneProgress
    * status: MilestoneStatus
    * theme: MilestoneTheme
    * timesCompleted: BigDecimal
}

entity MiscDocumentRequestedUserAlert {
    * requestedDocumentType: DocumentType
    * type: String
    * userId: String
}

entity MissingBeneficiarySsnException {
    message: String
}

entity MissingFundingSourceException {
    message: String
}

entity MissingSsnBeneficiaryAlert {
    * beneficiary: Beneficiary
    * type: String
    * userId: String
}

entity MissingSsnBeneficiaryAlertItem {
    * beneficiary: Beneficiary
    * type: String
    * userId: String
}

entity Modal {
    * body: String
    campaignId: String
    * cta: List<Cta>
    logo: Image
    * title: String
    * type: ModalType
}

entity ModalType {
}

entity MonetaryAmount {
    * currency: String
    * value: BigDecimal
}

entity MonetaryIncentive {
    * amount: CurrencyAmount
    copyKey: String
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * recurring: Boolean
    * totalAmount: CurrencyAmount
    * type: String
    updatedAt: OasAnyTypeNotMapped
}

entity Mutation {
    * acceptDocument: AcceptDocumentResponse
    activateBankCard: ActivateBankCardPayload
    * addActionToMilestoneAchievementActionRule: AddActionToMilestoneAchievementActionRuleResult
    * addFavoritePartnerOffers: FavoritePartnerOfferGroup
    agreeToAcceptanceDocument: OasAnyTypeNotMapped
    * applyPromotion: ApplyPromotionResult
    assignLinkedSubaccount: LinkedSubaccount
    * authenticate: AuthenticateResult
    * authenticateForFeeNegotiation: AuthenticateForFeeNegotiationResult
    * authenticateForFeeNegotiationChallenge: AuthenticateNegotiationStatusResult
    * authenticateForFeeNegotiationChallengeMethod: AuthenticateNegotiationStatusResult
    * authenticateWithApple: AuthenticateWithAppleResult
    * blockDevice: BlockDeviceResult
    cancelCheckPayment: CancelCheckPaymentResult
    * cancelInvestment: CancelInvestmentResult
    * cancelInvestmentAccountClosureRequest: CancelInvestmentAccountClosureRequestResult
    cancelRecurringTransfer: CancelRecurringTransferResult
    cancelTransfer: CancelTransferPayload
    * changeOutsideContributionAmount: ChangeOutsideContributionAmountResult
    changePIN: OasAnyTypeNotMapped
    changePassword: OasAnyTypeNotMapped
    * closeBankAccount: CloseBankAccountResult
    * closeInvestmentAccount: CloseInvestmentAccountResult
    * closeUserAccount: CloseUserAccountResult
    completeCheckDeposit: CompleteCheckDepositPayload
    completeRegistration: User
    configureSplitDepositDirectDepositIntentSetting: ConfigureSplitDepositDirectDepositIntentSettingResult
    configureSplitDepositDirectDepositSetting: ConfigureSplitDepositDirectDepositSettingResult
    * connectACHAccount: ConnectAchAccountResult
    connectLadderCustomer: LadderLinkResponse
    * createAccountPointsRule: CreateAccountPointsRuleResult
    createAuthenticatedSupportTicket: SupportTicket
    createBankAccount: CreateBankAccountPayload
    * createBeneficiary: CreateBeneficiaryResult
    * createDocumentUpload: CreateDocumentUpload
    createExtensionTransaction: TransactionResult
    createIRAWithProfile: CreateInvestmentAccountResponse
    createInvestmentAccount: CreateInvestmentAccountResponse
    createJobAlert: JobAlert
    createLadderQuote: LadderResponse
    createLaterContribution: OasAnyTypeNotMapped
    * createMilestoneAccountLevelDefinition: CreateMilestoneAccountLevelDefinitionResult
    * createMilestoneAchievementActionRule: CreateMilestoneAchievementActionRuleResult
    * createOutsideContribution: CreateOutsideContributionResult
    * createOutsideContributionCheckoutCart: CreateOutsideContributionCheckoutCartResult
    createPlaidLinkedAccount: LinkedAccount
    * createProspectUser: CreateProspectUserResult
    createSupportTicketOrException: SupportTicketResponse
    createSupportTicketWithCustomFields: SupportTicketWithCustomFieldsResponse
    createUser: Session
    deactivateAccount: Account
    * deactivateBeneficiary: DeactivateBeneficiaryResult
    * deactivateTierSubscription: DeactivateTierSubscriptionResult
    deleteExpiredBankCardOrder: DeleteExpiredBankCardOrderResult
    * enterEvent: EventSubmission
    * enterSweepstakes: EnterSweepstakesResult
    feedEvent: ActionFeedEventResponse
    * generateLinkSession: LinkSessionResult
    * initiateEmailChallenge: InitiateEmailChallengeResult
    initiateLaterProgramAccountContribution: LaterProgramAccountContributionResult
    * initiateSMSChallenge: InitiateSmsChallengeResult
    initiateTransfer: InitiateTransferPayload
    laterCreateIndividualBeneficiary: LaterIndividualBeneficiaryResponse
    laterTotalLiquidation: OasAnyTypeNotMapped
    laterWithdrawal: OasAnyTypeNotMapped
    * legacyUploadDocument: LegacyUploadDocumentResult
    linkACHAccount: OasAnyTypeNotMapped
    * linkManualFundingSource: LinkManualFundingSourceResult
    lockBankCard: LockBankCardPayload
    * makeInvestment: MakeInvestmentPayload
    * openCoreInvestmentAccount: OpenCoreInvestmentAccountResult
    * openEarlyAccount: OpenEarlyAccountResult
    orderBankCard: BankCardOrder
    passwordResetRequest: OasAnyTypeNotMapped
    protectApplyLifeQuote: LifeQuoteResponse
    protectCreateLifeQuote: LifeQuoteResponse
    protectUpdateCoverage: UpdateCoverageResponse
    protectUpdateRecommendedLifeCoverage: UpdateRecommendedCoverageResponse
    protectUpdateResponses: ProtectHome
    redeemGiftcard: OasAnyTypeNotMapped
    * registerEmailAuthenticator: RegisterEmailAuthenticatorResult
    registerLinkSession: RegisterLinkSessionResult
    * registerPhoneAuthenticator: RegisterPhoneAuthenticatorResult
    * registerUser: RegisterUserResult
    * reinitiateChallenge: ReinitiateSmsChallengeResult
    reissueBankCard: ReissueBankCardResult
    * removeFavoritePartnerOffers: FavoritePartnerOfferGroup
    removeJobAlert: RemovedJobAlert
    * reopenUserAccount: ReopenUserAccountResult
    reportBankCardLostStolen: ReportBankCardLostStolenPayload
    requestAccountClosure: OasAnyTypeNotMapped
    * requestEarlyAccountClosure: List<RequestEarlyAccountClosureResult>
    * requestInvestmentAccountReopen: RequestInvestmentAccountReopenResult
    * requestSubscriptionMigrationWaiver: RequestSubscriptionMigrationWaiverResult
    resetPIN: OasAnyTypeNotMapped
    resetPassword: OasAnyTypeNotMapped
    roundUpProfile: RoundUpProfile
    scheduleRecurringTransfer: ScheduleRecurringTransferResult
    sendCheckPayment: SendCheckPaymentResult
    sessionRefresh: Session
    * setAuthenticationPIN: SetAuthenticationPinResult
    * setBeneficiarySsn: SetBeneficiarySsnResult
    * setDefaultAuthenticator: SetDefaultAuthenticatorResult
    * setFavoritePartnerOffers: FavoritePartnerOfferGroup
    setLinkingError: LinkedAccount
    * setManualRoundUps: List<RoundUp>
    * setPortfolio: User
    * splitDeposit: SplitDepositMutation
    * splitDepositSettings: SplitDepositSettingsMutation
    startAcornsPdfSwitch: Boolean
    startCheckDeposit: StartCheckDepositPayload
    * startOnlineSwitch: StartOnlineSwitchPayload
    startSubmittableSwitch: StartSubmittableSwitchPayload
    * submitBankFeeNegotiation: SubmitBankFeeNegotiationResult
    * submitRDVs: Boolean
    * submitSpendTransactionsDispute: SpendTransactionsDisputeResponse
    * subscribeToTier: SubscribeToTierResult
    * subscribeUserToTier: SubscribeUserToTierResult
    * suspendUserDeposits: OasAnyTypeNotMapped
    taxWithholdingAmounts: TaxWithholdingAmounts
    * unblockDevice: UnblockDeviceResult
    unlinkLinkedAccount: LinkedAccount
    unlockBankCard: UnlockBankCardPayload
    * unsubscribeUserFromTier: UnsubscribeUserFromTierResult
    * unsuspendUserDeposits: OasAnyTypeNotMapped
    * updateAccountPointsRule: UpdateAccountPointsRuleResult
    * updateAccountPortfolio: UpdateAccountPortfolioResponse
    updateAddress: Address
    updateBankCardPin: UpdateBankCardPinPayload
    * updateBeneficiaryInfo: UpdateBeneficiaryInfoResult
    updateContactInfo: User
    updateEmail: User
    updateEmployment: User
    updateExtensionTransaction: TransactionResult
    updateInvestorQuestions: User
    updateLadderQuote: LadderResponse
    updateLinkedAccount: LinkedAccount
    * updateMilestoneAccountLevelDefinition: UpdateMilestoneAccountLevelDefinitionResult
    updateNotification: OasAnyTypeNotMapped
    updatePersonalInfo: User
    updateProfile: Profile
    * updateRegistration: Result
    updateRoundUpAccount: RoundUpAccount
    updateSecurityQuestion: User
    updateSignature: Signature
    updateSuitability: SuitabilityUpdateSuitabilityResult
    updateUserInfo: UpdateUserInfoResult
    uploadCheck: UploadCheckPayload
    * uploadDocuments: List<FileOrException>
    * uploadUnsolicitedDocuments: List<FileOrException>
    * verifyDevice: VerifyDeviceResult
    * verifyLaterAccountOrError: LaterAccountInfoOrError
    * verifyPasswords: VerifyPasswordsResult
}

entity MutationAcceptDocumentArgs {
    * input: AcceptDocumentInput
}

entity MutationActivateBankCardArgs {
    * input: ActivateBankCardInput
}

entity MutationAddActionToMilestoneAchievementActionRuleArgs {
    * addActionToRuleInput: AddActionToMilestoneAchievementActionRuleInput
}

entity MutationAddFavoritePartnerOffersArgs {
    * input: FavoritePartnerOfferInput
}

entity MutationAgreeToAcceptanceDocumentArgs {
    * id: String
}

entity MutationApplyPromotionArgs {
    * input: ApplyPromotionInput
}

entity MutationAssignLinkedSubaccountArgs {
    * input: AssignLinkedSubaccountInput
    * linkedSubaccountId: String
}

entity MutationAuthenticateArgs {
    alternateAuthenticatorId: String
    challengeAnswerInput: ChallengeAnswerInput
    * input: AuthenticateInput
}

entity MutationAuthenticateForFeeNegotiationArgs {
    * input: AuthenticateForFeeNegotiationInput
}

entity MutationAuthenticateForFeeNegotiationChallengeArgs {
    * input: AuthenticateForFeeNegotiationChallengeInput
}

entity MutationAuthenticateForFeeNegotiationChallengeMethodArgs {
    * input: AuthenticateForFeeNegotiationChallengeMethodInput
}

entity MutationAuthenticateWithAppleArgs {
    * input: AuthenticateWithAppleInput
}

entity MutationBlockDeviceArgs {
    * input: BlockDeviceInput
}

entity MutationCancelCheckPaymentArgs {
    * id: String
}

entity MutationCancelInvestmentAccountClosureRequestArgs {
    * input: CancelInvestmentAccountClosureRequestInput
}

entity MutationCancelInvestmentArgs {
    * input: CancelInvestmentInput
}

entity MutationCancelRecurringTransferArgs {
    * id: String
}

entity MutationCancelTransferArgs {
    * accountId: String
    * id: String
}

entity MutationChangeOutsideContributionAmountArgs {
    * input: ChangeOutsideContributionAmountInput
}

entity MutationChangePasswordArgs {
    * newPassword: String
    * oldPassword: String
    * securityAnswer: SecurityAnswer
}

entity MutationChangePinArgs {
    * answer: String
    * newPIN: String
    * oldPIN: String
    * questionId: String
}

entity MutationCloseBankAccountArgs {
    * input: CloseBankAccountInput
}

entity MutationCloseInvestmentAccountArgs {
    * input: CloseInvestmentAccountInput
}

entity MutationCompleteCheckDepositArgs {
    * input: CompleteCheckDepositInput
}

entity MutationConfigureSplitDepositDirectDepositIntentSettingArgs {
    * input: ConfigureSplitDepositDirectDepositIntentSettingInput
}

entity MutationConfigureSplitDepositDirectDepositSettingArgs {
    * input: ConfigureSplitDepositDirectDepositSettingInput
}

entity MutationConnectAchAccountArgs {
    * input: ConnectAchAccountInput
}

entity MutationConnectLadderCustomerArgs {
    * quoteId: String
}

entity MutationCreateAccountPointsRuleArgs {
    * createAccountPointsRuleInput: CreateAccountPointsRuleInput
}

entity MutationCreateAuthenticatedSupportTicketArgs {
    * input: CreateSupportTicketInput
}

entity MutationCreateBankAccountArgs {
    * input: CreateBankAccountInput
}

entity MutationCreateBeneficiaryArgs {
    * input: BeneficiaryInput
}

entity MutationCreateDocumentUploadArgs {
    * input: CreateDocumentUploadInput
}

entity MutationCreateExtensionTransactionArgs {
    * campaignId: String
    salesAmount: BigDecimal
}

entity MutationCreateInvestmentAccountArgs {
    iraType: InvestmentAccountTypes
}

entity MutationCreateIraWithProfileArgs {
    iraType: InvestmentAccountTypes
    * profileAttributes: List<ProfileAttribute>
}

entity MutationCreateJobAlertArgs {
    * alertCriteria: JobAlertCriteriaInput
}

entity MutationCreateLadderQuoteArgs {
    * address: String
    * age: BigDecimal
    * city: String
    * email: String
    * firstName: String
    * lastName: String
    * phone: String
    * state: StateCode
    * zip: String
}

entity MutationCreateLaterContributionArgs {
    * accountId: String
    * amount: BigDecimal
    year: BigDecimal
}

entity MutationCreateMilestoneAccountLevelDefinitionArgs {
    * createLevelDefinitionInput: CreateMilestoneAccountLevelDefinitionInput
}

entity MutationCreateMilestoneAchievementActionRuleArgs {
    * createRuleInput: CreateMilestoneAchievementActionRuleInput
}

entity MutationCreateOutsideContributionArgs {
    * input: CreateOutsideContributionInput
}

entity MutationCreateOutsideContributionCheckoutCartArgs {
    * input: CreateOutsideContributionCheckoutCartInput
}

entity MutationCreatePlaidLinkedAccountArgs {
    * input: CreatePlaidLinkedAccountInput
    * publicToken: String
}

entity MutationCreateProspectUserArgs {
    * input: CreateProspectUserInput
}

entity MutationCreateRolloverArgs {
    * accountBalance: BigDecimal
    custodianAddress: CustodianAddressInput
    custodianId: String
    * custodianName: String
    custodianPhone: String
}

entity MutationCreateSessionArgs {
    captchaToken: String
    * email: String
    longSession: Boolean
    * password: String
}

entity MutationCreateSupportTicketArgs {
    * input: CreateSupportTicketInput
}

entity MutationCreateSupportTicketOrExceptionArgs {
    * input: CreateSupportTicketInput
}

entity MutationCreateSupportTicketWithCustomFieldsArgs {
    * input: CreateCustomSupportTicketInput
}

entity MutationCreateTransferArgs {
    * accountBalance: BigDecimal
    custodianAddress: CustodianAddressInput
    custodianId: String
    * custodianName: String
    custodianPhone: String
}

entity MutationCreateUserArgs {
    * input: CreateUserInput
}

entity MutationDeactivateAccountArgs {
    * accountId: String
}

entity MutationDeactivateBeneficiaryArgs {
    * id: String
}

entity MutationDeactivateTierSubscriptionArgs {
    * input: DeactivateTierSubscriptionInput
}

entity MutationEnterEventArgs {
    * input: EnterEventInput
}

entity MutationEnterSweepstakesArgs {
    * input: EnterSweepstakesInput
}

entity MutationFeedEventArgs {
    * feedEvent: ActionFeedEvent
}

entity MutationGenerateLinkSessionArgs {
    * input: GenerateLinkSessionInput
    userId: String
}

entity MutationInitiateEmailChallengeArgs {
    * input: InitiateEmailChallengeInput
}

entity MutationInitiateLaterProgramAccountContributionArgs {
    * input: LaterProgramAccountContributionInput
}

entity MutationInitiateSmsChallengeArgs {
    * input: InitiateSmsChallengeInput
}

entity MutationInitiateTransferArgs {
    * input: InitiateTransferInput
}

entity MutationLaterCreateIndividualBeneficiaryArgs {
    * accountId: String
    addressLine1: String
    addressLine2: String
    * birthDate: OasAnyTypeNotMapped
    city: String
    country: String
    * firstName: String
    * lastName: String
    percentageShare: BigDecimal
    relationship: String
    ssn: String
    state: String
    zip: String
}

entity MutationLaterTotalLiquidationArgs {
    input: LaterTotalLiquidationInput
    * investmentAccountId: String
}

entity MutationLaterWithdrawalArgs {
    * amount: BigDecimal
    earlyDistributionTaxExceptionReason: String
    * federalTaxes: BigDecimal
    * investmentAccountId: String
    reason: LaterWithdrawalReason
    * stateTaxes: BigDecimal
    * taxYear: BigDecimal
    withdrawalType: LaterWithdrawalType
}

entity MutationLegacyUploadDocumentArgs {
    * input: LegacyUploadDocumentInput
}

entity MutationLinkAchAccountArgs {
    * account: String
    * routing: String
}

entity MutationLinkManualFundingSourceArgs {
    * input: LinkManualFundingSourceInput
}

entity MutationLockBankCardArgs {
    * input: LockBankCardInput
}

entity MutationMakeInvestmentArgs {
    * input: MakeInvestmentInput
}

entity MutationOpenCoreInvestmentAccountArgs {
    * input: OpenCoreInvestmentAccountInput
}

entity MutationOpenEarlyAccountArgs {
    * input: OpenEarlyAccountInput
}

entity MutationOrderBankCardArgs {
    * input: OrderBankCardInput
}

entity MutationPasswordResetRequestArgs {
    * input: PasswordResetRequestInput
}

entity MutationProtectApplyLifeQuoteArgs {
    * quoteInput: LifeQuoteApplyInput
}

entity MutationProtectCreateLifeQuoteArgs {
    * input: LifeQuoteInput
}

entity MutationProtectUpdateCoverageArgs {
    * coverageResponse: CoverageResponse
}

entity MutationProtectUpdateRecommendedLifeCoverageArgs {
    * calculatorInput: LifeCalculatorInput
}

entity MutationProtectUpdateResponsesArgs {
    * questionResponses: List<QuestionResponse>
}

entity MutationRedeemGiftcardArgs {
    * pin: String
}

entity MutationRegisterEmailAuthenticatorArgs {
    * challengeAnswerInput: ChallengeAnswerInput
    * input: RegisterEmailAuthenticatorInput
}

entity MutationRegisterLinkSessionArgs {
    * input: LinkSessionInput
}

entity MutationRegisterPhoneAuthenticatorArgs {
    * challengeAnswerInput: ChallengeAnswerInput
    * input: RegisterPhoneAuthenticatorInput
}

entity MutationRegisterUserArgs {
    * input: RegisterUserInput
}

entity MutationReinitiateChallengeArgs {
    * input: ReinitiateSmsChallengeInput
}

entity MutationReissueBankCardArgs {
    * input: ReissueBankCardInput
}

entity MutationRemoveFavoritePartnerOffersArgs {
    * input: FavoritePartnerOfferInput
}

entity MutationRemoveJobAlertArgs {
    * id: String
}

entity MutationReportBankCardLostStolenArgs {
    * input: ReportBankCardLostStolenInput
}

entity MutationRequestAccountClosureArgs {
    * input: RequestAccountClosureInput
}

entity MutationRequestEarlyAccountClosureArgs {
    * input: RequestEarlyAccountClosureInput
}

entity MutationRequestInvestmentAccountReopenArgs {
    * input: RequestInvestmentAccountReopenInput
}

entity MutationRequestSubscriptionMigrationWaiverArgs {
    * input: RequestSubscriptionMigrationWaiverInput
}

entity MutationResetPasswordArgs {
    * email: String
}

entity MutationResetPinArgs {
    * email: String
}

entity MutationRoundUpProfileArgs {
    * input: RoundUpProfileInput
}

entity MutationScheduleRecurringTransferArgs {
    * input: ScheduleRecurringTransferInput
}

entity MutationSendCheckPaymentArgs {
    * input: SendCheckPaymentInput
}

entity MutationSessionRefreshArgs {
    longSession: Boolean
    * pin: String
}

entity MutationSetAuthenticationPinArgs {
    * input: SetAuthenticationPinInput
}

entity MutationSetBeneficiarySsnArgs {
    * id: String
    * ssn: String
}

entity MutationSetDefaultAuthenticatorArgs {
    * input: SetDefaultAuthenticatorInput
}

entity MutationSetFavoritePartnerOffersArgs {
    * input: FavoritePartnerOfferInput
}

entity MutationSetLinkingErrorArgs {
    * linkedAccountId: String
    * linkingErrorCode: SetLinkingErrorInput
}

entity MutationSetManualRoundUpsArgs {
    * roundUpIds: List<String>
}

entity MutationSetPortfolioArgs {
    * input: SetPortfolioInput
}

entity MutationSplitDepositArgs {
    * id: String
}

entity MutationSplitDepositSettingsArgs {
    employerHidden: Boolean
    * id: String
}

entity MutationStartAcornsPdfSwitchArgs {
    * input: StartAcornsPdfSwitchInput
}

entity MutationStartCheckDepositArgs {
    * input: StartCheckDepositInput
}

entity MutationStartOnlineSwitchArgs {
    * input: StartOnlineSwitchInput
}

entity MutationStartSubmittableSwitchArgs {
    * input: StartSubmittableSwitchInput
}

entity MutationStopRecurringInvestmentArgs {
    investmentAccountId: String
}

entity MutationSubmitBankFeeNegotiationArgs {
    * input: SubmitBankFeeNegotiationInput
}

entity MutationSubmitRdVsArgs {
    * deposits: List<BigDecimal>
}

entity MutationSubmitSignatureArgs {
    * signature: String
    statement: String
}

entity MutationSubmitSpendTransactionsDisputeArgs {
    * input: SubmitSpendTransactionsDisputeInput
}

entity MutationSubscribeToTierArgs {
    * input: SubscribeToTierInput
}

entity MutationSubscribeUserToTierArgs {
    * input: SubscribeUserToTierInput
}

entity MutationSubscribeUserToTierByProductKeyArgs {
    input: SubscribeUserToTierByProductKeyInput
}

entity MutationSuspendDepositsArgs {
    * suspended: Boolean
}

entity MutationTaxWithholdingAmountsArgs {
    * investmentId: String
    * totalSharesAmount: CurrencyAmountInput
}

entity MutationUnblockDeviceArgs {
    * input: UnblockDeviceInput
}

entity MutationUnlinkLinkedAccountArgs {
    * linkedAccountId: String
}

entity MutationUnsubscribeUserFromTierArgs {
    input: UnsubscribeUserFromTierInput
}

entity MutationUpdateAccountPointsRuleArgs {
    * updateAccountPointsRuleInput: UpdateAccountPointsRuleInput
}

entity MutationUpdateAccountPortfolioArgs {
    * input: UpdateAccountPortfolioInput
}

entity MutationUpdateAddressArgs {
    * addressType: AddressType
    * input: AddressInput
    ownerId: String
}

entity MutationUpdateBankCardPinArgs {
    * input: UpdateBankCardPinInput
}

entity MutationUpdateBeneficiaryInfoArgs {
    * id: String
    * input: BeneficiaryInfoInput
}

entity MutationUpdateContactInfoArgs {
    * input: ContactInfoInput
}

entity MutationUpdateEmailArgs {
    * email: String
}

entity MutationUpdateEmploymentArgs {
    * input: EmploymentInput
}

entity MutationUpdateExtensionTransactionArgs {
    * id: String
    * status: String
}

entity MutationUpdateInvestorQuestionsArgs {
    * input: InvestorQuestionsInput
}

entity MutationUpdateLadderQuoteArgs {
    * coverage: BigDecimal
    * quoteId: String
}

entity MutationUpdateLinkedAccountArgs {
    * input: UpdateLinkedAccountInput
    * linkedAccountId: String
}

entity MutationUpdateMilestoneAccountLevelDefinitionArgs {
    * updateLevelDefinitionInput: UpdateMilestoneAccountLevelDefinitionInput
}

entity MutationUpdateNotificationArgs {
    * active: Boolean
    category: String
    * channel: String
    subcategory: String
    type: String
    uuid: String
}

entity MutationUpdatePersonalInfoArgs {
    * input: PersonalInfoInput
}

entity MutationUpdateProfileArgs {
    * input: ProfileInput
}

entity MutationUpdateRecurringInvestmentArgs {
    * input: RecurringInvestmentInput
}

entity MutationUpdateRegistrationArgs {
    * input: RegistrationInput
}

entity MutationUpdateRoundUpAccountArgs {
    * enabled: Boolean
    * linkedSubaccountId: String
}

entity MutationUpdateSecurityQuestionArgs {
    * input: SecurityQuestionInput
}

entity MutationUpdateSignatureArgs {
    * signatureType: SignatureType
    * svgFile: String
}

entity MutationUpdateSuitabilityArgs {
    * suitabilityInput: List<SuitabilitySuitabilityInput>
}

entity MutationUpdateUserInfoArgs {
    * input: PersonalInfoInput
}

entity MutationUploadCheckArgs {
    * input: UploadCheckInput
}

entity MutationUploadDocumentsArgs {
    * input: UploadDocumentsInput
}

entity MutationUploadUnsolicitedDocumentsArgs {
    * input: UploadUnsolicitedDocumentsInput
}

entity MutationVerifyDeviceArgs {
    challengeAnswerInput: ChallengeAnswerInput
    * input: VerifyDeviceInput
}

entity MutationVerifyLaterAccountOrErrorArgs {
    * investmentAccountId: String
}

entity MutationVerifyPasswordsArgs {
    * input: VerifyPasswordsInput
}

entity NegotiationServiceConnectionFailure {
    * message: String
}

entity NextBillingDate {
    next_billing_date: String
}

entity NextTransferDateResult {
    nextTransferDate: OasAnyTypeNotMapped
    * pathExceptions: List<RecurringTransferPathException>
}

entity NoBeneficiaryFoundException {
    message: String
}

entity NoFundingSourceUserAlert {
    * type: String
    * userId: String
}

entity NonBasicAccountOpenException {
    errorMessage: String
}

entity Notification {
    * active: Boolean
    category: String
    subcategory: String
    type: String
}

entity Notifications {
    emails: List<Notification>
    pushes: List<Notification>
}

entity Occupation {
    * id: String
    * name: String
}

entity Offer {
    availableIn: List<String>
    * availableTo: OfferAvailability
    * createdAt: OasAnyTypeNotMapped
    expiresAfter: OfferExpiration
    expiresAt: OasAnyTypeNotMapped
    * id: String
    * offering: Offering
    * price: OfferPrice
    * termsUrl: OasAnyTypeNotMapped
    * type: OfferType
    updatedAt: OasAnyTypeNotMapped
}

entity OfferAvailability {
}

entity OfferExpiration {
    * period: String
    * value: BigDecimal
}

entity OfferGroupsType {
}

entity OfferLocation {
    city: String
    state: String
}

entity OfferLocationInput {
    city: String
    state: String
}

entity OfferPrice {
    * amount: CurrencyAmount
    * type: OfferPriceType
}

entity OfferPriceInput {
    * amount: CurrencyAmountInput
    * type: OfferPriceType
}

entity OfferPriceType {
}

entity OfferType {
}

entity Offering {
    * active: Boolean
    * description: String
    * id: String
    * key: ProductKey
    * name: String
    products: List<Product>
    * tierGroupId: String
    * tierPrice: TierPrice
    * createdAt: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity OnboardingStepType {
}

entity OnboardingTipItem {
    * body: String
    * headline: String
    * id: String
    * image: Image
    * title: String
    * type: OnboardingTipType
}

entity OnboardingTipType {
}

entity OnboardingTips {
    * items: List<OnboardingTipItem>
}

entity OnlineSwitch {
    * source: SwitchSource
    * type: SwitchType
    * url: String
    vendorTargetId: String
}

entity OpenAccountsException {
    openAccountTypes: List<String>
}

entity OpenCoreInvestmentAccountInput {
    * portfolioId: String
}

entity OpenCoreInvestmentAccountResult {
    message: String
    beneficiary: Beneficiary
    beneficiaryId: String
    * cashBalance: MonetaryAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    currentBalance: MonetaryAmount
    * currentBalanceWithPending: MonetaryAmount
    * hasInvested: Boolean
    * id: String
    * investmentAccountType: InvestmentAccountType
    * name: String
    * netInvestments: MonetaryAmount
    * pendingBalance: MonetaryAmount
    * pendingWithdrawals: List<Withdrawal>
    performance: Performance
    portfolio: Portfolio
    * product: InvestmentProduct
    recommendedPortfolio: Portfolio
    recurringInvestmentSettings: RecurringInvestmentSettings
    * requirements: AccountRequirements
    * status: InvestmentAccountStatus
    * summary: InvestmentAccountSummary
    * totalBonds: MonetaryAmount
    * totalEquities: MonetaryAmount
    transferability: InvestmentAccountTransferability
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    yearToDateReturn: MarketReturn
}

entity OpenEarlyAccountInput {
    * beneficiaryId: String
    investmentAccountName: String
    stateCode: String
    * terminationAge: BigDecimal
}

entity OpenEarlyAccountResult {
    message: String
    state: String
    beneficiary: Beneficiary
    beneficiaryId: String
    * cashBalance: MonetaryAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    currentBalance: MonetaryAmount
    * currentBalanceWithPending: MonetaryAmount
    * hasInvested: Boolean
    * id: String
    * investmentAccountType: InvestmentAccountType
    * name: String
    * netInvestments: MonetaryAmount
    * pendingBalance: MonetaryAmount
    * pendingWithdrawals: List<Withdrawal>
    performance: Performance
    portfolio: Portfolio
    * product: InvestmentProduct
    recommendedPortfolio: Portfolio
    recurringInvestmentSettings: RecurringInvestmentSettings
    * requirements: AccountRequirements
    * status: InvestmentAccountStatus
    * summary: InvestmentAccountSummary
    * totalBonds: MonetaryAmount
    * totalEquities: MonetaryAmount
    transferability: InvestmentAccountTransferability
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    yearToDateReturn: MarketReturn
}

entity OperationStage {
}

entity Order {
}

entity OrderBankCardInput {
    * isDocumentsAccepted: Boolean
    isReopen: Boolean
    paymentProcessor: BankCardPaymentProcessor
    prefundTransfer: BankCardPrefundTransfer
}

entity OutsideContribution {
    * accountId: String
    * checkoutCart: OutsideContributionCheckoutCart
    * createdAt: OasAnyTypeNotMapped
    failureReason: String
    * id: String
    investmentId: String
    note: String
    noteAuthor: String
    * paymentMethodId: String
    * state: ContributionState
    transferRequestId: String
    * updatedAt: OasAnyTypeNotMapped
}

entity OutsideContributionCheckoutCart {
    * code: OutsideContributionCode
    * createdAt: OasAnyTypeNotMapped
    * feeAmount: String
    * id: String
    * investmentAmount: String
    * paymentIntentId: String
    * status: CheckoutCartStatus
    * updatedAt: OasAnyTypeNotMapped
}

entity OutsideContributionCode {
    * code: String
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * investmentAccountId: String
    * recipientFirstName: String
    * recipientId: String
    * signupBonusUrl: String
    * updatedAt: OasAnyTypeNotMapped
    * url: String
    * userId: String
}

entity OutsideContributionProspect {
    * email: String
    * id: String
}

entity Owner {
    colorBackgroundLogoImageUrl: OasAnyTypeNotMapped
    description: String
    greyLogoImageUrl: OasAnyTypeNotMapped
    * id: String
    imageUrl: OasAnyTypeNotMapped
    monochromeImageUrl: OasAnyTypeNotMapped
    name: String
    slug: String
    twitterHandle: String
}

entity PackageStatus {
}

entity PageInfo {
    * hasNextPage: Boolean
    * hasPreviousPage: Boolean
    * limit: BigDecimal
}

entity PageInput {
    after: String
    first: BigDecimal
}

entity ParameterizedPdfInput {
    * bankAccountId: String
    * dateSigned: String
    distributionAmount: BigDecimal
    * distributionType: DirectDepositDistribution
    * employerName: String
    sessionId: String
    * userId: String
}

entity Partner {
    accountToken: String
    authorization: PartnerAuthorizationData
    clientCredentialsToken: String
    clientId: String
    existingAccountRedirectUri: String
    externalId: String
    * id: String
    logoTypeUrl: String
    * name: String
    plaidInstitutionId: String
    routingNumbers: List<PartnerRoutingNumber>
    * user: PartnerUserPayload
    * website: String
}

entity PartnerAuthorizationData {
    accessToken: String
    expiresAt: OasAnyTypeNotMapped
    * provider: String
    refreshToken: String
    * uid: String
}

entity PartnerChoices {
    * body: String
    * cta: Cta
    * icon: Image
    * title: String
}

entity PartnerOfferGroup {
    body: String
    * carouselType: CarouselType
    * id: String
    * offers: List<PartnerOfferGroupItem>
    title: String
}

entity PartnerOfferGroupFilterInput {
    location: OfferLocationInput
}

entity PartnerOfferGroupItem {
    affiliateCategoryList: List<String>
    affiliateCategoryType: String
    * backgroundColorHex: String
    * backgroundImageUrl: OasAnyTypeNotMapped
    badgeCategory: BadgeCategory
    * campaignDescription: String
    * campaignId: String
    * campaignOfferId: String
    * colorBackgroundLogoImageUrl: OasAnyTypeNotMapped
    * ctaDetails: EarnOfferCtaDetails
    dealType: DealType
    desktopBackgroundImageUrl: OasAnyTypeNotMapped
    * details: List<String>
    * devicePlatforms: List<String>
    displayBody: String
    displayEndDate: String
    * displayName: String
    displayStartDate: String
    displaySubtitle: String
    * displayTitle: String
    * exclusions: List<String>
    * favoriteRank: BigDecimal
    * featuredCategoryOffer: Boolean
    * featuredCategoryOfferRank: BigDecimal
    * incentiveSummary: String
    * isFavorite: Boolean
    keyphraseCategoryNames: List<String>
    merchantId: String
    * ownerDescription: String
    * ownerId: String
    * promoted: Boolean
    * promotionRank: BigDecimal
    * slug: String
    * termsAndConditionsUrl: String
    visibilityEndTime: String
    visibilityStartTime: String
    * webviewEnabled: Boolean
    * backgroundImage: Image
    body: String
    * desktopBackgroundImage: Image
    * id: String
    logo: Image
    * partnerUrl: OasAnyTypeNotMapped
    subtitle: String
    * title: String
    * companyLogo: Image
    * companyName: String
    industryName: String
    * jobName: String
    * location: OfferLocation
    salary: JobOfferSalary
    * tags: List<String>
    * url: OasAnyTypeNotMapped
    * searchFilters: List<JobSearchFilter>
}

entity PartnerOfferGroupsTypeInput {
    * type: OfferGroupsType
}

entity PartnerRoutingNumber {
    * routingNumber: String
}

entity PartnerUserPayload {
    address1: String
    address2: String
    city: String
    dob: String
    email: String
    firstName: String
    lastName: String
    phoneNumber: String
    ssn: String
    state: String
    usCitizen: Boolean
    zip: String
}

entity PasswordResetRequestInput {
    * email: OasAnyTypeNotMapped
}

entity PastAnnotatedItem {
    * id: String
    note: String
    noteAuthor: String
}

entity PastCoreCombinedItem {
    * id: String
    * isCombinedInvestment: Boolean
}

entity PastCoreItem {
    amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity PastCoreSummary {
    * dividends: CurrencyAmount
    * foundMoneyRewards: CurrencyAmount
    * investments: CurrencyAmount
    * netReturns: CurrencyAmount
    * referralRewards: CurrencyAmount
    * withdrawals: CurrencyAmount
}

entity PastCoreTradedItem {
    * id: String
    tradeConfirmationUrl: OasAnyTypeNotMapped
}

entity PastEarlySummary {
    * contributions: CurrencyAmount
    * dividends: CurrencyAmount
    * netReturns: CurrencyAmount
    * withdrawals: CurrencyAmount
}

entity PastItem {
    amount: CurrencyAmount
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity PastItemConnection {
    * edges: List<PastItemEdge>
    * pageInfo: PageInfo
}

entity PastItemEdge {
    * cursor: String
    node: PastItem
}

entity PastItemStatus {
}

entity PastLaterSummary {
    * contributions: CurrencyAmount
    * currentYearContributions: CurrencyAmount
    * dividends: CurrencyAmount
    * netReturns: CurrencyAmount
    * priorYearContributions: CurrencyAmount
    * withdrawals: CurrencyAmount
}

entity PastSpendItem {
    amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity PastSpendSummary {
    availableBalance: CurrencyAmount
    debitsLast30Days: CurrencyAmount
    depositsLast30Days: CurrencyAmount
    instantRoundUps: CurrencyAmount
}

entity PdfDownloadUrlInput {
    * bankAccountId: String
    * employerName: String
    sessionId: String
    * userId: String
}

entity PdfDownloadUrlPayload {
    * url: String
}

entity PdfFormLinks {
    * formUrls: List<String>
    * id: String
}

entity Performance {
    accountValues: List<AccountValue>
    marketChange: BigDecimal
    marketChangePercent: BigDecimal
    marketChangePercentWithoutFees: BigDecimal
    marketChangeWithoutFees: BigDecimal
    previousCloseAmount: BigDecimal
}

entity PersonalInfoInput {
    address1: String
    address2: String
    city: String
    dob: String
    email: String
    employer: String
    firstName: String
    lastName: String
    occupation: String
    phoneNumber: String
    ssn: String
    state: String
    usCitizen: Boolean
    zip: String
}

entity Phone {
    * countryCode: String
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * phoneNumber: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    * verified: Boolean
}

entity PhoneAuthenticator {
    * createdAt: OasAnyTypeNotMapped
    * deviceId: String
    * id: String
    lastUsedAt: OasAnyTypeNotMapped
    * name: String
    * phoneNumber: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity PhoneNumberOptedOutException {
    * message: String
}

entity PoBoxAddressError {
    * message: String
}

entity Portfolio {
    * description: String
    etfs: List<Etf>
    * id: String
    * name: String
    * nameKey: String
    portfolioSecurities: List<PortfolioSecurity>
    position: BigDecimal
    projection: PortfolioProjection
    * riskLevel: PortfolioRiskLevel
    * theme: PortfolioTheme
}

entity PortfolioHolding {
    * amount: BigDecimal
    * id: String
    * name: String
    * percentage: BigDecimal
    * shares: BigDecimal
    * symbol: String
}

entity PortfolioNotFoundException {
    message: String
}

entity PortfolioProjection {
    * averageGrowthRate: BigDecimal
    * highestGrowthRate: BigDecimal
    * lowestGrowthRate: BigDecimal
}

entity PortfolioRiskLevel {
}

entity PortfolioSecurity {
    * currentAllocationPercentage: BigDecimal
    * id: String
    * marketValue: MonetaryAmount
    * name: String
    * shares: BigDecimal
    * symbol: String
    targetAllocationPercentage: BigDecimal
    * todaysReturn: MarketReturn
    * totalReturn: MarketReturn
}

entity PortfolioTheme {
}

entity PortfolioUpdateFailedException {
    message: String
}

entity PositiveCurrencyAmountInput {
    * currency: String
    * value: OasAnyTypeNotMapped
}

entity Premium {
    * amount: BigDecimal
    * term: BigDecimal
}

entity PremiumsInput {
    coverageAmount: BigDecimal
    * providerName: String
}

entity PremiumsResult {
    * quoteData: QuoteResult
    * quoteStatus: QuoteStatus
}

entity PresentableWithdrawalStatus {
}

entity PreviousFundingSourcePending {
    message: String
    userId: String
}

entity Product {
    * active: Boolean
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * key: ProductKey
    * name: String
    * updatedAt: OasAnyTypeNotMapped
}

entity ProductKey {
}

entity ProductSetupTipType {
}

entity Profile {
    annualIncome: BigDecimal
    combinedAnnualIncome: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    employees: Employees
    employmentStatus: EmploymentStatus
    filingType: FilingType
    firstName: String
    fundsAvailability: FundsAvailability
    lastName: String
    maritalStatus: MaritalStatus
    retirementPlanAccess: RetirementPlanAccess
    selfEmployedIncome: BigDecimal
    * signatures: List<Signature>
    ssnLastFour: String
    transfersPaused: Boolean
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
}

entity ProfileAttribute {
    * key: String
    * value: OasAnyTypeNotMapped
}

entity ProfileInput {
    annualIncome: BigDecimal
    combinedAnnualIncome: BigDecimal
    employees: Employees
    employmentStatus: EmploymentStatus
    filingType: FilingType
    fundsAvailability: FundsAvailability
    maritalStatus: MaritalStatus
    retirementPlanAccess: RetirementPlanAccess
    selfEmployedIncome: BigDecimal
    transfersPaused: Boolean
}

entity PromoOffer {
    * backgroundImage: Image
    body: String
    * desktopBackgroundImage: Image
    * id: String
    logo: Image
    * partnerUrl: OasAnyTypeNotMapped
    subtitle: String
    * title: String
}

entity Promotion {
    * active: Boolean
    * createdAt: OasAnyTypeNotMapped
    * description: String
    duration: PromotionDuration
    expiresAt: OasAnyTypeNotMapped
    * id: String
    incentives: List<Incentive>
    * name: String
    * offering: Offering
    * presentInContexts: List<String>
    * termsUrl: OasAnyTypeNotMapped
    updatedAt: OasAnyTypeNotMapped
}

entity PromotionConsumedError {
    * message: String
}

entity PromotionDuration {
    * period: String
    * periodCount: BigDecimal
}

entity PromotionExpiredError {
    * expiredAt: OasAnyTypeNotMapped
    * message: String
}

entity PromotionFilterInput {
    presentInContexts: PromotionPresentInContextsFilterInput
}

entity PromotionNotFoundError {
    * message: String
}

entity PromotionPresentInContextsFilterInput {
    in: List<String>
}

entity Prospect {
    * email: String
    * id: String
}

entity ProspectType {
}

entity ProtectContext {
    * style: String
    * widgetType: WidgetReferenceType
}

entity ProtectHome {
    * cta: Cta
    * id: String
    * title: String
    * widgets: List<ProtectHomeWidget>
}

entity ProtectHomeWidget {
    * articles: List<Article>
    * title: String
    * widgets: List<InsuranceSection>
    * icons: List<HomeIcon>
    * body: String
    * cta: Cta
    * image: Image
    * insuranceType: String
    * recommendType: String
}

entity ProtectLander {
    * body: String
    * cta: Cta
    * id: String
    image: Image
    lastCheckinAt: OasAnyTypeNotMapped
    logo: Image
    * tipTitle: String
    * title: String
    * tutorialTitle: String
}

entity ProtectLearningCenter {
    * articles: List<Article>
    * body: String
    * eyebrow: String
    * id: String
    * image: Image
    * title: String
}

entity Provider {
    cta: Cta
    * id: String
    * image: Image
    * isSelected: Boolean
    * title: String
}

entity ProviderSearch {
    * body: String
    * cta: Cta
    * insuranceType: InsuranceType
    * providers: List<Provider>
    searchImage: Image
    * searchTitle: String
    * subtitle: String
    * title: String
    * unknownProvider: UnknownProvider
}

entity Query {
    acceptanceDocument: AcceptanceDocument
    acceptanceDocuments: List<AcceptanceDocument>
    accountPointsRuleByMilestoneId: AccountPointsRule
    accountPointsRules: List<AccountPointsRule>
    accountStrength: AccountStrengthResult
    * accounts: List<Account>
    actionFeed: List<ActionCard>
    * activeEarnOffers: EarnOfferQueryPage
    activitySummary: ActivitySummaryResponse
    addressDeliverability: AddressDeliverabilityResult
    * addresses: List<Address>
    advocate: Advocate
    alertHubBeneficiaryAlerts: List<AlertHubBeneficiaryAlert>
    allAcceptanceDocuments: List<AcceptanceDocument>
    allBankAccounts: List<BankAccount>
    allBankCards: List<BankCard>
    allBankStatements: List<BankStatement>
    allBankTransactions: BankTransactionConnection
    allCardTrackingStatuses: List<CardDeliveryStatus>
    allCheckPayments: AllCheckPaymentsResult
    allCloseAccountReasons: List<CloseAccountReason>
    allContactCategories: List<ContactCategory>
    allPastCoreItemChildren: List<PastItem>
    allPastCoreItems: PastItemConnection
    allPastEarlyItems: PastItemConnection
    allPastLaterItems: PastItemConnection
    allPastSpendItems: PastItemConnection
    allReturnedCheckDeposits: List<ReturnedCheckDeposit>
    allSecurityQuestions: List<SecurityQuestion>
    allSuitabilityQuestions: List<SuitabilityQuestion>
    allSupportArticles: List<SupportArticle>
    allSupportCategories: List<SupportCategory>
    allSupportSections: List<SupportSection>
    allSupportTicketForms: List<SupportTicketForm>
    allTransferableFrom: List<TransferableFrom>
    allTransferableTo: List<TransferableTo>
    authAlerts: List<AuthAlert>
    authProfile: AuthProfile
    authenticateForFeeNegotiationStatusByLinkedAccountId: AuthenticateForFeeNegotiationStatus
    * bankAccountClosureReasons: List<BankAccountClosureReason>
    bankCardOrder: BankCardOrder
    bankCardReissue: BankCardReissue
    bankFeeNegotiationAlerts: List<BankFeeNegotiationAlert>
    bankFeeSummaryByUserId: BankFeeSummary
    bankFeesByUserId: List<BankFee>
    bankMetadata: BankMetadata
    bankTransaction: BankTransaction
    beneficiaries: List<Beneficiary>
    beneficiary: Beneficiary
    beneficiaryAlerts: List<Alert>
    billingCycle: BillingCycle
    billingCycles: List<BillingCycle>
    * closureReasonsByInvestmentAccountType: List<InvestmentAccountClosureReason>
    contactFormAlert: ContactFormAlert
    device: Device
    devicesByUserId: List<Device>
    * directDepositState: DirectDepositStatePayload
    documentRequest: DocumentRequest
    documentRequests: DocumentRequestsConnection
    * earlyAccountClosureReasons: List<InvestmentAccountClosureReason>
    * earlyAccountStateRegulation: EarlyAccountStateRegulationResult
    earlyAccountTransferInfo: EarlyAccountTransferInfo
    earnCTADataByUserId: List<EarnCtaRecord>
    earnOfferByCampaignOfferId: EarnOffer
    eligibility: Eligibility
    estimatedCheckPaymentDates: EstimatedCheckPaymentDates
    estimatedTransferDates: EstimatedTransferDatesPayload
    etf: Etf
    evaluateCheckDeposit: EvaluateCheckDepositPayload
    extensionCampaignStore: ExtensionCampaignStore
    extensionCampaignStores: List<ExtensionCampaignStore>
    extensionOwners: List<ExtensionOwner>
    * extensionRewardsSummary: ExtensionRewardsSummary
    extensionTransactions: List<ExtensionTransaction>
    * favoriteEarnOffers: FavoritePartnerOfferGroup
    fee: Fee
    fees: List<Fee>
    financialInstitution: FinancialInstitution
    * financialInstitutions: FinancialInstitutionTypePagination
    finishSetup: FinishSetup
    foundMoneyCampaigns: List<FoundMoneyCampaign>
    foundMoneyOffer: FoundMoneyOffer
    foundMoneyOfferCategories: List<FoundMoneyOfferCategory>
    foundMoneyOfferGroups: List<FoundMoneyOfferGroup>
    foundMoneyRewards: List<FoundMoneyReward>
    foundMoneySummary: FoundMoneySummary
    friend: Friend
    fundingSourceAccounts: List<FundingSourceAccount>
    fundingSourceInfo: FundingSourceInfo
    generateUpdatedPdf: GenerateUpdatedPdfPayload
    helpFormContent: HelpFormContent
    instantSearchSupportArticles: List<SearchSupportArticleResult>
    investmentAccount: InvestmentAccount
    investmentAccountByBeneficiaryId: InvestmentAccount
    * investmentAccountsByUserId: List<InvestmentAccount>
    investments: List<Investment>
    invitationForUser: Referral
    jobAlerts: List<JobAlert>
    jobEducationContent: JobsEducation
    jobSearch: List<JobsOffer>
    jobSearchPage: JobSearchPage
    jobSearchV2: JobsOfferConnection
    laterAccounts: List<LaterAccount>
    laterAlerts: List<Alert>
    laterBeneficiaries: List<LaterIndividualBeneficiary>
    laterContributionHistory: List<ContributionHistoryItem>
    laterHistory: List<LaterHistoryItem>
    laterPortfolioPerformance: LaterPortfolioPerformance
    laterUserContributionAbility: ContributionAbilityByYear
    linkedAccount: LinkedAccount
    linkedAccountAlerts: List<LinkedAccountAlertsResponse>
    * linkedAccountWebhooks: Webhooks
    * linkedAccounts: List<LinkedAccount>
    linkedSubaccount: LinkedSubaccount
    * linkedSubaccounts: List<LinkedSubaccount>
    market: Market
    milestone: Milestone
    milestoneAccountLevelDefinitions: List<MilestoneAccountLevelDefinition>
    milestoneAchievementActionRule: MilestoneAchievementActionRule
    * milestoneAchievementActionRules: List<MilestoneAchievementActionRule>
    milestoneChallenge: MilestoneChallenge
    milestoneHub: MilestoneHub
    milestoneHubEligible: Eligibility
    milestonesByTheme: MilestoneThemeGroup
    nextBillingDate: NextBillingDate
    nextTransferDate: NextTransferDateResult
    notifications: Notifications
    occupations: List<Occupation>
    offer: Offer
    onboardingTips: OnboardingTips
    outsideContributionCode: OutsideContributionCode
    outsideContributionCodeByCode: OutsideContributionCode
    outsideContributionCodeByInvestmentAccountId: OutsideContributionCode
    parameterizedPdf: GenerateUpdatedPdfPayload
    partner: Partner
    partnerOfferGroup: PartnerOfferGroup
    partnerOfferGroupsByType: List<PartnerOfferGroup>
    pastCoreSummary: PastCoreSummary
    pastEarlySummary: PastEarlySummary
    pastLaterSummary: PastLaterSummary
    pastSpendSummary: PastSpendSummary
    pastSpendTransactionItem: PastItem
    pdfDownloadUrl: PdfDownloadUrlPayload
    performance: Performance
    personalizedFoundMoney: List<FoundMoneyCampaignV2>
    personalizedFoundMoneyV2: List<FoundMoneyCampaignV2>
    * portfolios: List<Portfolio>
    product: Product
    productByKey: Product
    products: List<Product>
    * profile: Profile
    promoMilestoneChallengeId: String
    promotion: Promotion
    promotionsByUserId: List<Promotion>
    protectContext: ProtectContext
    protectCoverageShop: CoverageShop
    protectHome: ProtectHome
    protectInsuranceHome: InsuranceHome
    protectLander: ProtectLander
    protectLearningCenter: ProtectLearningCenter
    protectLifeCalculatorSurvey: LifeCalculatorSurvey
    protectLifeQuotePremiums: PremiumsResult
    protectLifeQuoteSurvey: LifeQuoteSurvey
    protectOnboardingQuestions: List<Question>
    protectProviders: ProviderSearch
    protectRecommendations: Recommendations
    protectRecommendedLifeCoverage: RecommendedLifeCoverage
    recommendedPortfolio: SuitabilityPortfolio
    recurringInvestmentSettings: RecurringInvestmentSettings
    recurringTransfers: List<RecurringTransfer>
    referralForUser: Referral
    registeredAuthenticators: List<Authenticator>
    * registration: Result
    remoteStrings: OasAnyTypeNotMapped
    roundUpAccount: RoundUpAccount
    * roundUpAccounts: List<RoundUpAccount>
    roundUpProfile: RoundUpProfile
    * roundUps: RoundUpTypePagination
    * searchActiveEarnOffers: EarnOfferQueryPage
    searchEmployers: SearchEmployersPayload
    searchSupportArticles: SearchSupportResult
    securityBySymbol: Security
    securityPerformanceBySymbol: SecurityPerformance
    settings: Settings
    * signatures: List<Signature>
    smartDepositMetadata: SmartDepositMetadataResult
    spendAccount: SpendAccount
    spendAlerts: List<SpendAlert>
    spendAtms: SpendAtmsResult
    splitDepositSettings: SplitDepositSettings
    splitDepositSettingsByUserId: List<SplitDepositSettings>
    statements: List<Statement>
    subscriptionMigration: SubscriptionMigration
    subscriptionMigrationWaiver: SubscriptionMigrationWaiver
    subscriptionMigrationWaiversByUserId: List<SubscriptionMigrationWaiver>
    suitabilityResponses: List<SuitabilitySuitabilityResponse>
    suitabilityServiceEnabled: Boolean
    supportArticle: SupportArticle
    supportArticlesBySectionId: List<SupportArticle>
    supportCategory: SupportCategory
    supportMostCommonFaq: List<ContactFaq>
    supportSchedule: ScheduleResult
    supportSection: SupportSection
    supportSectionsByCategoryId: List<SupportSection>
    supportTicketForm: SupportTicketForm
    supportTicketFormField: SupportTicketFormField
    tier: Tier
    tierGroup: TierGroup
    tierGroupForUser: TierGroup
    tierSubscription: TierSubscription
    tierSubscriptionByUserId: TierSubscription
    tierSubscriptionHistoryByUserId: TierSubscriptionConnection
    * topEmployers: TopEmployerPayload
    user: User
    userAlerts: List<UserAlertsResponse>
    userStatus: UserStatus
    verifyCheckPaymentRecipientAddress: VerifyCheckPaymentRecipientAddressResult
    withholdingDefaults: WithholdingDefaults
    withholdingEstimates: WithholdingEstimates
    * yearLaterReport: YearLaterReport
}

entity QueryAcceptanceDocumentArgs {
    * type: String
}

entity QueryAcceptanceDocumentsArgs {
    requiredFor: String
}

entity QueryAccountPointsRuleByMilestoneIdArgs {
    * milestoneID: String
}

entity QueryAccountStrengthArgs {
    accountId: String
}

entity QueryAccountsArgs {
    status: List<AccountStatus>
}

entity QueryActionFeedArgs {
    input: ActionCardsInput
}

entity QueryActiveEarnOffersArgs {
    cursor: String
    first: BigDecimal
    tag: String
}

entity QueryActivityArgs {
    limit: BigDecimal
    offset: BigDecimal
}

entity QueryActivitySummaryArgs {
    accountId: String
    product: ActivitySummaryProduct
}

entity QueryAddressDeliverabilityArgs {
    * input: AddressDeliverabilityInput
}

entity QueryAddressesArgs {
    addressType: AddressType
}

entity QueryAllAcceptanceDocumentsArgs {
    requiredFor: String
}

entity QueryAllBankAccountsArgs {
    * input: AllBankAccountsInput
}

entity QueryAllBankCardsArgs {
    filter: AllBankCardsFilter
}

entity QueryAllBankDocumentsArgs {
    * input: AllBankDocumentsInput
}

entity QueryAllBankTransactionsArgs {
    accountId: String
    pagination: PageInput
}

entity QueryAllCardTrackingStatusesArgs {
    userId: String
}

entity QueryAllCheckPaymentsArgs {
    pageInput: PageInput
}

entity QueryAllPastCoreItemChildrenArgs {
    * pastItemId: String
}

entity QueryAllPastCoreItemsArgs {
    excludeFees: Boolean
    filter: AllPastCoreItemsSchemaFilter
    pagination: PageInput
}

entity QueryAllPastEarlyItemsArgs {
    * beneficiaryAccountId: String
    excludeFees: Boolean
    filter: AllPastEarlyItemsSchemaFilter
    pagination: PageInput
}

entity QueryAllPastLaterItemsArgs {
    excludeFees: Boolean
    filter: AllPastLaterItemsSchemaFilter
    pagination: PageInput
}

entity QueryAllPastSpendItemsArgs {
    filter: AllPastSpendItemsSchemaFilter
    pagination: PageInput
}

entity QueryAllSupportArticlesArgs {
    filter: AllSupportArticlesFilterInput
    isPrivate: Boolean
}

entity QueryAllSupportSectionsArgs {
    isPrivate: Boolean
}

entity QueryAllTransferableToArgs {
    * input: AllTransferableToInput
}

entity QueryAuthenticateForFeeNegotiationStatusByLinkedAccountIdArgs {
    * linkedAccountId: String
}

entity QueryBankFeesByUserIdArgs {
    * first: BigDecimal
    * offset: BigDecimal
    * statusFilter: List<FeeStatusFilter>
}

entity QueryBankTransactionArgs {
    * id: String
}

entity QueryBeneficiaryArgs {
    * id: String
}

entity QueryBillingCycleArgs {
    id: String
}

entity QueryBillingCyclesArgs {
    state: List<BillingCycleState>
}

entity QueryClosureReasonsByInvestmentAccountTypeArgs {
    product: InvestmentProduct
}

entity QueryDocumentRequestArgs {
    * input: DocumentRequestInput
}

entity QueryDocumentRequestsArgs {
    * input: DocumentRequestsInput
}

entity QueryEarlyAccountStateRegulationArgs {
    stateCode: String
}

entity QueryEarlyAccountTransferInfoArgs {
    * investmentAccountId: String
}

entity QueryEarnCtaDataByUserIdArgs {
    * id: String
}

entity QueryEarnOfferByCampaignOfferIdArgs {
    * campaignOfferId: String
    * origin: String
    * sessionId: String
}

entity QueryEligibilityArgs {
    * eligibilityScope: EligibilityScope
}

entity QueryEstimatedTransferDatesArgs {
    * input: EstimatedTransferDatesInput
}

entity QueryEtfArgs {
    * symbol: String
}

entity QueryEvaluateCheckDepositArgs {
    * input: EvaluateCheckDepositInput
}

entity QueryExtensionCampaignStoreArgs {
    * campaignId: String
    * id: String
}

entity QueryExtensionCampaignStoresArgs {
    campaignId: String
    domain: String
}

entity QueryFeeArgs {
    * id: String
}

entity QueryFeesArgs {
    accountId: String
    billingCycleId: String
}

entity QueryFinancialInstitutionArgs {
    * externalId: String
    linkable: Boolean
}

entity QueryFinancialInstitutionsArgs {
    includeBlacklisted: Boolean
    includeDirectBank: Boolean
    pageInput: PageInput
    q: String
    supportsAuth: Boolean
    supportsFunding: Boolean
}

entity QueryFinishSetupArgs {
    * accountId: String
    * feedContext: FeedContext
}

entity QueryFoundMoneyCampaignsArgs {
    origin: String
    sessionId: String
}

entity QueryFoundMoneyOfferArgs {
    * id: String
    origin: String
    sessionId: String
}

entity QueryFoundMoneyOffersArgs {
    origin: String
    promoted: Boolean
    sessionId: String
}

entity QueryFriendArgs {
    advocateReferralCode: String
}

entity QueryGenerateUpdatedPdfArgs {
    * input: PdfDownloadUrlInput
}

entity QueryHelpFormContentArgs {
    * form: HelpFormType
}

entity QueryInstantSearchSupportArticlesArgs {
    * isPrivate: Boolean
    * query: String
}

entity QueryInvestmentAccountArgs {
    * id: String
}

entity QueryInvestmentAccountByBeneficiaryIdArgs {
    * beneficiaryId: String
}

entity QueryInvestmentAccountsByUserIdArgs {
    filter: InvestmentAccountsByUserIdFilter
}

entity QueryInvestmentsArgs {
    filter: InvestmentFilter
    limit: BigDecimal
    offset: BigDecimal
}

entity QueryJobSearchArgs {
    * searchCriteria: JobSearchCriteriaInput
}

entity QueryJobSearchV2Args {
    * pagination: PageInput
    saveAsRecentSearch: Boolean
    * searchCriteria: JobSearchCriteriaInput
}

entity QueryLaterBeneficiariesArgs {
    * investmentAccountId: String
}

entity QueryLaterContributionAbilityArgs {
    investmentAccountId: String
}

entity QueryLaterContributionHistoryArgs {
    * investmentAccountId: String
}

entity QueryLaterHistoryArgs {
    * accountId: String
    limit: BigDecimal
    page: BigDecimal
}

entity QueryLaterPortfolioPerformanceArgs {
    * accountId: String
}

entity QueryLinkedAccountArgs {
    * linkedAccountId: String
}

entity QueryLinkedAccountsArgs {
    externalSources: List<LinkedAccountExternalSourceEnum>
    linked: Boolean
}

entity QueryLinkedSubaccountArgs {
    * linkedSubaccountId: String
}

entity QueryLinkedSubaccountsArgs {
    linked: Boolean
}

entity QueryMilestoneAchievementActionRuleArgs {
    * milestoneID: String
}

entity QueryMilestoneArgs {
    * id: String
}

entity QueryMilestoneChallengeArgs {
    * id: String
}

entity QueryMilestoneHubEligibleArgs {
    * registrationCompletedAt: OasAnyTypeNotMapped
}

entity QueryMilestonesByThemeArgs {
    filter: MilestoneByThemeFilterInput
    * theme: MilestoneTheme
}

entity QueryNextTransferDateArgs {
    * recurrenceRule: RecurrenceRuleInput
}

entity QueryOfferArgs {
    * id: String
}

entity QueryOnboardingTipsArgs {
    * feedContext: FeedContext
}

entity QueryOutsideContributionCodeArgs {
    * id: String
}

entity QueryOutsideContributionCodeByCodeArgs {
    * code: String
}

entity QueryOutsideContributionCodeByInvestmentAccountIdArgs {
    * investmentAccountId: String
}

entity QueryParameterizedPdfArgs {
    * input: ParameterizedPdfInput
}

entity QueryPartnerArgs {
    * oauthToken: String
    * payloadToken: String
}

entity QueryPartnerOfferGroupArgs {
    filter: PartnerOfferGroupFilterInput
    * id: String
}

entity QueryPartnerOfferGroupsByTypeArgs {
    * partnerOfferGroupsTypeInput: PartnerOfferGroupsTypeInput
}

entity QueryPastEarlySummaryArgs {
    * beneficiaryAccountId: String
}

entity QueryPastLaterSummaryArgs {
    investmentAccountId: String
}

entity QueryPastSpendTransactionItemArgs {
    * transactionId: String
}

entity QueryPdfDownloadUrlArgs {
    * input: PdfDownloadUrlInput
}

entity QueryPerformanceArgs {
    * days: BigDecimal
    investmentAccountId: String
    * start: OasAnyTypeNotMapped
}

entity QueryProductArgs {
    * id: String
}

entity QueryProductByKeyArgs {
    * productKey: ProductKey
}

entity QueryPromotionArgs {
    * id: String
}

entity QueryPromotionsByUserIdArgs {
    filter: PromotionFilterInput
    limit: BigDecimal
}

entity QueryProtectInsuranceHomeArgs {
    * insuranceType: InsuranceType
}

entity QueryProtectLifeQuotePremiumsArgs {
    * parameters: PremiumsInput
}

entity QueryProtectLifeQuoteSurveyArgs {
    * providerName: String
}

entity QueryProtectProvidersArgs {
    * insuranceType: InsuranceType
}

entity QueryRecurringInvestmentSettingsArgs {
    investmentAccountId: String
}

entity QueryRecurringTransfersArgs {
    filter: RecurringTransfersFilterInput
}

entity QueryRoundUpAccountArgs {
    * linkedSubaccountId: String
}

entity QueryRoundUpsArgs {
    autoInvestable: Boolean
    investmentId: String
    manual: Boolean
    pageInput: PageInput
    state: List<RoundUpState>
    targetAccountId: String
    transactionDateAfter: String
    transactionDateBefore: String
}

entity QuerySearchActiveEarnOffersArgs {
    cursor: String
    first: BigDecimal
    * searchTerm: String
    tag: String
}

entity QuerySearchEmployersArgs {
    * input: SearchEmployersInput
}

entity QuerySearchSupportArticlesArgs {
    * isPrivate: Boolean
    * query: String
}

entity QuerySecurityBySymbolArgs {
    * input: SecurityBySymbolInput
}

entity QuerySecurityPerformanceBySymbolArgs {
    * input: SecurityPerformanceBySymbolInput
}

entity QuerySignaturesArgs {
    signatureType: SignatureType
}

entity QuerySmartDepositMetadataArgs {
    * smartDepositMetadataInput: SmartDepositMetadataInput
}

entity QuerySpendAtmsArgs {
    * input: SpendAtmsInput
}

entity QuerySplitDepositSettingsArgs {
    * id: String
}

entity QuerySplitDepositSettingsByUserIdArgs {
    filter: SplitDepositSettingsFilterInput
    normalizeToFrequency: SplitDepositNormalizationFrequency
}

entity QueryStatementsArgs {
    investmentAccountId: String
    limit: BigDecimal
    offset: BigDecimal
    * type: String
}

entity QuerySubscriptionMigrationArgs {
    * id: String
}

entity QuerySubscriptionMigrationWaiverArgs {
    * id: String
}

entity QuerySupportArticleArgs {
    * id: String
    isPrivate: Boolean
}

entity QuerySupportArticlesBySectionIdArgs {
    isPrivate: Boolean
    * sectionId: String
}

entity QuerySupportCategoryArgs {
    * categoryId: String
}

entity QuerySupportScheduleArgs {
    * input: ScheduleInput
}

entity QuerySupportSectionArgs {
    isPrivate: Boolean
    * sectionId: String
}

entity QuerySupportSectionsByCategoryIdArgs {
    * categoryId: String
    isPrivate: Boolean
}

entity QuerySupportTicketFormArgs {
    * id: String
}

entity QuerySupportTicketFormFieldArgs {
    * id: String
}

entity QueryTierArgs {
    * id: String
}

entity QueryTierGroupArgs {
    id: String
}

entity QueryTierOptionByProductKeyArgs {
    * productKey: ProductKey
    tierGroupId: String
}

entity QueryTierOptionByTierPriceIdArgs {
    * tierPriceId: String
}

entity QueryTierSubscriptionArgs {
    * id: String
}

entity QueryTierSubscriptionHistoryByUserIdArgs {
    after: String
    limit: BigDecimal
    reverse: Boolean
}

entity QueryToggleArgs {
    context: OasAnyTypeNotMapped
    * projectId: String
    * toggleId: String
}

entity QueryVerifyCheckPaymentRecipientAddressArgs {
    * input: VerifyCheckPaymentRecipientAddressInputType
}

entity QueryWithholdingDefaultsArgs {
    earlyDistributionTaxExceptionReason: String
    * investmentAccountId: String
    * withdrawalAmount: CurrencyAmountInput
}

entity QueryWithholdingEstimatesArgs {
    * federalWithholdingPercentage: BigDecimal
    * investmentAccountId: String
    reason: LaterWithdrawalReason
    * stateWithholdingPercentage: BigDecimal
    * withdrawalAmount: CurrencyAmountInput
}

entity QueryYearLaterReportArgs {
    * year: BigDecimal
}

entity Question {
    body: String
    defaultAnswer: Answer
    eyebrow: String
    headline: String
    * id: String
    image: Image
    possibleAnswers: List<Answer>
    tip: String
    title: String
    * type: OnboardingStepType
}

entity QuestionAnswer {
    * name: QuestionAnswerName
    * title: String
}

entity QuestionAnswerName {
}

entity QuestionResponse {
    * answers: List<String>
    * questionId: String
}

entity QuoteOrigin {
}

entity QuoteResult {
    alternatePartners: InsuranceCarousel
    * body: String
    * cta: Cta
    disclaimer: Disclaimer
    * id: String
    * logo: Image
    * title: String
    * footer: Footer
    * header: Header
    * modals: List<Modal>
    * navBody: String
    * navTitle: String
    * partnerBody: String
    * partnerTitle: String
    * partnerUrl: String
    premiums: List<Premium>
    requestedCoverage: BigDecimal
    * sliders: List<QuoteSlider>
}

entity QuoteSlider {
    body: String
    * defaultValue: BigDecimal
    * headline: String
    maxLabel: String
    minLabel: String
    * possibleValues: List<BigDecimal>
    * questionName: String
    tip: Tip
}

entity QuoteStatus {
}

entity QuoteUserMetadata {
    * campaignId: String
    * origin: QuoteOrigin
    * sessionId: String
}

entity RawLinkSession {
    * externalId: String
    * token: String
}

entity RdvRequiredUserAlert {
    * type: String
    * userId: String
}

entity RdvVerificationRequired {
    message: String
    userId: String
}

entity RecaptchaException {
    errorCodes: List<String>
}

entity Recommendations {
    * body: String
    * cta: Cta
    * id: String
    * image: Image
    * title: String
    * widgets: List<BriefInsuranceSection>
}

entity RecommendedLifeCoverage {
    * about: AboutSection
    * cta: Cta
    * disclaimer: Disclaimer
    * title: String
    * widgets: List<RecommendedLifeCoverageWidget>
}

entity RecommendedLifeCoverageWidget {
    * cta: Cta
    * recommendedCoverage: BigDecimal
    * title: String
    * coverageBreakdown: LifeCoverageBreakdown
    body: String
    * insuranceType: InsuranceType
    * offers: List<CarouselOffer>
}

entity RecordAlreadyExistsError {
    * message: String
}

entity RecordDoesNotExistError {
    * message: String
}

entity RecurrenceFrequency {
}

entity RecurrenceRule {
    byMonthDay: List<BigDecimal>
    byWeekDay: List<DayOfWeek>
    endDate: OasAnyTypeNotMapped
    * frequency: RecurrenceFrequency
    * interval: BigDecimal
    startDate: OasAnyTypeNotMapped
}

entity RecurrenceRuleInput {
    byMonthDay: List<BigDecimal>
    byWeekDay: List<DayOfWeek>
    endDate: OasAnyTypeNotMapped
    * frequency: RecurrenceFrequency
    * interval: BigDecimal
    startDate: OasAnyTypeNotMapped
}

entity RecurringInvestmentInput {
    * amount: BigDecimal
    * day: BigDecimal
    * frequency: InvestmentFrequency
    investmentAccountId: String
}

entity RecurringInvestmentPayload {
    * recurringInvestmentSettings: RecurringInvestmentSettings
}

entity RecurringInvestmentSettings {
    amount: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    day: BigDecimal
    frequency: InvestmentFrequency
    * updatedAt: OasAnyTypeNotMapped
}

entity RecurringTransfer {
    * active: Boolean
    * id: String
    nextTransferDate: OasAnyTypeNotMapped
    * recurrenceRule: RecurrenceRule
    * transferEvent: RecurringTransferEvent
}

entity RecurringTransferAccount {
    * id: String
    * type: String
}

entity RecurringTransferAccountIdFilterInput {
    filter: RecurringTransferDirectionFilterInput
    * targetAccountId: String
}

entity RecurringTransferAccountInput {
    * id: String
    * type: String
}

entity RecurringTransferDate {
    nextTransferDate: OasAnyTypeNotMapped
}

entity RecurringTransferDirection {
}

entity RecurringTransferDirectionFilterInput {
    * direction: RecurringTransferDirection
}

entity RecurringTransferEvent {
    * amount: CurrencyAmount
    * direction: RecurringTransferDirection
    * fundingSource: RecurringTransferFundingSource
    * targetAccount: RecurringTransferAccount
}

entity RecurringTransferEventInput {
    * amount: CurrencyAmountInput
    * direction: RecurringTransferDirection
    * fundingSource: RecurringTransferFundingSourceInput
    * targetAccount: RecurringTransferAccountInput
}

entity RecurringTransferFundingSource {
    * id: String
    * type: RecurringTransferFundingSourceType
}

entity RecurringTransferFundingSourceInput {
    * id: String
    * type: RecurringTransferFundingSourceType
}

entity RecurringTransferFundingSourceType {
}

entity RecurringTransferPathException {
    * exception: RecurringTransferPathExceptionCase
    * path: List<String>
}

entity RecurringTransferPathExceptionCase {
}

entity RecurringTransfersFilterInput {
    filter: RecurringTransferAccountIdFilterInput
    * targetAccountType: String
}

entity Referral {
    * code: String
    * referreeRewardAmount: BigDecimal
    * referrerRewardAmount: BigDecimal
    * url: String
}

entity ReferralCampaign {
    * advocateEmail: String
    advocateRewards: List<ReferralReward>
    advocateUserId: String
    * campaignId: String
    events: List<ReferralEvent>
    * friendEmail: String
    friendRewards: List<ReferralReward>
    friendUserId: String
    name: String
}

entity ReferralEvent {
    dateCompleted: OasAnyTypeNotMapped
    * referralEventType: ReferralEventType
    * status: ReferralEventStatus
}

entity ReferralEventInput {
    eventDetails: OasAnyTypeNotMapped
    eventNonce: String
    * eventType: ReferralEventType
    * userId: String
}

entity ReferralEventStatus {
}

entity ReferralEventType {
}

entity ReferralHistory {
    friendSummary: List<FriendSummary>
    numCompletedReferrals: BigDecimal
    numPendingReferrals: BigDecimal
    totalReferralRewardsEarned: CurrencyAmount
}

entity ReferralReward {
    name: String
    rewardFulfilledAtDate: OasAnyTypeNotMapped
    rewardStatus: ReferralRewardStatus
    * value: String
    valueType: String
}

entity ReferralRewardStatus {
}

entity ReferralRewardSummary {
    advocateUserId: String
    * status: ReferralRewardStatus
}

entity ReferralRewardUpdateStatus {
}

entity ReferralStatus {
}

entity ReferralUserUpdateInput {
    * email: String
    firstName: String
    lastName: String
    userId: String
}

entity RefreshAuthTokenInput {
    * refreshToken: String
}

entity RefreshAuthTokenResult {
    * id: String
    * identityId: String
    refreshToken: String
    * token: String
    * message: String
}

entity RegisterEmailAuthenticatorInput {
    * email: OasAnyTypeNotMapped
    name: String
    setDefault: Boolean
}

entity RegisterEmailAuthenticatorResult {
    * createdAt: OasAnyTypeNotMapped
    * deviceId: String
    * email: OasAnyTypeNotMapped
    * id: String
    lastUsedAt: OasAnyTypeNotMapped
    * name: String
    * updatedAt: OasAnyTypeNotMapped
    * message: String
}

entity RegisterLinkSessionResult {
    * success: Boolean
    * createdAt: OasAnyTypeNotMapped
    errorCode: String
    externalId: String
    * externalSource: LinkedAccountExternalSourceEnum
    financialInstitution: FinancialInstitution
    financialInstitutionId: String
    * id: String
    institutionName: String
    * linked: Boolean
    * linkedSubaccounts: List<LinkedSubaccount>
    * logoUrl: String
    publicToken: String
    * status: LinkedAccountStatusEnum
    transactionsLastSyncedAt: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
}

entity RegisterPhoneAuthenticatorInput {
    name: String
    * phoneNumber: OasAnyTypeNotMapped
    setDefault: Boolean
}

entity RegisterPhoneAuthenticatorResult {
    * createdAt: OasAnyTypeNotMapped
    * deviceId: String
    * id: String
    lastUsedAt: OasAnyTypeNotMapped
    * name: String
    * phoneNumber: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
    * message: String
}

entity RegisterUserInput {
    * email: OasAnyTypeNotMapped
    * password: String
    * udid: String
}

entity RegisterUserResult {
    * id: String
    * identityId: String
    refreshToken: String
    * token: String
    * message: String
}

entity RegistrationInput {
    * funnel: Funnel
}

entity ReinitiateSmsChallengeInput {
    * challengeId: String
}

entity ReinitiateSmsChallengeResult {
    * alternateAuthenticators: List<AuthenticatorInfo>
    * id: String
    * maskedPhoneNumber: String
    * maskedEmail: String
    * message: String
}

entity ReissueBankCardEligibility {
    * originalCardCreatedAt: OasAnyTypeNotMapped
    * issues: List<ReissueBankCardIneligibleIssue>
}

entity ReissueBankCardEligible {
    * originalCardCreatedAt: OasAnyTypeNotMapped
}

entity ReissueBankCardExistsError {
    * id: String
}

entity ReissueBankCardIneligible {
    * issues: List<ReissueBankCardIneligibleIssue>
}

entity ReissueBankCardIneligibleIssue {
}

entity ReissueBankCardInput {
    * mailingAddress: BankCardRequestMailingAddressInput
    * reason: BankCardRequestReason
    reasonComment: String
    reasonDate: OasAnyTypeNotMapped
}

entity ReissueBankCardResult {
    * id: String
    * isActivated: Boolean
    * isReissue: Boolean
    issuedDate: OasAnyTypeNotMapped
    mailingAddress: BankCardRequestMailingAddress
    previousBankCardId: String
    * reason: BankCardRequestReason
    reasonComment: String
    reasonDate: OasAnyTypeNotMapped
    * requestedDate: OasAnyTypeNotMapped
    * status: BankCardRequestStatus
    * userId: String
}

entity RejectUploadedDocumentInput {
    * documentRequestId: String
    note: String
    * reason: RejectedReason
    * reviewerId: String
}

entity RejectedReason {
}

entity RelinkLinkedAccountAlert {
    * type: String
    * userId: String
}

entity RemovedJobAlert {
    * id: String
}

entity ReopenUserAccountResult {
    message: String
    userId: String
    * lockedAt: OasAnyTypeNotMapped
    * suspendedAt: OasAnyTypeNotMapped
    suspendedReason: String
    closedAt: OasAnyTypeNotMapped
    * email: String
    * uuid: String
}

entity ReportBankCardLostStolenInput {
    * lockReason: BankCardPermanentLockReason
}

entity ReportBankCardLostStolenPayload {
    bankCard: BankCard
}

entity RequestAccountClosureInput {
    comments: String
    * reason: String
}

entity RequestDocumentUploadInput {
    * documentType: DocumentType
    externalId: String
    parentRequestId: String
    requestKey: String
    requestedFileCount: BigDecimal
    requesterId: String
}

entity RequestEarlyAccountClosureInput {
    * investmentAccountIds: List<String>
    * reason: InvestmentAccountClosureReason
}

entity RequestEarlyAccountClosureResult {
    message: String
    beneficiary: Beneficiary
    beneficiaryId: String
    * cashBalance: MonetaryAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    currentBalance: MonetaryAmount
    * currentBalanceWithPending: MonetaryAmount
    * hasInvested: Boolean
    * id: String
    * investmentAccountType: InvestmentAccountType
    * name: String
    * netInvestments: MonetaryAmount
    * pendingBalance: MonetaryAmount
    * pendingWithdrawals: List<Withdrawal>
    performance: Performance
    portfolio: Portfolio
    * product: InvestmentProduct
    recommendedPortfolio: Portfolio
    recurringInvestmentSettings: RecurringInvestmentSettings
    * requirements: AccountRequirements
    * status: InvestmentAccountStatus
    * summary: InvestmentAccountSummary
    * totalBonds: MonetaryAmount
    * totalEquities: MonetaryAmount
    transferability: InvestmentAccountTransferability
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    yearToDateReturn: MarketReturn
}

entity RequestInvestmentAccountReopenInput {
    * investmentAccountId: String
}

entity RequestInvestmentAccountReopenResult {
    * reopenRequest: InvestmentAccountReopenRequest
    currentUserTierKey: String
    accountType: InvestmentAccountType
    message: String
    * createdAt: OasAnyTypeNotMapped
    * id: BigDecimal
    * investmentAccountId: String
    * reopenChecks: List<UserInvestmentAccountReopenCheck>
    * state: InvestmentAccountReopenRequestState
    * updatedAt: OasAnyTypeNotMapped
    * user: UserV2
    * userId: BigDecimal
}

entity RequestSubscriptionMigrationWaiverInput {
    * reason: String
    * subscriptionMigrationId: String
}

entity RequestSubscriptionMigrationWaiverResult {
    * accepted: Boolean
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * migration: SubscriptionMigration
    * reason: String
    updatedAt: OasAnyTypeNotMapped
    * message: String
}

entity ResourceNotFoundError {
    * requestId: String
}

entity Result {
    * funnel: Funnel
}

entity RetirementPlanAccess {
}

entity ReturnedCheckDeposit {
    * amount: CurrencyAmount
    * backCheckImageUrl: String
    * frontCheckImageUrl: String
    * rejectedDate: OasAnyTypeNotMapped
}

entity RewardSummary {
    * currency: String
    * value: BigDecimal
}

entity RiskStatus {
}

entity RolloverAccountCode {
}

entity RolloverAccountType {
    * code: RolloverAccountCode
    * name: String
}

entity RolloverAccounts {
    accounts: List<RolloverAccountType>
}

entity RoundUp {
    * amount: BigDecimal
    * change: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    * instant: Boolean
    investmentId: String
    investmentNonce: String
    * linkedSubaccountId: String
    * manual: Boolean
    multiplier: BigDecimal
    * name: String
    * state: RoundUpState
    targetAccountId: String
    total: BigDecimal
    * transactionDate: OasAnyTypeNotMapped
    * transactionDisplayDate: OasAnyTypeNotMapped
    * transactionId: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
}

entity RoundUpAccount {
    * createdAt: OasAnyTypeNotMapped
    * enabled: Boolean
    * linkedSubaccountId: String
    * roundUpProfile: RoundUpProfile
    * roundUps: List<RoundUp>
    startDate: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
}

entity RoundUpProfile {
    * createdAt: OasAnyTypeNotMapped
    * multiplier: BigDecimal
    * realTimeRoundUpEligible: Boolean
    * roundUpCount: BigDecimal
    * roundUpTotal: BigDecimal
    * roundUps: List<RoundUp>
    * roundUpsEnabled: Boolean
    * showRoundUpsProgress: Boolean
    targetAccountId: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    * wholeDollarAmount: BigDecimal
}

entity RoundUpProfileInput {
    multiplier: BigDecimal
    roundUpsEnabled: Boolean
    targetAccountId: String
    wholeDollarAmount: BigDecimal
}

entity RoundUpProfileRoundUpCountArgs {
    spend: Boolean
    state: List<RoundUpState>
    targetAccountId: String
}

entity RoundUpProfileRoundUpTotalArgs {
    spend: Boolean
    state: List<RoundUpState>
    targetAccountId: String
}

entity RoundUpState {
}

entity RoundUpType {
}

entity RoundUpTypeEdge {
    * cursor: String
    * node: RoundUp
}

entity RoundUpTypePagination {
    * edges: List<RoundUpTypeEdge>
    * pageInfo: PageInfo
}

entity SalaryInterval {
}

entity SamePasswordsException {
    * message: String
}

entity Scalars {
    * AccountNumber: OasAnyTypeNotMapped
    * BankCardPin: OasAnyTypeNotMapped
    * BigDecimal: OasAnyTypeNotMapped
    * Boolean: Boolean
    * CardNumberMasked: OasAnyTypeNotMapped
    * Date: OasAnyTypeNotMapped
    * DateTime: OasAnyTypeNotMapped
    * Email: OasAnyTypeNotMapped
    * EmailAddress: OasAnyTypeNotMapped
    * Float: BigDecimal
    * ID: String
    * Int: BigDecimal
    * JSON: OasAnyTypeNotMapped
    * Long: OasAnyTypeNotMapped
    * PhoneNumber: OasAnyTypeNotMapped
    * PositiveFloat: OasAnyTypeNotMapped
    * RoutingNumber: OasAnyTypeNotMapped
    * Short: OasAnyTypeNotMapped
    * String: String
    * StringKey: OasAnyTypeNotMapped
    * TickerSymbol: OasAnyTypeNotMapped
    * Time: OasAnyTypeNotMapped
    * URL: OasAnyTypeNotMapped
    * USStateName: OasAnyTypeNotMapped
    * Upload: OasAnyTypeNotMapped
    * Url: OasAnyTypeNotMapped
    * Void: OasAnyTypeNotMapped
}

entity ScheduleInput {
    * type: ScheduleType
}

entity ScheduleRecurringTransferInput {
    * recurrenceRule: RecurrenceRuleInput
    * transferEvent: RecurringTransferEventInput
}

entity ScheduleRecurringTransferResult {
    * active: Boolean
    * id: String
    nextTransferDate: OasAnyTypeNotMapped
    * recurrenceRule: RecurrenceRule
    * transferEvent: RecurringTransferEvent
    * pathExceptions: List<RecurringTransferPathException>
}

entity ScheduleResult {
    * active: Boolean
    name: String
}

entity ScheduleType {
}

entity SearchEmployersInput {
    * bankAccountId: String
    searchTerm: String
    sessionId: String
    switchType: SwitchType
}

entity SearchEmployersPayload {
    results: List<Employer>
    * trackingId: String
}

entity SearchSupportArticleResult {
    * author: SupportAuthor
    * body: String
    * createdAt: OasAnyTypeNotMapped
    * draft: Boolean
    * editedAt: OasAnyTypeNotMapped
    * id: String
    * name: String
    * outdated: Boolean
    position: BigDecimal
    * promoted: Boolean
    * resultType: String
    * section: SupportSection
    * snippet: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SearchSupportResult {
    * relevantSearchArticles: List<SearchSupportArticleResult>
    * relevantSearchCategories: List<SupportCategory>
}

entity SecretSquirrelException {
    message: String
}

entity Security {
    * lastClosePrice: BigCurrencyAmount
    * lastUpdatedAt: OasAnyTypeNotMapped
    longName: String
    * marketCap: OasAnyTypeNotMapped
    * openPrice: BigCurrencyAmount
    * securityHeadlines: List<SecurityHeadline>
    * securityProfile: SecurityProfile
    * shortName: String
    * symbol: OasAnyTypeNotMapped
    * type: SecurityType
    * volume: OasAnyTypeNotMapped
    * week52High: BigCurrencyAmount
    * week52Low: BigCurrencyAmount
}

entity SecurityAnswer {
    * questionId: String
    * response: String
}

entity SecurityBySymbolInput {
    * symbol: OasAnyTypeNotMapped
}

entity SecurityGain {
    marketValue: BigCurrencyAmount
    percent: OasAnyTypeNotMapped
}

entity SecurityHeadline {
    * createdAt: OasAnyTypeNotMapped
    * headline: String
    * source: String
    * storyUrl: OasAnyTypeNotMapped
    thumbnailUrl: OasAnyTypeNotMapped
}

entity SecurityPerformance {
    * gain: SecurityGain
    prices: List<SecurityPrice>
}

entity SecurityPerformanceBySymbolInput {
    * symbol: OasAnyTypeNotMapped
    * timeSpan: SecurityPerformanceTimeSpan
}

entity SecurityPerformanceTimeSpan {
    * scale: BigDecimal
    * unit: SecurityPerformanceUnitOfTime
}

entity SecurityPerformanceUnitOfTime {
}

entity SecurityPrice {
    dateTime: OasAnyTypeNotMapped
    marketValue: BigCurrencyAmount
}

entity SecurityProfile {
    defaultLogoUrl: OasAnyTypeNotMapped
    description: String
    logoUrl: OasAnyTypeNotMapped
    * tradingSectors: List<TradingSector>
}

entity SecurityQuestion {
    id: String
    text: String
}

entity SecurityQuestionInput {
    * answer1: String
    * question1: String
}

entity SecurityType {
}

entity SendCheckPaymentInput {
    * amount: CurrencyAmountInput
    * fromAccountId: String
    memo: String
    * nonce: String
    * recipient: CheckPaymentRecipientInput
    * recipientAddress: CheckPaymentAddressInput
}

entity SendCheckPaymentResult {
    * amount: CurrencyAmount
    canceledAt: OasAnyTypeNotMapped
    checkNumber: String
    * createdAt: OasAnyTypeNotMapped
    * estimatedArrivalAt: OasAnyTypeNotMapped
    failedAt: OasAnyTypeNotMapped
    failureReason: String
    * fromAccountId: String
    * id: String
    memo: String
    * recipientAddress: CheckPaymentAddress
    * recipientName: String
    * status: CheckPaymentStatus
    trackingNumber: String
    * requestId: String
    errorMessage: String
}

entity Session {
    redirectUrl: String
    * token: String
    * uuid: String
}

entity SetAuthenticationPinInput {
    * pin: String
    * pinConfirmation: String
}

entity SetAuthenticationPinResult {
    * userId: String
    * message: String
}

entity SetAuthenticationPinSuccess {
    * userId: String
}

entity SetBeneficiarySsnResult {
    addresses: List<Address>
    avatarUrl: String
    * createdAt: OasAnyTypeNotMapped
    * custodianId: String
    * dateOfBirth: String
    deactivatedAt: OasAnyTypeNotMapped
    email: OasAnyTypeNotMapped
    * firstName: String
    * id: String
    * lastName: String
    phoneNumbers: List<Phone>
    * ssnPresent: Boolean
    * updatedAt: OasAnyTypeNotMapped
    message: String
}

entity SetDefaultAuthenticatorInput {
    * authenticatorId: String
}

entity SetDefaultAuthenticatorResult {
    * createdAt: OasAnyTypeNotMapped
    * deviceId: String
    * id: String
    lastUsedAt: OasAnyTypeNotMapped
    * name: String
    * phoneNumber: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
    * email: OasAnyTypeNotMapped
    * message: String
}

entity SetLinkingErrorInput {
    * code: LinkedAccountLinkingErrorsEnum
}

entity SetPortfolioInput {
    * id: String
}

entity SetUpTip {
    * backgroundImage: Image
    * body: String
    * ctaDetails: ActionFeedCta
    * id: String
    * image: Image
    * type: ProductSetupTipType
}

entity Settings {
    depositsSuspended: Boolean
}

entity Signature {
    * createdAt: OasAnyTypeNotMapped
    * signatureType: SignatureType
    * svgFile: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
}

entity SignatureType {
}

entity SmartDepositMetadataInput {
    * supportedTargetAccounts: List<SplitDepositTargetAccountType>
}

entity SmartDepositMetadataResult {
    * recommendedAllocations: List<SplitDepositAllocation>
    * targetAccounts: List<SplitDepositTargetAccount>
}

entity SmsAuthChallenge {
    * alternateAuthenticators: List<AuthenticatorInfo>
    * id: String
    * maskedPhoneNumber: String
}

entity SocialCopies {
    campaignTaxonomy: String
    category: String
    copy: String
    id: String
    targetMedium: String
}

entity SpendAccount {
    bankCardOrder: BankCardOrder
    * isDirectDepositIncentiveEligible: Boolean
    * isEligible: Boolean
    isReopenable: Boolean
    lockReason: BankAccountLockReason
    * status: SpendAccountStatus
}

entity SpendAccountStatus {
}

entity SpendAlert {
    * type: String
    * userId: String
}

entity SpendAtm {
    * address: SpendAtmAddress
    * atmName: String
    imageUrl: String
    phoneNumber: String
}

entity SpendAtmAddress {
    addressLine: String
    cityName: String
    country: String
    * latitude: String
    * longitude: String
    postalCode: String
    stateCode: String
}

entity SpendAtmReimbursementItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendAtmVendorUnavailableError {
    requestId: String
}

entity SpendAtmWithdrawalItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendAtmsCoordinateInput {
    * latitude: String
    * longitude: String
}

entity SpendAtmsInput {
    * searchCoordinate: SpendAtmsCoordinateInput
    searchRadius: BigDecimal
}

entity SpendAtmsPayload {
    atms: List<SpendAtm>
    executedSearchRadius: String
}

entity SpendAtmsResult {
    atms: List<SpendAtm>
    executedSearchRadius: String
    requestId: String
}

entity SpendBillPayItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendCheckDepositItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendCheckPaymentItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendDigitalWalletItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendDirectDepositItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendDisputesResponse {
    creationDateTime: OasAnyTypeNotMapped
    * description: String
    disputeDateTime: OasAnyTypeNotMapped
    id: BigDecimal
    * questions: List<SpendTransactionsDisputeQuestions>
    * transactions: List<SpendTransactionsResponse>
}

entity SpendECheckItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendItem {
    availableAt: OasAnyTypeNotMapped
    * description: String
    * summary: String
}

entity SpendPurchaseItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendRealTimeRoundUpItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    initialAmount: CurrencyAmount
    multiplier: BigDecimal
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendTransactionsDisputeCustomersResponse {
    accountNumber: String
    applicationCode: String
    customerNumber: String
    * disputes: List<SpendDisputesResponse>
    firstName: String
    lastName: String
    productCode: String
}

entity SpendTransactionsDisputeQuestions {
    answer: String
    question: String
}

entity SpendTransactionsDisputeResponse {
    * customers: SpendTransactionsDisputeCustomersResponse
}

entity SpendTransactionsInput {
    * amount: String
    availableAt: OasAnyTypeNotMapped
    createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    settledAt: OasAnyTypeNotMapped
    * status: BankTransactionStatus
    tag: String
    * type: BankTransactionType
    * typeCode: String
    updatedAt: OasAnyTypeNotMapped
    voidedAt: OasAnyTypeNotMapped
}

entity SpendTransactionsResponse {
    * amount: BigDecimal
    * coreTransactionId: String
    * description: String
    * disputedAmount: BigDecimal
    id: BigDecimal
    * postingDate: OasAnyTypeNotMapped
    status: String
    * transactionCode: String
}

entity SpendTransferInItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SpendTransferOutItem {
    * amount: CurrencyAmount
    availableAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * id: String
    * reversible: Boolean
    * status: PastItemStatus
    * summary: String
    * title: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SplitDeposit {
    * allocations: List<SplitDepositAllocation>
    * createdAt: String
    distributedAt: String
    expectedNextDepositAmount: String
    expectedNextDepositAt: String
    * id: String
    * isActive: Boolean
    * isCancelable: Boolean
    * isCanceled: Boolean
    * isUsingRecommendedAllocations: Boolean
    * settingsId: String
    * transactionAmount: String
    * updatedAt: String
    * userId: String
    willDistributeAutomaticallyAt: String
}

entity SplitDepositAllocation {
    * allocationPercent: String
    nickname: String
    * targetAccountId: String
    * targetAccountType: SplitDepositTargetAccountType
}

entity SplitDepositAllocationInput {
    * allocationPercent: String
    nickname: String
    * targetAccountId: String
    * targetAccountType: SplitDepositTargetAccountType
}

entity SplitDepositDailyRecurrenceRule {
    * frequency: SplitDepositRecurrenceFrequency
}

entity SplitDepositDirectDepositAllocation {
    * allocationPercent: String
    nickname: String
    normalizedAmount: FormattedMonetaryAmount
    normalizedDailyAmount: String
    * targetAccountId: String
    * targetAccountType: SplitDepositTargetAccountType
}

entity SplitDepositDirectDepositIntentSetting {
    * allocations: List<SplitDepositAllocation>
    * createdAt: String
    deposits: List<SplitDeposit>
    * estimatedPaycheckAmount: CurrencyAmount
    * id: String
    * isActive: Boolean
    * isHidden: Boolean
    * isUsingRecommendedAllocations: Boolean
    * name: String
    * updatedAt: String
    * userId: String
}

entity SplitDepositDirectDepositIntentSettingDepositsArgs {
    limit: BigDecimal
    orderBy: Order
}

entity SplitDepositDirectDepositSetting {
    * allocations: List<SplitDepositAllocation>
    * awaitingConfiguration: Boolean
    * createdAt: String
    deposits: List<SplitDeposit>
    * id: String
    * isActive: Boolean
    * isHidden: Boolean
    * isUsingRecommendedAllocations: Boolean
    * name: String
    normalizedAmount: FormattedMonetaryAmount
    totalAmounts: TotalAmounts
    * updatedAt: String
    * userId: String
}

entity SplitDepositDirectDepositSettingDepositsArgs {
    limit: BigDecimal
    orderBy: Order
}

entity SplitDepositMonthlyRecurrenceRule {
    * byMonthDay: List<BigDecimal>
    * frequency: SplitDepositRecurrenceFrequency
}

entity SplitDepositMutation {
    * cancel: SplitDeposit
    * execute: SplitDeposit
    * id: String
    * userId: String
}

entity SplitDepositNormalizationFrequency {
}

entity SplitDepositRecurrenceAllocation {
    * allocationPercent: String
    * id: String
    * isActive: Boolean
    legacyRecurrenceAmount: FormattedMonetaryAmount
    legacyRecurrenceRule: SplitDepositRecurrenceRule
    nickname: String
    * targetAccountId: String
    * targetAccountType: SplitDepositTargetAccountType
}

entity SplitDepositRecurrenceFrequency {
}

entity SplitDepositRecurrenceRule {
    * frequency: SplitDepositRecurrenceFrequency
}

entity SplitDepositRecurrenceSetting {
    * allocations: List<SplitDepositAllocation>
    * createdAt: String
    deposits: List<SplitDeposit>
    * id: String
    * isActive: Boolean
    * isHidden: Boolean
    * name: String
    normalizedAmount: FormattedMonetaryAmount
    * updatedAt: String
    * userId: String
}

entity SplitDepositRecurrenceSettingDepositsArgs {
    limit: BigDecimal
    orderBy: Order
}

entity SplitDepositSettingType {
}

entity SplitDepositSettings {
    * allocations: List<SplitDepositAllocation>
    * createdAt: String
    deposits: List<SplitDeposit>
    * id: String
    * isActive: Boolean
    * isHidden: Boolean
    * name: String
    * updatedAt: String
    * userId: String
}

entity SplitDepositSettingsDepositsArgs {
    limit: BigDecimal
    orderBy: Order
}

entity SplitDepositSettingsFilterInput {
    * settingTypes: List<SplitDepositSettingType>
    showHiddenEmployerSettings: Boolean
}

entity SplitDepositSettingsMutation {
    * configure: SplitDepositSettings
    * employer: String
    * employerHidden: Boolean
    * id: String
    * userId: String
}

entity SplitDepositSettingsMutationConfigureArgs {
    * input: ConfigureSettingsInput
}

entity SplitDepositTargetAccount {
    nickname: String
    targetAccountId: String
    * targetAccountType: SplitDepositTargetAccountType
}

entity SplitDepositTargetAccountType {
}

entity SplitDepositWeeklyRecurrenceRule {
    * byWeekDay: List<DayOfWeek>
    * frequency: SplitDepositRecurrenceFrequency
}

entity SsnAlreadyInUseException {
    message: String
}

entity SsnDocumentRequestedUserAlert {
    * requestedDocumentType: DocumentType
    * type: String
    * userId: String
}

entity SsnMatchesCustodianException {
    message: String
}

entity SsnUpdateForbiddenException {
    message: String
}

entity SsnUsedError {
    * message: String
}

entity StartAcornsPdfSwitchInput {
    * bankAccountId: String
    employerName: String
    name: String
    sessionId: String
}

entity StartCheckDepositInput {
    * clientInfo: ClientInfo
}

entity StartCheckDepositPayload {
    * sessionToken: String
}

entity StartOnlineSwitchInput {
    * bankAccountId: String
    * employerId: String
    sessionId: String
}

entity StartOnlineSwitchPayload {
    * userSwitch: UserSwitch
}

entity StartSubmittableSwitchAddressInput {
    * city: String
    * country: String
    * state: String
    * street1: String
    street2: String
    * zipCode: String
}

entity StartSubmittableSwitchInput {
    bankAccountId: String
    * employerId: String
    employerLocationAddress: StartSubmittableSwitchAddressInput
    nonSsnEmployeeId: String
    sessionId: String
}

entity StartSubmittableSwitchPayload {
    * userSwitch: UserSwitch
}

entity StateCode {
}

entity Statement {
    archivableId: String
    archivableType: String
    * createdAt: OasAnyTypeNotMapped
    * day: BigDecimal
    endDate: OasAnyTypeNotMapped
    formType: FormType
    * id: String
    * investmentAccountId: String
    investmentAccountType: InvestmentAccountType
    link: StatementLink
    * month: BigDecimal
    s3Filename: String
    startDate: OasAnyTypeNotMapped
    * statementType: StatementType
    updatedAt: OasAnyTypeNotMapped
    uploaded: Boolean
    * year: BigDecimal
}

entity StatementLink {
    * downloadUrl: String
    * url: String
}

entity StatementType {
}

entity Stock {
    * lastClosePrice: BigCurrencyAmount
    * lastUpdatedAt: OasAnyTypeNotMapped
    longName: String
    * marketCap: OasAnyTypeNotMapped
    * openPrice: BigCurrencyAmount
    * securityHeadlines: List<SecurityHeadline>
    * securityProfile: SecurityProfile
    * shortName: String
    * symbol: OasAnyTypeNotMapped
    * type: SecurityType
    * volume: OasAnyTypeNotMapped
    * week52High: BigCurrencyAmount
    * week52Low: BigCurrencyAmount
}

entity SubcategoryMessage {
    body: String
    ctaText: String
    * id: String
    title: String
    url: String
}

entity Submission {
    * bank: BankName
    * created: OasAnyTypeNotMapped
    * key: String
    * linkedAccountId: String
    * status: SubmissionStatus
    * updated: OasAnyTypeNotMapped
}

entity SubmissionError {
    errors: List<String>
}

entity SubmissionStatus {
}

entity SubmitBankFeeNegotiationInput {
    * linkedAccountId: String
}

entity SubmitBankFeeNegotiationResponse {
    * message: String
    * status: String
}

entity SubmitBankFeeNegotiationResult {
    * message: String
    * status: String
}

entity SubmitSpendTransactionsDisputeInput {
    * cardNumber: String
    * disputeReason: String
    * eSignature: String
    * merchantInfo: String
    * message: String
    * selectedTransactions: List<SpendTransactionsInput>
    * spendCardDetails: String
}

entity SubmittableSwitch {
    requiresEmployerMailingAddress: Boolean
    requiresNonSsnEmployeeId: Boolean
    requiresSsnLastFour: Boolean
    * source: SwitchSource
    * type: SwitchType
    * vendorTargetId: String
}

entity SubscribeToTierInput {
    feedback: String
    * tierId: String
    * tierPriceId: String
    * userId: String
}

entity SubscribeToTierResult {
    * message: String
    * validTierPrices: List<TierPrice>
    * validTiers: List<Tier>
    activePromotion: Promotion
    * createdAt: OasAnyTypeNotMapped
    createdBy: TierSubscriptionCreatedBy
    * id: String
    migration: SubscriptionMigration
    migrationId: String
    offer: Offer
    offerExpiresAt: OasAnyTypeNotMapped
    promotionAppliedAt: OasAnyTypeNotMapped
    promotionExpiresAt: OasAnyTypeNotMapped
    * status: TierSubscriptionStatus
    * tier: Tier
    * tierPrice: TierPrice
    transition: TierSubscriptionTransition
    * updatedAt: OasAnyTypeNotMapped
}

entity SubscribeUserToTierByProductKeyInput {
    createdBy: String
    effectiveAt: OasAnyTypeNotMapped
    * productKey: ProductKey
    tierGroupId: String
}

entity SubscribeUserToTierInput {
    createdBy: String
    * tierPriceId: String
}

entity SubscribeUserToTierResult {
    activePromotion: Promotion
    * createdAt: OasAnyTypeNotMapped
    createdBy: TierSubscriptionCreatedBy
    * id: String
    migration: SubscriptionMigration
    migrationId: String
    offer: Offer
    offerExpiresAt: OasAnyTypeNotMapped
    promotionAppliedAt: OasAnyTypeNotMapped
    promotionExpiresAt: OasAnyTypeNotMapped
    * status: TierSubscriptionStatus
    * tier: Tier
    * tierPrice: TierPrice
    transition: TierSubscriptionTransition
    * updatedAt: OasAnyTypeNotMapped
    * actions: List<TierDowngradeAction>
    * message: String
}

entity SubscriberIneligibleError {
    * message: String
}

entity SubscriptionMigration {
    * createdAt: OasAnyTypeNotMapped
    * description: String
    * effectiveAt: OasAnyTypeNotMapped
    * fromTier: Tier
    * id: String
    * toTier: Tier
    updatedAt: OasAnyTypeNotMapped
}

entity SubscriptionMigrationInvalidError {
    * message: String
}

entity SubscriptionMigrationWaiver {
    * accepted: Boolean
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * migration: SubscriptionMigration
    * reason: String
    updatedAt: OasAnyTypeNotMapped
}

entity SubscriptionTransitionAction {
}

entity Suitability {
    answer: String
    answerId: String
    pickerId: String
    questionId: String
}

entity SuitabilityAnswer {
    * answer: String
    * id: String
}

entity SuitabilityInput {
    * answerId: String
    * questionId: String
}

entity SuitabilityPortfolio {
    * description: String
    * id: String
    * name: String
}

entity SuitabilityQuestion {
    * answers: List<SuitabilityAnswer>
    * defaultAnswer: SuitabilityAnswer
    * id: String
    * pickerId: String
    * placeholder: String
}

entity SuitabilitySuitabilityAnswer {
    description: String
    * id: String
    * key: String
    summary: String
    * text: String
}

entity SuitabilitySuitabilityInput {
    * answerId: String
    * questionId: String
}

entity SuitabilitySuitabilityQuestion {
    defaultAnswer: SuitabilitySuitabilityAnswer
    * id: String
    * key: String
    * possibleAnswers: List<SuitabilitySuitabilityAnswer>
    * text: String
}

entity SuitabilitySuitabilityResponse {
    answer: SuitabilitySuitabilityAnswer
    * question: SuitabilitySuitabilityQuestion
}

entity SuitabilityUpdateSuitabilityResult {
    recommendedPortfolio: SuitabilityPortfolio
    * suitabilityResponses: List<SuitabilitySuitabilityResponse>
}

entity SummaryItem {
    * amount: CurrencyAmount
    * title: String
}

entity SupportArticle {
    * author: SupportAuthor
    * body: String
    * category: SupportCategory
    * editedAt: Date
    * id: String
    private: Boolean
    promoted: Boolean
    * sectionId: String
    * title: String
}

entity SupportAuthor {
    * id: String
    * name: String
    * photo: SupportAuthorPhoto
}

entity SupportAuthorPhoto {
    * contentUrl: String
}

entity SupportCategory {
    * description: String
    * id: String
    * name: String
}

entity SupportSection {
    * articles: List<SupportArticle>
    * category: SupportCategory
    * categoryId: String
    * id: String
    * name: String
}

entity SupportTicket {
    * description: String
    * id: String
    * subject: String
    * url: String
}

entity SupportTicketForm {
    active: Boolean
    createdAt: OasAnyTypeNotMapped
    displayName: String
    * id: String
    isDefault: Boolean
    ticketFields: List<SupportTicketFormField>
    updatedAt: OasAnyTypeNotMapped
}

entity SupportTicketFormField {
    active: Boolean
    createdAt: OasAnyTypeNotMapped
    customFieldOptions: List<CustomFieldOption>
    description: String
    * id: String
    name: String
    required: Boolean
    systemFieldOptions: List<CustomFieldOption>
    * title: String
    * type: String
    updatedAt: OasAnyTypeNotMapped
}

entity SupportTicketResponse {
    * description: String
    * id: String
    * subject: String
    * url: String
    errorCodes: List<String>
}

entity SupportTicketWithCustomFieldsResponse {
    * description: String
    * id: String
    * subject: String
    * url: String
    errors: List<String>
}

entity SupportUser {
    email: String
    name: String
}

entity Sweepstake {
    * createdAt: OasAnyTypeNotMapped
    id: String
    * name: String
    * updatedAt: OasAnyTypeNotMapped
}

entity SweepstakesSubmission {
    email: OasAnyTypeNotMapped
    * name: String
    * reason: String
    * sweepstakesId: String
}

entity SwitchInterface {
    * source: SwitchSource
    * type: SwitchType
}

entity SwitchMethod {
}

entity SwitchPayloadInterface {
    * userSwitch: UserSwitch
}

entity SwitchSource {
}

entity SwitchState {
}

entity SwitchStatus {
}

entity SwitchType {
}

entity SystemCardLockedSpendAlert {
    * type: String
    * userId: String
}

entity TaxWithholdingAmounts {
    * federalWithholdingAmount: MonetaryAmount
    * stateWithholdingAmount: MonetaryAmount
}

entity TfaOptions {
    email: List<String>
    notification: List<String>
    phone: List<String>
    question: List<String>
}

entity TfaStatus {
}

entity TfaType {
}

entity Tier {
    * active: Boolean
    * description: String
    * id: String
    * key: TierKey
    * name: String
    products: List<Product>
    * tierGroupId: String
    * tierPrice: TierPrice
}

entity TierDowngradeAction {
    * key: TierDowngradeActionKey
}

entity TierDowngradeActionKey {
}

entity TierDowngradeActionRequired {
    * actions: List<TierDowngradeAction>
}

entity TierGroup {
    * active: Boolean
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * preferredTierId: String
    * tierOptions: List<TierOption>
    * updatedAt: OasAnyTypeNotMapped
    winbackTierOption: TierOption
}

entity TierKey {
}

entity TierOption {
    * preferredTierPrice: TierPrice
    * tier: Tier
    * tierPrices: List<TierPrice>
}

entity TierOptionByTierPriceIdResult {
    * preferredTierPrice: TierPrice
    * tier: Tier
    * tierPrices: List<TierPrice>
    * message: String
}

entity TierPrice {
    * amount: CurrencyAmount
    * billingFrequency: BillingFrequency
    * id: String
    * tierId: String
}

entity TierProduct {
    * key: ProductKey
}

entity TierSubscription {
    activePromotion: Promotion
    * createdAt: OasAnyTypeNotMapped
    createdBy: TierSubscriptionCreatedBy
    * id: String
    migration: SubscriptionMigration
    migrationId: String
    offer: Offer
    offerExpiresAt: OasAnyTypeNotMapped
    promotionAppliedAt: OasAnyTypeNotMapped
    promotionExpiresAt: OasAnyTypeNotMapped
    * status: TierSubscriptionStatus
    * tier: Tier
    * tierPrice: TierPrice
    transition: TierSubscriptionTransition
    * updatedAt: OasAnyTypeNotMapped
}

entity TierSubscriptionAlreadyDeactivated {
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * updatedAt: OasAnyTypeNotMapped
}

entity TierSubscriptionConnection {
    * edges: List<TierSubscription>
    * pageInfo: TierSubscriptionPageInfo
}

entity TierSubscriptionCreatedBy {
}

entity TierSubscriptionDeactivationReason {
}

entity TierSubscriptionForUser {
    activePromotion: Promotion
    * createdAt: OasAnyTypeNotMapped
    createdBy: TierSubscriptionCreatedBy
    * id: String
    migration: SubscriptionMigration
    migrationId: String
    offer: Offer
    offerExpiresAt: OasAnyTypeNotMapped
    promotionAppliedAt: OasAnyTypeNotMapped
    promotionExpiresAt: OasAnyTypeNotMapped
    * status: TierSubscriptionStatus
    * tier: Tier
    * tierPrice: TierPrice
    transition: TierSubscriptionTransition
    * updatedAt: OasAnyTypeNotMapped
    * message: String
}

entity TierSubscriptionNotFound {
    * message: String
}

entity TierSubscriptionPageInfo {
    cursor: String
    * hasNext: Boolean
}

entity TierSubscriptionStatus {
}

entity TierSubscriptionTransition {
    desiredTier: Tier
    desiredTierPrice: TierPrice
    * initiatedAt: OasAnyTypeNotMapped
    subscriptionDeactivationReason: TierSubscriptionDeactivationReason
    * transitionAction: SubscriptionTransitionAction
}

entity TierSubscriptionUnsubscribed {
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * updatedAt: OasAnyTypeNotMapped
}

entity TimestampsInterface {
    * createdAt: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
}

entity Tip {
    * body: String
    image: Image
    title: String
}

entity Toggle {
    * id: String
    invalid: Boolean
    * value: Boolean
}

entity TokenExpiredException {
    * message: String
}

entity TopEmployer {
    * employerName: String
    * employerSwitchType: SwitchType
    * logo: String
    onlineSwitchUrl: String
}

entity TopEmployerPayload {
    * topEmployersList: List<TopEmployer>
}

entity TopHolding {
    * marketValue: BigCurrencyAmount
    numberOfShares: OasAnyTypeNotMapped
    * securityName: String
    * sharePercentage: OasAnyTypeNotMapped
    symbol: OasAnyTypeNotMapped
}

entity TotalAmounts {
    * totalContributedAmount: CurrencyAmount
    * totalDepositedAmount: CurrencyAmount
}

entity TradingSector {
}

entity TransactionCategory {
}

entity TransactionResult {
    * id: String
}

entity Transfer {
    * amount: CurrencyAmount
    canceledAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    * from: TransferableAccount
    * id: String
    * state: TransferState
    * to: TransferableAccount
    * updatedAt: OasAnyTypeNotMapped
}

entity TransferState {
}

entity TransferableAccount {
    accountNumberMasked: String
    balance: CurrencyAmount
    externalSource: ExternalSource
    * id: String
    * name: String
    * type: TransferableAccountTypeEnum
}

entity TransferableAccountTypeEnum {
}

entity TransferableFrom {
    * from: TransferableAccount
}

entity TransferableTo {
    max: CurrencyAmount
    min: CurrencyAmount
    * to: TransferableAccount
}

entity UnableToCancelCheckError {
    * requestId: String
}

entity UnauthorizedException {
    * message: String
}

entity UnblockDeviceInput {
    * deviceId: String
}

entity UnblockDeviceResult {
    appVersion: String
    * createdAt: OasAnyTypeNotMapped
    firstLoginAt: OasAnyTypeNotMapped
    * id: String
    * isBlocked: Boolean
    lastLoginAt: OasAnyTypeNotMapped
    * updatedAt: OasAnyTypeNotMapped
    userAgent: String
    * userId: String
    * message: String
}

entity UnknownProvider {
    * cta: Cta
    * image: Image
    subtitle: String
}

entity UnlockBankCardPayload {
    bankCard: BankCard
}

entity UnrecoverableLinkedAccountError {
    * linkedAccountId: String
}

entity UnsubscribeUserFromTierInput {
    createdBy: String
}

entity UnsubscribeUserFromTierResult {
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * updatedAt: OasAnyTypeNotMapped
    * actions: List<TierDowngradeAction>
}

entity UnverifiedBeneficiarySsnAlert {
    * beneficiary: Beneficiary
    * type: String
    * userId: String
}

entity UnverifiedBeneficiarySsnAlertItem {
    * beneficiary: Beneficiary
    * type: String
    * userId: String
}

entity UpdateAccountPointsRuleInput {
    details: String
    * milestoneID: String
    summary: String
}

entity UpdateAccountPointsRuleResult {
    * message: String
    * details: String
    * milestoneID: String
    * pointsPerCompletion: BigDecimal
    summary: String
}

entity UpdateAccountPortfolioInput {
    * investmentAccountId: String
    * riskLevel: PortfolioRiskLevel
    * theme: PortfolioTheme
}

entity UpdateAccountPortfolioResponse {
    message: String
    beneficiary: Beneficiary
    beneficiaryId: String
    * cashBalance: MonetaryAmount
    closedAt: OasAnyTypeNotMapped
    * createdAt: OasAnyTypeNotMapped
    currentBalance: MonetaryAmount
    * currentBalanceWithPending: MonetaryAmount
    * hasInvested: Boolean
    * id: String
    * investmentAccountType: InvestmentAccountType
    * name: String
    * netInvestments: MonetaryAmount
    * pendingBalance: MonetaryAmount
    * pendingWithdrawals: List<Withdrawal>
    performance: Performance
    portfolio: Portfolio
    * product: InvestmentProduct
    recommendedPortfolio: Portfolio
    recurringInvestmentSettings: RecurringInvestmentSettings
    * requirements: AccountRequirements
    * status: InvestmentAccountStatus
    * summary: InvestmentAccountSummary
    * totalBonds: MonetaryAmount
    * totalEquities: MonetaryAmount
    transferability: InvestmentAccountTransferability
    * type: String
    * updatedAt: OasAnyTypeNotMapped
    * userId: String
    yearToDateReturn: MarketReturn
}

entity UpdateAuthEmailInput {
    * email: OasAnyTypeNotMapped
}

entity UpdateAuthEmailResult {
    defaultAuthenticator: Authenticator
    email: OasAnyTypeNotMapped
    emailVerifiedAt: OasAnyTypeNotMapped
    phoneNumber: String
    phoneNumberVerifiedAt: OasAnyTypeNotMapped
    requireLoginChallenge: Boolean
    * userId: String
    * message: String
}

entity UpdateAuthPhoneNumberInput {
    * phoneNumber: OasAnyTypeNotMapped
}

entity UpdateAuthPhoneNumberResult {
    defaultAuthenticator: Authenticator
    email: OasAnyTypeNotMapped
    emailVerifiedAt: OasAnyTypeNotMapped
    phoneNumber: String
    phoneNumberVerifiedAt: OasAnyTypeNotMapped
    requireLoginChallenge: Boolean
    * userId: String
    * message: String
}

entity UpdateBankCardPinInput {
    * newPin: OasAnyTypeNotMapped
}

entity UpdateBankCardPinPayload {
    bankCard: BankCard
}

entity UpdateBeneficiaryInfoResult {
    addresses: List<Address>
    avatarUrl: String
    * createdAt: OasAnyTypeNotMapped
    * custodianId: String
    * dateOfBirth: String
    deactivatedAt: OasAnyTypeNotMapped
    email: OasAnyTypeNotMapped
    * firstName: String
    * id: String
    * lastName: String
    phoneNumbers: List<Phone>
    * ssnPresent: Boolean
    * updatedAt: OasAnyTypeNotMapped
    message: String
}

entity UpdateCoverageResponse {
    * success: Boolean
}

entity UpdateLinkedAccountInput {
    * linkSessionId: String
}

entity UpdateMilestoneAccountLevelDefinitionInput {
    activeBackgroundUrl: String
    activeForegroundUrl: String
    * id: BigDecimal
    inactiveBackgroundUrl: String
}

entity UpdateMilestoneAccountLevelDefinitionResult {
    * message: String
    * activeBackground: Image
    * activeForeground: Image
    * id: BigDecimal
    * inactiveBackground: Image
    * max: BigDecimal
    * min: BigDecimal
}

entity UpdateMilestoneChallengeDefinitionInput {
    details: String
    * id: String
    logo: ImageInput
    * name: String
}

entity UpdateMilestoneChallengeDefinitionResult {
    details: String
    * endsAt: OasAnyTypeNotMapped
    * id: String
    logo: Image
    * milestones: List<MilestoneDefinition>
    * name: String
    * startsAt: OasAnyTypeNotMapped
    * message: String
}

entity UpdateMilestoneChallengePointsRuleInput {
    * challengeID: String
    earningDetails: String
    earningSummary: String
    * milestoneID: String
}

entity UpdateMilestoneChallengePointsRuleResult {
    * challengeID: String
    * details: String
    * maxPointsAllowed: BigDecimal
    * pointsPerCompletion: BigDecimal
    summary: String
    * message: String
}

entity UpdateMilestoneDefinitionInput {
    * id: String
    inactiveLogo: ImageInput
    logo: ImageInput
    name: String
}

entity UpdateMilestoneDefinitionResult {
    accountPointsRule: AccountPointsRule
    arg1DateTime: OasAnyTypeNotMapped
    arg1Int: BigDecimal
    challengePointsRule: MilestoneChallengePointsRule
    * id: String
    inactiveLogo: Image
    * isRepeatable: Boolean
    * logo: Image
    * name: String
    * rule: MilestoneRule
    * theme: MilestoneTheme
    * message: String
}

entity UpdateRecommendedCoverageResponse {
    * success: Boolean
}

entity UpdateReferralRewardError {
    * message: String
}

entity UpdateReferralRewardResponse {
    advocateUserId: String
    * status: ReferralRewardStatus
    * message: String
}

entity UpdateUserInfoResult {
    address1: String
    address2: String
    allocationProfileId: String
    city: String
    closedAt: OasAnyTypeNotMapped
    * currentBalance: BigDecimal
    dob: String
    * email: String
    employer: String
    firstName: String
    fundingSource: FundingSource
    fundingSourceCanChange: Boolean
    fundingSourceChangeRequiresApproval: Boolean
    investmentAccounts: List<InvestmentAccount>
    lastName: String
    occupation: String
    pendingBalance: BigDecimal
    phoneNumber: String
    pinCreated: Boolean
    portfolio: Portfolio
    recommendedAllocationProfileId: String
    registrationComplete: Boolean
    registrationCompletedAt: OasAnyTypeNotMapped
    sourceId: String
    state: OasAnyTypeNotMapped
    * uploads: List<UserUpload>
    usCitizen: Boolean
    * uuid: String
    verified: Boolean
    zip: String
    * message: String
}

entity UploadCheckInput {
    * checkImage: CheckImage
    * sessionToken: String
}

entity UploadCheckPayload {
    * sessionToken: String
}

entity UploadDocumentsInput {
    * documentRequestId: String
    * documentType: DocumentType
    * documents: List<OasAnyTypeNotMapped>
}

entity UploadFailedError {
    * message: String
}

entity UploadUnsolicitedDocumentsInput {
    * documentType: DocumentType
    * documents: List<OasAnyTypeNotMapped>
    requestKey: String
    status: DocumentStatus
}

entity UsStateCodes {
}

entity User {
    address1: String
    address2: String
    allocationProfileId: String
    city: String
    closedAt: OasAnyTypeNotMapped
    * currentBalance: BigDecimal
    dob: String
    * email: String
    employer: String
    firstName: String
    fundingSource: FundingSource
    fundingSourceCanChange: Boolean
    fundingSourceChangeRequiresApproval: Boolean
    investmentAccounts: List<InvestmentAccount>
    lastName: String
    occupation: String
    pendingBalance: BigDecimal
    phoneNumber: String
    pinCreated: Boolean
    portfolio: Portfolio
    recommendedAllocationProfileId: String
    registrationComplete: Boolean
    registrationCompletedAt: OasAnyTypeNotMapped
    sourceId: String
    state: OasAnyTypeNotMapped
    * uploads: List<UserUpload>
    usCitizen: Boolean
    * uuid: String
    verified: Boolean
    zip: String
}

entity UserAlert {
    * description: String
    * id: String
    * key: String
    metadata: String
    * title: String
    * type: String
    * userId: String
}

entity UserAlertsItem {
    * type: String
    * userId: String
}

entity UserAlertsResponse {
    * requestedDocumentType: DocumentType
    * type: String
    * userId: String
    * description: String
    * id: String
    * key: String
    metadata: String
    * title: String
}

entity UserCardLockedSpendAlert {
    * type: String
    * userId: String
}

entity UserClosedException {
    message: String
    userId: String
}

entity UserCredentialsNotFoundException {
    * message: String
}

entity UserDailyChange {
    accountChange: BigDecimal
    accountPercent: BigDecimal
    change: BigDecimal
    marketChange: BigDecimal
    marketPercent: BigDecimal
    percentage: BigDecimal
}

entity UserInvestmentAccountReopenCheck {
    * accountReopenRequestId: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    * investmentAccountId: String
    * passed: Boolean
    * reopenCheckType: InvestmentAccountReopenCheck
    * updatedAt: OasAnyTypeNotMapped
    * userUuid: String
}

entity UserLockedException {
    * message: String
}

entity UserNotFound {
    userId: String
}

entity UserNotFoundException {
    message: String
    userId: String
}

entity UserNotVerifiedException {
    message: String
}

entity UserReopenLockedException {
    * lockedAt: OasAnyTypeNotMapped
    userId: String
}

entity UserReopenSuspendedException {
    * suspendedAt: OasAnyTypeNotMapped
    suspendedReason: String
    userId: String
}

entity UserRoundUps {
    * total: BigDecimal
    * waiting: BigDecimal
}

entity UserStatus {
    * closed: Boolean
    closedAt: OasAnyTypeNotMapped
    * registrationComplete: Boolean
    registrationCompleteAt: OasAnyTypeNotMapped
    * userId: String
    * verified: Boolean
    verifiedAt: OasAnyTypeNotMapped
}

entity UserSuspendedException {
    * message: String
}

entity UserSwitch {
    * createdAt: String
    * id: String
    * isComplete: Boolean
    * status: SwitchStatus
    * switchType: SwitchType
    * updatedAt: String
    * userId: String
    vendorSwitchId: String
}

entity UserTotals {
    totalDeposits: BigDecimal
    totalDividends: BigDecimal
    totalFees: BigDecimal
    totalFoundMoney: BigDecimal
    totalGainLoss: BigDecimal
    totalInvested: BigDecimal
    totalOtherRewards: BigDecimal
    totalReferrals: BigDecimal
    totalWithdrawn: BigDecimal
}

entity UserUpload {
    * createdAt: OasAnyTypeNotMapped
    documentType: String
    * id: String
}

entity UserV2 {
    closedAt: OasAnyTypeNotMapped
    * email: String
    * uuid: String
}

entity VerifyCheckPaymentRecipientAddressInputType {
    * recipient: CheckPaymentRecipientInput
    * recipientAddress: CheckPaymentAddressInput
}

entity VerifyCheckPaymentRecipientAddressResult {
    * recipient: CheckPaymentRecipient
    * recipientAddress: CheckPaymentAddress
    errorMessage: String
    * requestId: String
}

entity VerifyDeviceInput {
    * deviceId: String
}

entity VerifyDeviceResult {
    * alternateAuthenticators: List<AuthenticatorInfo>
    * id: String
    * maskedPhoneNumber: String
    * maskedEmail: String
    * message: String
}

entity VerifyPasswordsInput {
    * newPassword: String
    * oldPassword: String
}

entity VerifyPasswordsResult {
    * isValid: Boolean
    * message: String
}

entity VerifyPasswordsSuccess {
    * isValid: Boolean
}

entity VersionMismatchException {
    latestVersion: String
}

entity W9DocumentRequestedUserAlert {
    * requestedDocumentType: DocumentType
    * type: String
    * userId: String
}

entity Webhooks {
    * plaid: String
}

entity WebviewLinkSession {
    * url: OasAnyTypeNotMapped
}

entity WidgetReferenceType {
}

entity Withdrawal {
    * amount: BigDecimal
    * createdAt: OasAnyTypeNotMapped
    * id: String
    * presentableWithdrawalStatus: PresentableWithdrawalStatus
}

entity WithholdingDefaults {
    * federalWithholdingPercentage: BigDecimal
    * showFederalWithholdingField: Boolean
    * showStateWithholdingField: Boolean
    * stateWithholdingPercentage: BigDecimal
}

entity WithholdingEstimates {
    * estimatedCustomerAmount: MonetaryAmount
    * estimatedFederalWithholdingAmount: MonetaryAmount
    * estimatedStateWithholdingAmount: MonetaryAmount
    * estimatedTaxableEarnings: MonetaryAmount
    * estimatedTotalWithholdingAmount: MonetaryAmount
}

entity YearLaterReport {
    * accountBalance: BigDecimal
    * accountCreationDate: String
    * accountPerformance: BigDecimal
    * accountType: String
    firstDepositAmountForYear: BigDecimal
    firstDepositDateForYear: String
    * recurringContributionAmount: BigDecimal
    recurringContributionFrequency: InvestmentFrequency
    * totalDeposits: BigDecimal
    * totalDepositsForYear: BigDecimal
    * totalDividends: BigDecimal
    * totalNetReturns: BigDecimal
    * totalWithdrawals: BigDecimal
    * userAge: BigDecimal
}


MilestoneHubAccount -- DiscreteMilestoneProgress : accountPointsProgress
MilestoneHubAccount -- DiscreteMilestoneProgress : milestoneProgress
BankCardReissue -- BankCardRequest : bankCardRequest
BankCardReissue -- ReissueBankCardEligibility : reissueBankCardEligibility
SpendBillPayItem -- CurrencyAmount : amount
MutationSetLinkingErrorArgs -- SetLinkingErrorInput : linkingErrorCode
RoundUpAccount -- RoundUpProfile : roundUpProfile
RoundUpAccount -- "0..*" RoundUp : roundUps
ContactSubcategory -- "0..*" ContactFaq : faqs
ContactSubcategory -- SubcategoryMessage : message
LifeCalculatorQuestion -- Tip : tip
MutationUpdateBeneficiaryInfoArgs -- BeneficiaryInfoInput : input
UpdateMilestoneAccountLevelDefinitionResult -- Image : activeBackground
UpdateMilestoneAccountLevelDefinitionResult -- Image : activeForeground
UpdateMilestoneAccountLevelDefinitionResult -- Image : inactiveBackground
QueryAllSupportArticlesArgs -- AllSupportArticlesFilterInput : filter
AuthProfile -- Authenticator : defaultAuthenticator
MutationAddActionToMilestoneAchievementActionRuleArgs -- AddActionToMilestoneAchievementActionRuleInput : addActionToRuleInput
Employer -- AbstractSwitch : switch
CoverageShopWidget -- "0..*" CarouselOffer : offers
CoverageShopWidget -- Cta : cta
CoverageShopWidget -- Image : icon
QueryAllTransferableToArgs -- AllTransferableToInput : input
FoundMoneyOfferGroup -- "0..*" FoundMoneyOffer : offers
MutationCreateBeneficiaryArgs -- BeneficiaryInput : input
MutationStartSubmittableSwitchArgs -- StartSubmittableSwitchInput : input
ProtectHomeWidget -- "0..*" Article : articles
ProtectHomeWidget -- "0..*" InsuranceSection : widgets
ProtectHomeWidget -- "0..*" HomeIcon : icons
ProtectHomeWidget -- Cta : cta
ProtectHomeWidget -- Image : image
SupportArticle -- SupportAuthor : author
SupportArticle -- SupportCategory : category
LaterWithdrawalItem -- CurrencyAmount : amount
LaterWithdrawalItem -- LaterWithholdingValues : federalWithholdings
LaterWithdrawalItem -- LaterWithholdingValues : stateWithholdings
CoverageGrow -- Cta : cta
CoverageGrow -- Image : image
LifeQuoteInput -- QuoteUserMetadata : userMetadata
VerifyCheckPaymentRecipientAddressInputType -- CheckPaymentRecipientInput : recipient
VerifyCheckPaymentRecipientAddressInputType -- CheckPaymentAddressInput : recipientAddress
QuerySmartDepositMetadataArgs -- SmartDepositMetadataInput : smartDepositMetadataInput
ContactCategory -- "0..*" ContactSubcategory : subcategories
Recommendations -- Cta : cta
Recommendations -- Image : image
Recommendations -- "0..*" BriefInsuranceSection : widgets
FoundMoneyOfferCategory -- FoundMoneyOffer : featuredOffer
FoundMoneyOfferCategory -- "0..*" FoundMoneyOffer : offers
SuitabilityQuestion -- "0..*" SuitabilityAnswer : answers
SuitabilityQuestion -- SuitabilityAnswer : defaultAnswer
SupportTicketForm -- "0..*" SupportTicketFormField : ticketFields
MutationConfigureSplitDepositDirectDepositIntentSettingArgs -- ConfigureSplitDepositDirectDepositIntentSettingInput : input
MutationCloseInvestmentAccountArgs -- CloseInvestmentAccountInput : input
MutationUpdateSuitabilityArgs -- "0..*" SuitabilitySuitabilityInput : suitabilityInput
BankAccount -- CurrencyAmount : availableBalance
BankAccount -- CurrencyAmount : balance
BankAccount -- CurrencyAmount : pendingBalance
BankAccount -- BankAccountRequirements : requirements
ReferralCampaign -- "0..*" ReferralReward : advocateRewards
ReferralCampaign -- "0..*" ReferralEvent : events
ReferralCampaign -- "0..*" ReferralReward : friendRewards
MutationChangePasswordArgs -- SecurityAnswer : securityAnswer
Tip -- Image : image
MutationCreateOutsideContributionCheckoutCartArgs -- CreateOutsideContributionCheckoutCartInput : input
QueryWithholdingDefaultsArgs -- CurrencyAmountInput : withdrawalAmount
AuthChallenge -- "0..*" AuthenticatorInfo : alternateAuthenticators
OpenEarlyAccountResult -- Beneficiary : beneficiary
OpenEarlyAccountResult -- MonetaryAmount : cashBalance
OpenEarlyAccountResult -- MonetaryAmount : currentBalance
OpenEarlyAccountResult -- MonetaryAmount : currentBalanceWithPending
OpenEarlyAccountResult -- MonetaryAmount : netInvestments
OpenEarlyAccountResult -- MonetaryAmount : pendingBalance
OpenEarlyAccountResult -- "0..*" Withdrawal : pendingWithdrawals
OpenEarlyAccountResult -- Performance : performance
OpenEarlyAccountResult -- Portfolio : portfolio
OpenEarlyAccountResult -- Portfolio : recommendedPortfolio
OpenEarlyAccountResult -- RecurringInvestmentSettings : recurringInvestmentSettings
OpenEarlyAccountResult -- AccountRequirements : requirements
OpenEarlyAccountResult -- InvestmentAccountSummary : summary
OpenEarlyAccountResult -- MonetaryAmount : totalBonds
OpenEarlyAccountResult -- MonetaryAmount : totalEquities
OpenEarlyAccountResult -- InvestmentAccountTransferability : transferability
OpenEarlyAccountResult -- MarketReturn : yearToDateReturn
SpendTransactionsDisputeCustomersResponse -- "0..*" SpendDisputesResponse : disputes
ConfigureSplitDepositDirectDepositSettingResult -- SplitDepositDirectDepositSetting : setting
AddressDeliverabilityVerified -- AddressDeliverabilityAdditionalInfo : additionalInfo
QueryActionFeedArgs -- ActionCardsInput : input
CheckPaymentEdge -- CheckPayment : node
EarnOfferQueryPage -- "0..*" EarnOffer : earnOffers
EarnOfferQueryPage -- EarnPageInfo : pageInfo
SpendDisputesResponse -- "0..*" SpendTransactionsDisputeQuestions : questions
SpendDisputesResponse -- "0..*" SpendTransactionsResponse : transactions
InitiateTransferPayload -- Transfer : transfer
MutationCreateMilestoneAchievementActionRuleArgs -- CreateMilestoneAchievementActionRuleInput : createRuleInput
MutationUpdateSecurityQuestionArgs -- SecurityQuestionInput : input
SupportAuthor -- SupportAuthorPhoto : photo
MutationSubmitSpendTransactionsDisputeArgs -- SubmitSpendTransactionsDisputeInput : input
UpdateMilestoneDefinitionResult -- AccountPointsRule : accountPointsRule
UpdateMilestoneDefinitionResult -- MilestoneChallengePointsRule : challengePointsRule
UpdateMilestoneDefinitionResult -- Image : inactiveLogo
UpdateMilestoneDefinitionResult -- Image : logo
UpdateMilestoneDefinitionResult -- MilestoneRule : rule
CoreLocalFoundMoneyItem -- CurrencyAmount : amount
SwitchPayloadInterface -- UserSwitch : userSwitch
BankCardRequest -- BankCardRequestMailingAddress : mailingAddress
ScheduleRecurringTransferInput -- RecurrenceRuleInput : recurrenceRule
ScheduleRecurringTransferInput -- RecurringTransferEventInput : transferEvent
CheckPayment -- CurrencyAmount : amount
CheckPayment -- CheckPaymentAddress : recipientAddress
SpendAtmsInput -- SpendAtmsCoordinateInput : searchCoordinate
UpdateAuthPhoneNumberResult -- Authenticator : defaultAuthenticator
MutationRemoveFavoritePartnerOffersArgs -- FavoritePartnerOfferInput : input
UnlockBankCardPayload -- BankCard : bankCard
SpendTransactionsDisputeResponse -- SpendTransactionsDisputeCustomersResponse : customers
AuthenticateNegotiationStatusResult -- AutomationError : operationError
AuthenticateNegotiationStatusResult -- TfaOptions : tfaOptions
EarlyDividendsItem -- CurrencyAmount : amount
CorePartnerRewardItem -- CurrencyAmount : amount
BankTransaction -- CurrencyAmount : amount
BankTransaction -- BankCard : bankCard
MutationStartOnlineSwitchArgs -- StartOnlineSwitchInput : input
CreateOutsideContributionCheckoutCartResult -- OutsideContributionCode : code
PastEarlySummary -- CurrencyAmount : contributions
PastEarlySummary -- CurrencyAmount : dividends
PastEarlySummary -- CurrencyAmount : netReturns
PastEarlySummary -- CurrencyAmount : withdrawals
EvaluateCheckDepositPayload -- CurrencyAmount : ocrAmount
EvaluateCheckDepositPayload -- "0..*" DepositRiskFactor : riskFactors
ReportBankCardLostStolenPayload -- BankCard : bankCard
MutationSetPortfolioArgs -- SetPortfolioInput : input
CancelInvestmentAccountClosureRequestResult -- Beneficiary : beneficiary
CancelInvestmentAccountClosureRequestResult -- MonetaryAmount : cashBalance
CancelInvestmentAccountClosureRequestResult -- MonetaryAmount : currentBalance
CancelInvestmentAccountClosureRequestResult -- MonetaryAmount : currentBalanceWithPending
CancelInvestmentAccountClosureRequestResult -- MonetaryAmount : netInvestments
CancelInvestmentAccountClosureRequestResult -- MonetaryAmount : pendingBalance
CancelInvestmentAccountClosureRequestResult -- "0..*" Withdrawal : pendingWithdrawals
CancelInvestmentAccountClosureRequestResult -- Performance : performance
CancelInvestmentAccountClosureRequestResult -- Portfolio : portfolio
CancelInvestmentAccountClosureRequestResult -- Portfolio : recommendedPortfolio
CancelInvestmentAccountClosureRequestResult -- RecurringInvestmentSettings : recurringInvestmentSettings
CancelInvestmentAccountClosureRequestResult -- AccountRequirements : requirements
CancelInvestmentAccountClosureRequestResult -- InvestmentAccountSummary : summary
CancelInvestmentAccountClosureRequestResult -- MonetaryAmount : totalBonds
CancelInvestmentAccountClosureRequestResult -- MonetaryAmount : totalEquities
CancelInvestmentAccountClosureRequestResult -- InvestmentAccountTransferability : transferability
CancelInvestmentAccountClosureRequestResult -- MarketReturn : yearToDateReturn
ContributionAbilityByYear -- "0..*" ContributionAbility : contributionAbilities
MilestoneThemeGroupContent -- "0..*" Milestone : contents
MilestoneThemeGroupContent -- DiscreteMilestoneProgress : groupCompletion
MilestoneThemeGroupContent -- Image : logo
MilestoneThemeGroupContent -- AccountPoints : accountPoints
MilestoneThemeGroupContent -- ChallengePointsEarned : challengePoints
MilestoneThemeGroupContent -- Destination : destination
MilestoneThemeGroupContent -- EducationTip : educationTip
MilestoneThemeGroupContent -- MilestoneProgress : progress
MutationAuthenticateForFeeNegotiationChallengeArgs -- AuthenticateForFeeNegotiationChallengeInput : input
ConfigureSplitDepositDirectDepositIntentSettingInput -- "0..*" SplitDepositAllocationInput : allocations
ConfigureSplitDepositDirectDepositIntentSettingInput -- CurrencyAmountInput : estimatedPaycheckAmount
MutationSubscribeUserToTierArgs -- SubscribeUserToTierInput : input
InvalidTierPriceCombination -- Tier : tier
AccountRequirements -- "0..*" AccountRequirement : close
CoreReferralRewardItem -- CurrencyAmount : amount
TopEmployerPayload -- "0..*" TopEmployer : topEmployersList
ActivateBankCardPayload -- BankCard : bankCard
MutationSubmitBankFeeNegotiationArgs -- SubmitBankFeeNegotiationInput : input
TotalAmounts -- CurrencyAmount : totalContributedAmount
TotalAmounts -- CurrencyAmount : totalDepositedAmount
Disclaimer -- Cta : cta
Disclaimer -- Image : image
MutationCreateAccountPointsRuleArgs -- CreateAccountPointsRuleInput : createAccountPointsRuleInput
AuthenticateWithAppleResult -- "0..*" AuthenticatorInfo : alternateAuthenticators
RoundUpTypeEdge -- RoundUp : node
DocumentRequestEdge -- DocumentRequest : node
MutationUploadCheckArgs -- UploadCheckInput : input
QuerySplitDepositSettingsByUserIdArgs -- SplitDepositSettingsFilterInput : filter
Profile -- "0..*" Signature : signatures
MutationDeactivateTierSubscriptionArgs -- DeactivateTierSubscriptionInput : input
QueryPartnerOfferGroupArgs -- PartnerOfferGroupFilterInput : filter
PromotionFilterInput -- PromotionPresentInContextsFilterInput : presentInContexts
InsuranceCarousel -- "0..*" CarouselOffer : offers
JobsEducation -- "0..*" JobsArticle : articles
CreateMilestoneAccountLevelDefinitionResult -- Image : activeBackground
CreateMilestoneAccountLevelDefinitionResult -- Image : activeForeground
CreateMilestoneAccountLevelDefinitionResult -- Image : inactiveBackground
CoreAdjustmentItem -- CurrencyAmount : amount
MutationCreateDocumentUploadArgs -- CreateDocumentUploadInput : input
FoundMoneyOffer -- BackgroundImage : backgroundImage
FoundMoneyOffer -- CondensedSocialCopies : condensedSocialCopies
FoundMoneyOffer -- CtaDetails : ctaDetails
FoundMoneyOffer -- Owner : owner
CoreHoldingsTransferInItem -- CurrencyAmount : amount
SplitDepositDirectDepositIntentSetting -- "0..*" SplitDepositAllocation : allocations
SplitDepositDirectDepositIntentSetting -- "0..*" SplitDeposit : deposits
SplitDepositDirectDepositIntentSetting -- CurrencyAmount : estimatedPaycheckAmount
VerifyDeviceResult -- "0..*" AuthenticatorInfo : alternateAuthenticators
Etf -- "0..*" Holding : holdings
Etf -- InvestmentCategory : investmentCategories
Etf -- EtfPerformance : performance
CoverageUnknown -- Cta : cta
CoverageUnknown -- EducationSection : educationSection
CoverageUnknown -- Image : icon
CoverageUnknown -- Image : image
AuthenticateForFeeNegotiationStatus -- AutomationError : operationError
AuthenticateForFeeNegotiationStatus -- TfaOptions : tfaOptions
MutationSubscribeUserToTierByProductKeyArgs -- SubscribeUserToTierByProductKeyInput : input
QueryRecurringTransfersArgs -- RecurringTransfersFilterInput : filter
SubscriptionMigration -- Tier : fromTier
SubscriptionMigration -- Tier : toTier
Education -- "0..*" Article : articles
OrderBankCardInput -- BankCardPrefundTransfer : prefundTransfer
QueryAllPastLaterItemsArgs -- AllPastLaterItemsSchemaFilter : filter
QueryAllPastLaterItemsArgs -- PageInput : pagination
CloseInvestmentAccountResult -- Beneficiary : beneficiary
CloseInvestmentAccountResult -- MonetaryAmount : cashBalance
CloseInvestmentAccountResult -- MonetaryAmount : currentBalance
CloseInvestmentAccountResult -- MonetaryAmount : currentBalanceWithPending
CloseInvestmentAccountResult -- MonetaryAmount : netInvestments
CloseInvestmentAccountResult -- MonetaryAmount : pendingBalance
CloseInvestmentAccountResult -- "0..*" Withdrawal : pendingWithdrawals
CloseInvestmentAccountResult -- Performance : performance
CloseInvestmentAccountResult -- Portfolio : portfolio
CloseInvestmentAccountResult -- Portfolio : recommendedPortfolio
CloseInvestmentAccountResult -- RecurringInvestmentSettings : recurringInvestmentSettings
CloseInvestmentAccountResult -- AccountRequirements : requirements
CloseInvestmentAccountResult -- InvestmentAccountSummary : summary
CloseInvestmentAccountResult -- MonetaryAmount : totalBonds
CloseInvestmentAccountResult -- MonetaryAmount : totalEquities
CloseInvestmentAccountResult -- InvestmentAccountTransferability : transferability
CloseInvestmentAccountResult -- MarketReturn : yearToDateReturn
CoverageCalculator -- Cta : cta
CoverageCalculator -- Image : image
LadderResponse -- LadderQuoteStatus : quoteStatus
LadderResponse -- "0..*" LadderQuote : quotes
MutationUpdateRecurringInvestmentArgs -- RecurringInvestmentInput : input
MutationProtectCreateLifeQuoteArgs -- LifeQuoteInput : input
RecommendedLifeCoverage -- AboutSection : about
RecommendedLifeCoverage -- Cta : cta
RecommendedLifeCoverage -- Disclaimer : disclaimer
RecommendedLifeCoverage -- "0..*" RecommendedLifeCoverageWidget : widgets
MonetaryIncentive -- CurrencyAmount : amount
MonetaryIncentive -- CurrencyAmount : totalAmount
Mutation -- AcceptDocumentResponse : acceptDocument
Mutation -- ActivateBankCardPayload : activateBankCard
Mutation -- AddActionToMilestoneAchievementActionRuleResult : addActionToMilestoneAchievementActionRule
Mutation -- FavoritePartnerOfferGroup : addFavoritePartnerOffers
Mutation -- ApplyPromotionResult : applyPromotion
Mutation -- LinkedSubaccount : assignLinkedSubaccount
Mutation -- AuthenticateResult : authenticate
Mutation -- AuthenticateForFeeNegotiationResult : authenticateForFeeNegotiation
Mutation -- AuthenticateNegotiationStatusResult : authenticateForFeeNegotiationChallenge
Mutation -- AuthenticateNegotiationStatusResult : authenticateForFeeNegotiationChallengeMethod
Mutation -- AuthenticateWithAppleResult : authenticateWithApple
Mutation -- BlockDeviceResult : blockDevice
Mutation -- CancelCheckPaymentResult : cancelCheckPayment
Mutation -- CancelInvestmentResult : cancelInvestment
Mutation -- CancelInvestmentAccountClosureRequestResult : cancelInvestmentAccountClosureRequest
Mutation -- CancelRecurringTransferResult : cancelRecurringTransfer
Mutation -- CancelTransferPayload : cancelTransfer
Mutation -- ChangeOutsideContributionAmountResult : changeOutsideContributionAmount
Mutation -- CloseBankAccountResult : closeBankAccount
Mutation -- CloseInvestmentAccountResult : closeInvestmentAccount
Mutation -- CloseUserAccountResult : closeUserAccount
Mutation -- CompleteCheckDepositPayload : completeCheckDeposit
Mutation -- User : completeRegistration
Mutation -- ConfigureSplitDepositDirectDepositIntentSettingResult : configureSplitDepositDirectDepositIntentSetting
Mutation -- ConfigureSplitDepositDirectDepositSettingResult : configureSplitDepositDirectDepositSetting
Mutation -- ConnectAchAccountResult : connectACHAccount
Mutation -- LadderLinkResponse : connectLadderCustomer
Mutation -- CreateAccountPointsRuleResult : createAccountPointsRule
Mutation -- SupportTicket : createAuthenticatedSupportTicket
Mutation -- CreateBankAccountPayload : createBankAccount
Mutation -- CreateBeneficiaryResult : createBeneficiary
Mutation -- CreateDocumentUpload : createDocumentUpload
Mutation -- TransactionResult : createExtensionTransaction
Mutation -- CreateInvestmentAccountResponse : createIRAWithProfile
Mutation -- CreateInvestmentAccountResponse : createInvestmentAccount
Mutation -- JobAlert : createJobAlert
Mutation -- LadderResponse : createLadderQuote
Mutation -- CreateMilestoneAccountLevelDefinitionResult : createMilestoneAccountLevelDefinition
Mutation -- CreateMilestoneAchievementActionRuleResult : createMilestoneAchievementActionRule
Mutation -- CreateOutsideContributionResult : createOutsideContribution
Mutation -- CreateOutsideContributionCheckoutCartResult : createOutsideContributionCheckoutCart
Mutation -- LinkedAccount : createPlaidLinkedAccount
Mutation -- CreateProspectUserResult : createProspectUser
Mutation -- SupportTicketResponse : createSupportTicketOrException
Mutation -- SupportTicketWithCustomFieldsResponse : createSupportTicketWithCustomFields
Mutation -- Session : createUser
Mutation -- Account : deactivateAccount
Mutation -- DeactivateBeneficiaryResult : deactivateBeneficiary
Mutation -- DeactivateTierSubscriptionResult : deactivateTierSubscription
Mutation -- DeleteExpiredBankCardOrderResult : deleteExpiredBankCardOrder
Mutation -- EventSubmission : enterEvent
Mutation -- EnterSweepstakesResult : enterSweepstakes
Mutation -- ActionFeedEventResponse : feedEvent
Mutation -- LinkSessionResult : generateLinkSession
Mutation -- InitiateEmailChallengeResult : initiateEmailChallenge
Mutation -- LaterProgramAccountContributionResult : initiateLaterProgramAccountContribution
Mutation -- InitiateSmsChallengeResult : initiateSMSChallenge
Mutation -- InitiateTransferPayload : initiateTransfer
Mutation -- LaterIndividualBeneficiaryResponse : laterCreateIndividualBeneficiary
Mutation -- LegacyUploadDocumentResult : legacyUploadDocument
Mutation -- LinkManualFundingSourceResult : linkManualFundingSource
Mutation -- LockBankCardPayload : lockBankCard
Mutation -- MakeInvestmentPayload : makeInvestment
Mutation -- OpenCoreInvestmentAccountResult : openCoreInvestmentAccount
Mutation -- OpenEarlyAccountResult : openEarlyAccount
Mutation -- BankCardOrder : orderBankCard
Mutation -- LifeQuoteResponse : protectApplyLifeQuote
Mutation -- LifeQuoteResponse : protectCreateLifeQuote
Mutation -- UpdateCoverageResponse : protectUpdateCoverage
Mutation -- UpdateRecommendedCoverageResponse : protectUpdateRecommendedLifeCoverage
Mutation -- ProtectHome : protectUpdateResponses
Mutation -- RegisterEmailAuthenticatorResult : registerEmailAuthenticator
Mutation -- RegisterLinkSessionResult : registerLinkSession
Mutation -- RegisterPhoneAuthenticatorResult : registerPhoneAuthenticator
Mutation -- RegisterUserResult : registerUser
Mutation -- ReinitiateSmsChallengeResult : reinitiateChallenge
Mutation -- ReissueBankCardResult : reissueBankCard
Mutation -- FavoritePartnerOfferGroup : removeFavoritePartnerOffers
Mutation -- RemovedJobAlert : removeJobAlert
Mutation -- ReopenUserAccountResult : reopenUserAccount
Mutation -- ReportBankCardLostStolenPayload : reportBankCardLostStolen
Mutation -- "0..*" RequestEarlyAccountClosureResult : requestEarlyAccountClosure
Mutation -- RequestInvestmentAccountReopenResult : requestInvestmentAccountReopen
Mutation -- RequestSubscriptionMigrationWaiverResult : requestSubscriptionMigrationWaiver
Mutation -- RoundUpProfile : roundUpProfile
Mutation -- ScheduleRecurringTransferResult : scheduleRecurringTransfer
Mutation -- SendCheckPaymentResult : sendCheckPayment
Mutation -- Session : sessionRefresh
Mutation -- SetAuthenticationPinResult : setAuthenticationPIN
Mutation -- SetBeneficiarySsnResult : setBeneficiarySsn
Mutation -- SetDefaultAuthenticatorResult : setDefaultAuthenticator
Mutation -- FavoritePartnerOfferGroup : setFavoritePartnerOffers
Mutation -- LinkedAccount : setLinkingError
Mutation -- "0..*" RoundUp : setManualRoundUps
Mutation -- User : setPortfolio
Mutation -- SplitDepositMutation : splitDeposit
Mutation -- SplitDepositSettingsMutation : splitDepositSettings
Mutation -- StartCheckDepositPayload : startCheckDeposit
Mutation -- StartOnlineSwitchPayload : startOnlineSwitch
Mutation -- StartSubmittableSwitchPayload : startSubmittableSwitch
Mutation -- SubmitBankFeeNegotiationResult : submitBankFeeNegotiation
Mutation -- SpendTransactionsDisputeResponse : submitSpendTransactionsDispute
Mutation -- SubscribeToTierResult : subscribeToTier
Mutation -- SubscribeUserToTierResult : subscribeUserToTier
Mutation -- TaxWithholdingAmounts : taxWithholdingAmounts
Mutation -- UnblockDeviceResult : unblockDevice
Mutation -- LinkedAccount : unlinkLinkedAccount
Mutation -- UnlockBankCardPayload : unlockBankCard
Mutation -- UnsubscribeUserFromTierResult : unsubscribeUserFromTier
Mutation -- UpdateAccountPointsRuleResult : updateAccountPointsRule
Mutation -- UpdateAccountPortfolioResponse : updateAccountPortfolio
Mutation -- Address : updateAddress
Mutation -- UpdateBankCardPinPayload : updateBankCardPin
Mutation -- UpdateBeneficiaryInfoResult : updateBeneficiaryInfo
Mutation -- User : updateContactInfo
Mutation -- User : updateEmail
Mutation -- User : updateEmployment
Mutation -- TransactionResult : updateExtensionTransaction
Mutation -- User : updateInvestorQuestions
Mutation -- LadderResponse : updateLadderQuote
Mutation -- LinkedAccount : updateLinkedAccount
Mutation -- UpdateMilestoneAccountLevelDefinitionResult : updateMilestoneAccountLevelDefinition
Mutation -- User : updatePersonalInfo
Mutation -- Profile : updateProfile
Mutation -- Result : updateRegistration
Mutation -- RoundUpAccount : updateRoundUpAccount
Mutation -- User : updateSecurityQuestion
Mutation -- Signature : updateSignature
Mutation -- SuitabilityUpdateSuitabilityResult : updateSuitability
Mutation -- UpdateUserInfoResult : updateUserInfo
Mutation -- UploadCheckPayload : uploadCheck
Mutation -- "0..*" FileOrException : uploadDocuments
Mutation -- "0..*" FileOrException : uploadUnsolicitedDocuments
Mutation -- VerifyDeviceResult : verifyDevice
Mutation -- LaterAccountInfoOrError : verifyLaterAccountOrError
Mutation -- VerifyPasswordsResult : verifyPasswords
MutationProtectApplyLifeQuoteArgs -- LifeQuoteApplyInput : quoteInput
QueryGenerateUpdatedPdfArgs -- PdfDownloadUrlInput : input
QueryJobSearchArgs -- JobSearchCriteriaInput : searchCriteria
DeactivateBeneficiaryResult -- "0..*" Address : addresses
DeactivateBeneficiaryResult -- "0..*" Phone : phoneNumbers
SubscribeUserToTierResult -- Promotion : activePromotion
SubscribeUserToTierResult -- SubscriptionMigration : migration
SubscribeUserToTierResult -- Offer : offer
SubscribeUserToTierResult -- Tier : tier
SubscribeUserToTierResult -- TierPrice : tierPrice
SubscribeUserToTierResult -- TierSubscriptionTransition : transition
SubscribeUserToTierResult -- "0..*" TierDowngradeAction : actions
SplitDepositDirectDepositAllocation -- FormattedMonetaryAmount : normalizedAmount
OfferPriceInput -- CurrencyAmountInput : amount
SpendCheckDepositItem -- CurrencyAmount : amount
UnknownProvider -- Cta : cta
UnknownProvider -- Image : image
QueryNextTransferDateArgs -- RecurrenceRuleInput : recurrenceRule
JobAlertCriteriaInput -- "0..*" JobSearchFilterInput : filters
JobAlertCriteriaInput -- JobLocationInput : location
QueryInvestmentsArgs -- InvestmentFilter : filter
CancelRecurringTransferResult -- RecurrenceRule : recurrenceRule
CancelRecurringTransferResult -- RecurringTransferEvent : transferEvent
MutationEnterSweepstakesArgs -- EnterSweepstakesInput : input
MutationUpdateEmploymentArgs -- EmploymentInput : input
LaterWithholdingValues -- CurrencyAmount : amount
QueryMilestonesByThemeArgs -- MilestoneByThemeFilterInput : filter
MutationCloseBankAccountArgs -- CloseBankAccountInput : input
CancelCheckPaymentResult -- CurrencyAmount : amount
CancelCheckPaymentResult -- CheckPaymentAddress : recipientAddress
CoreCashForwardItem -- CurrencyAmount : amount
Cta -- Image : image
MutationCreateSupportTicketArgs -- CreateSupportTicketInput : input
AllCheckPaymentsResult -- "0..*" CheckPaymentEdge : edges
AllCheckPaymentsResult -- PageInfo : pageInfo
ProtectHome -- Cta : cta
ProtectHome -- "0..*" ProtectHomeWidget : widgets
QueryProtectLifeQuotePremiumsArgs -- PremiumsInput : parameters
QueryAddressDeliverabilityArgs -- AddressDeliverabilityInput : input
RegisterLinkSessionResult -- FinancialInstitution : financialInstitution
RegisterLinkSessionResult -- "0..*" LinkedSubaccount : linkedSubaccounts
BankMetadata -- BankMetadataTotals : totals
LifeCalculatorInput -- LifeCalculatorUserResponse : debt
LifeCalculatorInput -- LifeCalculatorUserResponse : mortgage
LifeCalculatorInput -- LifeCalculatorUserResponse : netIncome
LifeCalculatorInput -- LifeCalculatorUserResponse : numberOfChildren
LifeCalculatorInput -- LifeCalculatorUserResponse : payoutYears
LifeCalculatorInput -- LifeCalculatorUserResponse : savings
LifeCalculatorInput -- LifeCalculatorUserResponse : youngestChildAge
JobOffer -- Image : companyLogo
JobOffer -- OfferLocation : location
JobOffer -- JobOfferSalary : salary
MutationUpdateBankCardPinArgs -- UpdateBankCardPinInput : input
MutationLegacyUploadDocumentArgs -- LegacyUploadDocumentInput : input
SubscriptionMigrationWaiver -- SubscriptionMigration : migration
MutationInitiateLaterProgramAccountContributionArgs -- LaterProgramAccountContributionInput : input
MilestoneRuleGroup -- "0..*" Milestone : contents
MilestoneRuleGroup -- DiscreteMilestoneProgress : groupCompletion
MilestoneRuleGroup -- Image : logo
Offering -- "0..*" Product : products
Offering -- TierPrice : tierPrice
SubmitSpendTransactionsDisputeInput -- "0..*" SpendTransactionsInput : selectedTransactions
PastItem -- CurrencyAmount : amount
EarlyWithdrawalItem -- CurrencyAmount : amount
Stock -- BigCurrencyAmount : lastClosePrice
Stock -- BigCurrencyAmount : openPrice
Stock -- "0..*" SecurityHeadline : securityHeadlines
Stock -- SecurityProfile : securityProfile
Stock -- BigCurrencyAmount : week52High
Stock -- BigCurrencyAmount : week52Low
RecurringTransferAccountIdFilterInput -- RecurringTransferDirectionFilterInput : filter
ProtectLander -- Cta : cta
ProtectLander -- Image : image
ProtectLander -- Image : logo
MutationOpenCoreInvestmentAccountArgs -- OpenCoreInvestmentAccountInput : input
QueryVerifyCheckPaymentRecipientAddressArgs -- VerifyCheckPaymentRecipientAddressInputType : input
MilestoneThemeGroup -- "0..*" MilestoneThemeGroupContent : contents
MilestoneThemeGroup -- DiscreteMilestoneProgress : groupCompletion
MilestoneThemeGroup -- DiscreteMilestoneProgress : groupPointsProgress
QueryParameterizedPdfArgs -- ParameterizedPdfInput : input
LaterDividendsItem -- CurrencyAmount : amount
CoreRebalanceItem -- CurrencyAmount : amount
Statement -- StatementLink : link
CoreFeeInvestmentItem -- CurrencyAmount : amount
JobsArticle -- Cta : cta
JobsArticle -- Image : image
QueryPdfDownloadUrlArgs -- PdfDownloadUrlInput : input
MutationApplyPromotionArgs -- ApplyPromotionInput : input
StartOnlineSwitchPayload -- UserSwitch : userSwitch
MutationSendCheckPaymentArgs -- SendCheckPaymentInput : input
MissingSsnBeneficiaryAlert -- Beneficiary : beneficiary
QueryAllBankAccountsArgs -- AllBankAccountsInput : input
FinishSetup -- "0..*" SetUpTip : tips
QuerySecurityPerformanceBySymbolArgs -- SecurityPerformanceBySymbolInput : input
LaterProgramAccountContributionInput -- CurrencyAmountInput : amount
MutationCancelInvestmentArgs -- CancelInvestmentInput : input
MutationProtectUpdateRecommendedLifeCoverageArgs -- LifeCalculatorInput : calculatorInput
LockBankCardPayload -- BankCard : bankCard
PartnerOfferGroupFilterInput -- OfferLocationInput : location
SpendECheckItem -- CurrencyAmount : amount
MutationCreateIraWithProfileArgs -- "0..*" ProfileAttribute : profileAttributes
MutationRegisterLinkSessionArgs -- LinkSessionInput : input
MutationConfigureSplitDepositDirectDepositSettingArgs -- ConfigureSplitDepositDirectDepositSettingInput : input
FeaturedOffer -- Cta : cta
FeaturedOffer -- Image : image
FeaturedOffer -- Image : logo
AlertHubBeneficiaryAlert -- Beneficiary : beneficiary
SuitabilitySuitabilityQuestion -- SuitabilitySuitabilityAnswer : defaultAnswer
SuitabilitySuitabilityQuestion -- "0..*" SuitabilitySuitabilityAnswer : possibleAnswers
MutationEnterEventArgs -- EnterEventInput : input
SpendPurchaseItem -- CurrencyAmount : amount
RecurringInvestmentPayload -- RecurringInvestmentSettings : recurringInvestmentSettings
InitiateEmailChallengeResult -- "0..*" AuthenticatorInfo : alternateAuthenticators
UpdateMilestoneChallengeDefinitionInput -- ImageInput : logo
RolloverAccounts -- "0..*" RolloverAccountType : accounts
TierSubscriptionConnection -- "0..*" TierSubscription : edges
TierSubscriptionConnection -- TierSubscriptionPageInfo : pageInfo
MutationAuthenticateArgs -- ChallengeAnswerInput : challengeAnswerInput
MutationAuthenticateArgs -- AuthenticateInput : input
Provider -- Cta : cta
Provider -- Image : image
CreateMilestoneDefinitionInput -- ImageInput : inactiveLogo
CreateMilestoneDefinitionInput -- ImageInput : logo
DirectDepositStatePayload -- DirectDepositState : state
ConfigureSplitDepositDirectDepositSettingInput -- "0..*" SplitDepositAllocationInput : allocations
VerifyCheckPaymentRecipientAddressResult -- CheckPaymentRecipient : recipient
VerifyCheckPaymentRecipientAddressResult -- CheckPaymentAddress : recipientAddress
FoundMoneyCampaign -- "0..*" FoundMoneyOffer : offers
SecurityGain -- BigCurrencyAmount : marketValue
MutationRequestSubscriptionMigrationWaiverArgs -- RequestSubscriptionMigrationWaiverInput : input
QueryAllCheckPaymentsArgs -- PageInput : pageInput
SearchSupportArticleResult -- SupportAuthor : author
SearchSupportArticleResult -- SupportSection : section
UpdateBankCardPinPayload -- BankCard : bankCard
LifeQuoteSurvey -- "0..*" Modal : modals
LifeQuoteSurvey -- "0..*" LifeQuoteStep : steps
MutationCreateUserArgs -- CreateUserInput : input
QueryDocumentRequestArgs -- DocumentRequestInput : input
QueryInvestmentAccountsByUserIdArgs -- InvestmentAccountsByUserIdFilter : filter
LaterProgramAccountContributionResult -- CurrencyAmount : acceptedAmount
OnboardingTips -- "0..*" OnboardingTipItem : items
ConfigureSplitDepositDirectDepositSettingPayload -- SplitDepositDirectDepositSetting : setting
SplitDepositSettingsMutation -- SplitDepositSettings : configure
MutationAuthenticateForFeeNegotiationChallengeMethodArgs -- AuthenticateForFeeNegotiationChallengeMethodInput : input
Performance -- "0..*" AccountValue : accountValues
SpendTransferOutItem -- CurrencyAmount : amount
SplitDepositRecurrenceAllocation -- FormattedMonetaryAmount : legacyRecurrenceAmount
SplitDepositRecurrenceAllocation -- SplitDepositRecurrenceRule : legacyRecurrenceRule
MutationRequestAccountClosureArgs -- RequestAccountClosureInput : input
DeleteExpiredBankCardOrderResult -- BankCardOrderAddressVerification : addressVerification
DeleteExpiredBankCardOrderResult -- BankCardOrderFundingSourceVerification : fundingSourceVerification
DeleteExpiredBankCardOrderResult -- BankCardOrderIdentityVerification : identityVerification
DeleteExpiredBankCardOrderResult -- BankCardOrderPrefundVerification : prefundVerification
Article -- Cta : cta
Article -- Image : image
MutationInitiateEmailChallengeArgs -- InitiateEmailChallengeInput : input
InvestmentAccount -- Beneficiary : beneficiary
InvestmentAccount -- MonetaryAmount : cashBalance
InvestmentAccount -- MonetaryAmount : currentBalance
InvestmentAccount -- MonetaryAmount : currentBalanceWithPending
InvestmentAccount -- MonetaryAmount : netInvestments
InvestmentAccount -- MonetaryAmount : pendingBalance
InvestmentAccount -- "0..*" Withdrawal : pendingWithdrawals
InvestmentAccount -- Performance : performance
InvestmentAccount -- Portfolio : portfolio
InvestmentAccount -- Portfolio : recommendedPortfolio
InvestmentAccount -- RecurringInvestmentSettings : recurringInvestmentSettings
InvestmentAccount -- AccountRequirements : requirements
InvestmentAccount -- InvestmentAccountSummary : summary
InvestmentAccount -- MonetaryAmount : totalBonds
InvestmentAccount -- MonetaryAmount : totalEquities
InvestmentAccount -- InvestmentAccountTransferability : transferability
InvestmentAccount -- MarketReturn : yearToDateReturn
Promotion -- PromotionDuration : duration
Promotion -- "0..*" Incentive : incentives
Promotion -- Offering : offering
MutationCompleteCheckDepositArgs -- CompleteCheckDepositInput : input
MutationCreateProspectUserArgs -- CreateProspectUserInput : input
Friend -- "0..*" ReferralCampaign : campaigns
Friend -- FriendExperienceContent : friendExperienceContent
InsuranceSection -- Cta : cta
InsuranceSection -- Image : image
CoverageShop -- Disclaimer : legalDisclaimer
CoverageShop -- "0..*" Modal : modals
CoverageShop -- Disclaimer : partnerDisclaimer
CoverageShop -- "0..*" CoverageShopWidget : widgets
Fee -- "0..*" FeeExecution : feeExecutions
MutationUploadUnsolicitedDocumentsArgs -- UploadUnsolicitedDocumentsInput : input
MutationProtectUpdateCoverageArgs -- CoverageResponse : coverageResponse
QueryAllBankTransactionsArgs -- PageInput : pagination
UnverifiedBeneficiarySsnAlertItem -- Beneficiary : beneficiary
SetUpTip -- Image : backgroundImage
SetUpTip -- ActionFeedCta : ctaDetails
SetUpTip -- Image : image
RequestInvestmentAccountReopenResult -- InvestmentAccountReopenRequest : reopenRequest
RequestInvestmentAccountReopenResult -- "0..*" UserInvestmentAccountReopenCheck : reopenChecks
RequestInvestmentAccountReopenResult -- UserV2 : user
ExpandedLifeRecommendation -- LifeCoverageBreakdown : coverageBreakdown
ExpandedLifeRecommendation -- Cta : cta
SplitDepositRecurrenceSetting -- "0..*" SplitDepositAllocation : allocations
SplitDepositRecurrenceSetting -- "0..*" SplitDeposit : deposits
SplitDepositRecurrenceSetting -- FormattedMonetaryAmount : normalizedAmount
EvaluateCheckDepositInput -- CurrencyAmountInput : amount
EarlyGiftItem -- CurrencyAmount : amount
InvalidTierPrice -- "0..*" TierPrice : validTierPrices
MutationAuthenticateForFeeNegotiationArgs -- AuthenticateForFeeNegotiationInput : input
MutationRoundUpProfileArgs -- RoundUpProfileInput : input
MutationLaterTotalLiquidationArgs -- LaterTotalLiquidationInput : input
SpendDirectDepositItem -- CurrencyAmount : amount
MutationFeedEventArgs -- ActionFeedEvent : feedEvent
RequestEarlyAccountClosureResult -- Beneficiary : beneficiary
RequestEarlyAccountClosureResult -- MonetaryAmount : cashBalance
RequestEarlyAccountClosureResult -- MonetaryAmount : currentBalance
RequestEarlyAccountClosureResult -- MonetaryAmount : currentBalanceWithPending
RequestEarlyAccountClosureResult -- MonetaryAmount : netInvestments
RequestEarlyAccountClosureResult -- MonetaryAmount : pendingBalance
RequestEarlyAccountClosureResult -- "0..*" Withdrawal : pendingWithdrawals
RequestEarlyAccountClosureResult -- Performance : performance
RequestEarlyAccountClosureResult -- Portfolio : portfolio
RequestEarlyAccountClosureResult -- Portfolio : recommendedPortfolio
RequestEarlyAccountClosureResult -- RecurringInvestmentSettings : recurringInvestmentSettings
RequestEarlyAccountClosureResult -- AccountRequirements : requirements
RequestEarlyAccountClosureResult -- InvestmentAccountSummary : summary
RequestEarlyAccountClosureResult -- MonetaryAmount : totalBonds
RequestEarlyAccountClosureResult -- MonetaryAmount : totalEquities
RequestEarlyAccountClosureResult -- InvestmentAccountTransferability : transferability
RequestEarlyAccountClosureResult -- MarketReturn : yearToDateReturn
MutationRegisterPhoneAuthenticatorArgs -- ChallengeAnswerInput : challengeAnswerInput
MutationRegisterPhoneAuthenticatorArgs -- RegisterPhoneAuthenticatorInput : input
TransferableAccount -- CurrencyAmount : balance
SecurityPerformanceBySymbolInput -- SecurityPerformanceTimeSpan : timeSpan
CoverageAsk -- Image : image
CoverageAsk -- Cta : noCta
CoverageAsk -- Cta : yesCta
ActionCard -- ActionCardButton : ctaDetails
TierPrice -- CurrencyAmount : amount
QuoteResult -- InsuranceCarousel : alternatePartners
QuoteResult -- Cta : cta
QuoteResult -- Disclaimer : disclaimer
QuoteResult -- Image : logo
QuoteResult -- Footer : footer
QuoteResult -- Header : header
QuoteResult -- "0..*" Modal : modals
QuoteResult -- "0..*" Premium : premiums
QuoteResult -- "0..*" QuoteSlider : sliders
PastItemConnection -- "0..*" PastItemEdge : edges
PastItemConnection -- PageInfo : pageInfo
WithholdingEstimates -- MonetaryAmount : estimatedCustomerAmount
WithholdingEstimates -- MonetaryAmount : estimatedFederalWithholdingAmount
WithholdingEstimates -- MonetaryAmount : estimatedStateWithholdingAmount
WithholdingEstimates -- MonetaryAmount : estimatedTaxableEarnings
WithholdingEstimates -- MonetaryAmount : estimatedTotalWithholdingAmount
LaterRebalanceItem -- CurrencyAmount : amount
CreateMilestoneChallengeDefinitionResult -- Image : logo
CreateMilestoneChallengeDefinitionResult -- "0..*" MilestoneDefinition : milestones
CoreAchSubscriptionFeeItem -- CurrencyAmount : amount
MutationCreatePlaidLinkedAccountArgs -- CreatePlaidLinkedAccountInput : input
MutationReissueBankCardArgs -- ReissueBankCardInput : input
LaterPartialContributionSuccess -- CurrencyAmount : acceptedAmount
SplitDepositMutation -- SplitDeposit : cancel
SplitDepositMutation -- SplitDeposit : execute
OfferPrice -- CurrencyAmount : amount
AboutSection -- Image : image
ExtensionRewardsSummary -- RewardSummary : totalFulfilledRewardsDollarValue
ExtensionRewardsSummary -- RewardSummary : totalPendingRewardsDollarValue
ExtensionRewardsSummary -- RewardSummary : totalRewardsDollarValue
NextTransferDateResult -- "0..*" RecurringTransferPathException : pathExceptions
CreateBeneficiaryResult -- "0..*" Address : addresses
CreateBeneficiaryResult -- "0..*" Phone : phoneNumbers
MutationActivateBankCardArgs -- ActivateBankCardInput : input
MutationAcceptDocumentArgs -- AcceptDocumentInput : input
JobsOfferConnection -- "0..*" JobsOfferEdge : edges
JobsOfferConnection -- PageInfo : pageInfo
SpendRealTimeRoundUpItem -- CurrencyAmount : amount
SpendRealTimeRoundUpItem -- CurrencyAmount : initialAmount
JobSearchCriteriaInput -- "0..*" JobSearchFilterInput : filters
JobSearchCriteriaInput -- JobLocationInput : location
OnboardingTipItem -- Image : image
ApplyPromotionResult -- Promotion : activePromotion
ApplyPromotionResult -- SubscriptionMigration : migration
ApplyPromotionResult -- Offer : offer
ApplyPromotionResult -- Tier : tier
ApplyPromotionResult -- TierPrice : tierPrice
ApplyPromotionResult -- TierSubscriptionTransition : transition
OpenCoreInvestmentAccountResult -- Beneficiary : beneficiary
OpenCoreInvestmentAccountResult -- MonetaryAmount : cashBalance
OpenCoreInvestmentAccountResult -- MonetaryAmount : currentBalance
OpenCoreInvestmentAccountResult -- MonetaryAmount : currentBalanceWithPending
OpenCoreInvestmentAccountResult -- MonetaryAmount : netInvestments
OpenCoreInvestmentAccountResult -- MonetaryAmount : pendingBalance
OpenCoreInvestmentAccountResult -- "0..*" Withdrawal : pendingWithdrawals
OpenCoreInvestmentAccountResult -- Performance : performance
OpenCoreInvestmentAccountResult -- Portfolio : portfolio
OpenCoreInvestmentAccountResult -- Portfolio : recommendedPortfolio
OpenCoreInvestmentAccountResult -- RecurringInvestmentSettings : recurringInvestmentSettings
OpenCoreInvestmentAccountResult -- AccountRequirements : requirements
OpenCoreInvestmentAccountResult -- InvestmentAccountSummary : summary
OpenCoreInvestmentAccountResult -- MonetaryAmount : totalBonds
OpenCoreInvestmentAccountResult -- MonetaryAmount : totalEquities
OpenCoreInvestmentAccountResult -- InvestmentAccountTransferability : transferability
OpenCoreInvestmentAccountResult -- MarketReturn : yearToDateReturn
CreateOutsideContributionResult -- OutsideContributionCheckoutCart : checkoutCart
SearchSupportResult -- "0..*" SearchSupportArticleResult : relevantSearchArticles
SearchSupportResult -- "0..*" SupportCategory : relevantSearchCategories
Query -- AcceptanceDocument : acceptanceDocument
Query -- "0..*" AcceptanceDocument : acceptanceDocuments
Query -- AccountPointsRule : accountPointsRuleByMilestoneId
Query -- "0..*" AccountPointsRule : accountPointsRules
Query -- AccountStrengthResult : accountStrength
Query -- "0..*" Account : accounts
Query -- "0..*" ActionCard : actionFeed
Query -- EarnOfferQueryPage : activeEarnOffers
Query -- ActivitySummaryResponse : activitySummary
Query -- AddressDeliverabilityResult : addressDeliverability
Query -- "0..*" Address : addresses
Query -- Advocate : advocate
Query -- "0..*" AlertHubBeneficiaryAlert : alertHubBeneficiaryAlerts
Query -- "0..*" AcceptanceDocument : allAcceptanceDocuments
Query -- "0..*" BankAccount : allBankAccounts
Query -- "0..*" BankCard : allBankCards
Query -- "0..*" BankStatement : allBankStatements
Query -- BankTransactionConnection : allBankTransactions
Query -- "0..*" CardDeliveryStatus : allCardTrackingStatuses
Query -- AllCheckPaymentsResult : allCheckPayments
Query -- "0..*" CloseAccountReason : allCloseAccountReasons
Query -- "0..*" ContactCategory : allContactCategories
Query -- "0..*" PastItem : allPastCoreItemChildren
Query -- PastItemConnection : allPastCoreItems
Query -- PastItemConnection : allPastEarlyItems
Query -- PastItemConnection : allPastLaterItems
Query -- PastItemConnection : allPastSpendItems
Query -- "0..*" ReturnedCheckDeposit : allReturnedCheckDeposits
Query -- "0..*" SecurityQuestion : allSecurityQuestions
Query -- "0..*" SuitabilityQuestion : allSuitabilityQuestions
Query -- "0..*" SupportArticle : allSupportArticles
Query -- "0..*" SupportCategory : allSupportCategories
Query -- "0..*" SupportSection : allSupportSections
Query -- "0..*" SupportTicketForm : allSupportTicketForms
Query -- "0..*" TransferableFrom : allTransferableFrom
Query -- "0..*" TransferableTo : allTransferableTo
Query -- "0..*" AuthAlert : authAlerts
Query -- AuthProfile : authProfile
Query -- AuthenticateForFeeNegotiationStatus : authenticateForFeeNegotiationStatusByLinkedAccountId
Query -- BankCardOrder : bankCardOrder
Query -- BankCardReissue : bankCardReissue
Query -- "0..*" BankFeeNegotiationAlert : bankFeeNegotiationAlerts
Query -- BankFeeSummary : bankFeeSummaryByUserId
Query -- "0..*" BankFee : bankFeesByUserId
Query -- BankMetadata : bankMetadata
Query -- BankTransaction : bankTransaction
Query -- "0..*" Beneficiary : beneficiaries
Query -- Beneficiary : beneficiary
Query -- "0..*" Alert : beneficiaryAlerts
Query -- BillingCycle : billingCycle
Query -- "0..*" BillingCycle : billingCycles
Query -- ContactFormAlert : contactFormAlert
Query -- Device : device
Query -- "0..*" Device : devicesByUserId
Query -- DirectDepositStatePayload : directDepositState
Query -- DocumentRequest : documentRequest
Query -- DocumentRequestsConnection : documentRequests
Query -- EarlyAccountStateRegulationResult : earlyAccountStateRegulation
Query -- EarlyAccountTransferInfo : earlyAccountTransferInfo
Query -- "0..*" EarnCtaRecord : earnCTADataByUserId
Query -- EarnOffer : earnOfferByCampaignOfferId
Query -- Eligibility : eligibility
Query -- EstimatedCheckPaymentDates : estimatedCheckPaymentDates
Query -- EstimatedTransferDatesPayload : estimatedTransferDates
Query -- Etf : etf
Query -- EvaluateCheckDepositPayload : evaluateCheckDeposit
Query -- ExtensionCampaignStore : extensionCampaignStore
Query -- "0..*" ExtensionCampaignStore : extensionCampaignStores
Query -- "0..*" ExtensionOwner : extensionOwners
Query -- ExtensionRewardsSummary : extensionRewardsSummary
Query -- "0..*" ExtensionTransaction : extensionTransactions
Query -- FavoritePartnerOfferGroup : favoriteEarnOffers
Query -- Fee : fee
Query -- "0..*" Fee : fees
Query -- FinancialInstitution : financialInstitution
Query -- FinancialInstitutionTypePagination : financialInstitutions
Query -- FinishSetup : finishSetup
Query -- "0..*" FoundMoneyCampaign : foundMoneyCampaigns
Query -- FoundMoneyOffer : foundMoneyOffer
Query -- "0..*" FoundMoneyOfferCategory : foundMoneyOfferCategories
Query -- "0..*" FoundMoneyOfferGroup : foundMoneyOfferGroups
Query -- "0..*" FoundMoneyReward : foundMoneyRewards
Query -- FoundMoneySummary : foundMoneySummary
Query -- Friend : friend
Query -- "0..*" FundingSourceAccount : fundingSourceAccounts
Query -- FundingSourceInfo : fundingSourceInfo
Query -- GenerateUpdatedPdfPayload : generateUpdatedPdf
Query -- HelpFormContent : helpFormContent
Query -- "0..*" SearchSupportArticleResult : instantSearchSupportArticles
Query -- InvestmentAccount : investmentAccount
Query -- InvestmentAccount : investmentAccountByBeneficiaryId
Query -- "0..*" InvestmentAccount : investmentAccountsByUserId
Query -- "0..*" Investment : investments
Query -- Referral : invitationForUser
Query -- "0..*" JobAlert : jobAlerts
Query -- JobsEducation : jobEducationContent
Query -- "0..*" JobsOffer : jobSearch
Query -- JobSearchPage : jobSearchPage
Query -- JobsOfferConnection : jobSearchV2
Query -- "0..*" LaterAccount : laterAccounts
Query -- "0..*" Alert : laterAlerts
Query -- "0..*" LaterIndividualBeneficiary : laterBeneficiaries
Query -- "0..*" ContributionHistoryItem : laterContributionHistory
Query -- "0..*" LaterHistoryItem : laterHistory
Query -- LaterPortfolioPerformance : laterPortfolioPerformance
Query -- ContributionAbilityByYear : laterUserContributionAbility
Query -- LinkedAccount : linkedAccount
Query -- "0..*" LinkedAccountAlertsResponse : linkedAccountAlerts
Query -- Webhooks : linkedAccountWebhooks
Query -- "0..*" LinkedAccount : linkedAccounts
Query -- LinkedSubaccount : linkedSubaccount
Query -- "0..*" LinkedSubaccount : linkedSubaccounts
Query -- Market : market
Query -- Milestone : milestone
Query -- "0..*" MilestoneAccountLevelDefinition : milestoneAccountLevelDefinitions
Query -- MilestoneAchievementActionRule : milestoneAchievementActionRule
Query -- "0..*" MilestoneAchievementActionRule : milestoneAchievementActionRules
Query -- MilestoneChallenge : milestoneChallenge
Query -- MilestoneHub : milestoneHub
Query -- Eligibility : milestoneHubEligible
Query -- MilestoneThemeGroup : milestonesByTheme
Query -- NextBillingDate : nextBillingDate
Query -- NextTransferDateResult : nextTransferDate
Query -- Notifications : notifications
Query -- "0..*" Occupation : occupations
Query -- Offer : offer
Query -- OnboardingTips : onboardingTips
Query -- OutsideContributionCode : outsideContributionCode
Query -- OutsideContributionCode : outsideContributionCodeByCode
Query -- OutsideContributionCode : outsideContributionCodeByInvestmentAccountId
Query -- GenerateUpdatedPdfPayload : parameterizedPdf
Query -- Partner : partner
Query -- PartnerOfferGroup : partnerOfferGroup
Query -- "0..*" PartnerOfferGroup : partnerOfferGroupsByType
Query -- PastCoreSummary : pastCoreSummary
Query -- PastEarlySummary : pastEarlySummary
Query -- PastLaterSummary : pastLaterSummary
Query -- PastSpendSummary : pastSpendSummary
Query -- PastItem : pastSpendTransactionItem
Query -- PdfDownloadUrlPayload : pdfDownloadUrl
Query -- Performance : performance
Query -- "0..*" FoundMoneyCampaignV2 : personalizedFoundMoney
Query -- "0..*" FoundMoneyCampaignV2 : personalizedFoundMoneyV2
Query -- "0..*" Portfolio : portfolios
Query -- Product : product
Query -- Product : productByKey
Query -- "0..*" Product : products
Query -- Profile : profile
Query -- Promotion : promotion
Query -- "0..*" Promotion : promotionsByUserId
Query -- ProtectContext : protectContext
Query -- CoverageShop : protectCoverageShop
Query -- ProtectHome : protectHome
Query -- InsuranceHome : protectInsuranceHome
Query -- ProtectLander : protectLander
Query -- ProtectLearningCenter : protectLearningCenter
Query -- LifeCalculatorSurvey : protectLifeCalculatorSurvey
Query -- PremiumsResult : protectLifeQuotePremiums
Query -- LifeQuoteSurvey : protectLifeQuoteSurvey
Query -- "0..*" Question : protectOnboardingQuestions
Query -- ProviderSearch : protectProviders
Query -- Recommendations : protectRecommendations
Query -- RecommendedLifeCoverage : protectRecommendedLifeCoverage
Query -- SuitabilityPortfolio : recommendedPortfolio
Query -- RecurringInvestmentSettings : recurringInvestmentSettings
Query -- "0..*" RecurringTransfer : recurringTransfers
Query -- Referral : referralForUser
Query -- "0..*" Authenticator : registeredAuthenticators
Query -- Result : registration
Query -- RoundUpAccount : roundUpAccount
Query -- "0..*" RoundUpAccount : roundUpAccounts
Query -- RoundUpProfile : roundUpProfile
Query -- RoundUpTypePagination : roundUps
Query -- EarnOfferQueryPage : searchActiveEarnOffers
Query -- SearchEmployersPayload : searchEmployers
Query -- SearchSupportResult : searchSupportArticles
Query -- Security : securityBySymbol
Query -- SecurityPerformance : securityPerformanceBySymbol
Query -- Settings : settings
Query -- "0..*" Signature : signatures
Query -- SmartDepositMetadataResult : smartDepositMetadata
Query -- SpendAccount : spendAccount
Query -- "0..*" SpendAlert : spendAlerts
Query -- SpendAtmsResult : spendAtms
Query -- SplitDepositSettings : splitDepositSettings
Query -- "0..*" SplitDepositSettings : splitDepositSettingsByUserId
Query -- "0..*" Statement : statements
Query -- SubscriptionMigration : subscriptionMigration
Query -- SubscriptionMigrationWaiver : subscriptionMigrationWaiver
Query -- "0..*" SubscriptionMigrationWaiver : subscriptionMigrationWaiversByUserId
Query -- "0..*" SuitabilitySuitabilityResponse : suitabilityResponses
Query -- SupportArticle : supportArticle
Query -- "0..*" SupportArticle : supportArticlesBySectionId
Query -- SupportCategory : supportCategory
Query -- "0..*" ContactFaq : supportMostCommonFaq
Query -- ScheduleResult : supportSchedule
Query -- SupportSection : supportSection
Query -- "0..*" SupportSection : supportSectionsByCategoryId
Query -- SupportTicketForm : supportTicketForm
Query -- SupportTicketFormField : supportTicketFormField
Query -- Tier : tier
Query -- TierGroup : tierGroup
Query -- TierGroup : tierGroupForUser
Query -- TierSubscription : tierSubscription
Query -- TierSubscription : tierSubscriptionByUserId
Query -- TierSubscriptionConnection : tierSubscriptionHistoryByUserId
Query -- TopEmployerPayload : topEmployers
Query -- User : user
Query -- "0..*" UserAlertsResponse : userAlerts
Query -- UserStatus : userStatus
Query -- VerifyCheckPaymentRecipientAddressResult : verifyCheckPaymentRecipientAddress
Query -- WithholdingDefaults : withholdingDefaults
Query -- WithholdingEstimates : withholdingEstimates
Query -- YearLaterReport : yearLaterReport
EarlyInvestmentItem -- CurrencyAmount : amount
MilestoneChallenge -- "0..*" MilestoneGroup : groupedMilestones
MilestoneChallenge -- Image : logo
MilestoneChallenge -- DiscreteMilestoneProgress : milestonesCompleted
MilestoneChallenge -- DiscreteMilestoneProgress : pointsEarned
MutationUpdateLinkedAccountArgs -- UpdateLinkedAccountInput : input
RecurringTransferEvent -- CurrencyAmount : amount
RecurringTransferEvent -- RecurringTransferFundingSource : fundingSource
RecurringTransferEvent -- RecurringTransferAccount : targetAccount
SendCheckPaymentResult -- CurrencyAmount : amount
SendCheckPaymentResult -- CheckPaymentAddress : recipientAddress
BillingCycle -- "0..*" Fee : fees
BillingCycle -- TierSubscription : tierSubscription
CoreGiftCardCreditRedemptionItem -- CurrencyAmount : amount
MutationBlockDeviceArgs -- BlockDeviceInput : input
CoreEmployeeCreditItem -- CurrencyAmount : amount
TransferableTo -- CurrencyAmount : max
TransferableTo -- CurrencyAmount : min
TransferableTo -- TransferableAccount : to
CheckPaymentRecipientAddressType -- CheckPaymentRecipient : recipient
CheckPaymentRecipientAddressType -- CheckPaymentAddress : recipientAddress
InitiateTransferInput -- CurrencyAmountInput : amount
Transfer -- CurrencyAmount : amount
Transfer -- TransferableAccount : from
Transfer -- TransferableAccount : to
BatchAddTierSubscriptionsResult -- "0..*" TierPrice : validTierPrices
BatchAddTierSubscriptionsResult -- "0..*" Tier : validTiers
JobSearchPage -- "0..*" JobSearchCriteria : recentSearches
PartnerOfferGroupItem -- EarnOfferCtaDetails : ctaDetails
PartnerOfferGroupItem -- Image : backgroundImage
PartnerOfferGroupItem -- Image : desktopBackgroundImage
PartnerOfferGroupItem -- Image : logo
PartnerOfferGroupItem -- Image : companyLogo
PartnerOfferGroupItem -- OfferLocation : location
PartnerOfferGroupItem -- JobOfferSalary : salary
PartnerOfferGroupItem -- "0..*" JobSearchFilter : searchFilters
MutationRequestEarlyAccountClosureArgs -- RequestEarlyAccountClosureInput : input
MutationLinkManualFundingSourceArgs -- LinkManualFundingSourceInput : input
SplitDepositDirectDepositSetting -- "0..*" SplitDepositAllocation : allocations
SplitDepositDirectDepositSetting -- "0..*" SplitDeposit : deposits
SplitDepositDirectDepositSetting -- FormattedMonetaryAmount : normalizedAmount
SplitDepositDirectDepositSetting -- TotalAmounts : totalAmounts
QuerySupportScheduleArgs -- ScheduleInput : input
SpendAtmsResult -- "0..*" SpendAtm : atms
ReinitiateSmsChallengeResult -- "0..*" AuthenticatorInfo : alternateAuthenticators
MilestoneChallengeDefinition -- Image : logo
MilestoneChallengeDefinition -- "0..*" MilestoneDefinition : milestones
MutationCreateMilestoneAccountLevelDefinitionArgs -- CreateMilestoneAccountLevelDefinitionInput : createLevelDefinitionInput
QuerySecurityBySymbolArgs -- SecurityBySymbolInput : input
MutationProtectUpdateResponsesArgs -- "0..*" QuestionResponse : questionResponses
MutationUpdateContactInfoArgs -- ContactInfoInput : input
BriefInsuranceSection -- Cta : cta
BriefInsuranceSection -- Image : image
CreateBankAccountPayload -- BankAccount : bankAccount
DocumentRequest -- "0..*" Document : documents
MutationInitiateSmsChallengeArgs -- InitiateSmsChallengeInput : input
Footer -- Image : image
BankFeeNegotiationAlert -- "0..*" BankFeeConnectionAlert : alertData
MutationMakeInvestmentArgs -- MakeInvestmentInput : input
UploadCheckInput -- CheckImage : checkImage
MutationUpdateRegistrationArgs -- RegistrationInput : input
PastSpendSummary -- CurrencyAmount : availableBalance
PastSpendSummary -- CurrencyAmount : debitsLast30Days
PastSpendSummary -- CurrencyAmount : depositsLast30Days
PastSpendSummary -- CurrencyAmount : instantRoundUps
MutationChangeOutsideContributionAmountArgs -- ChangeOutsideContributionAmountInput : input
InvestmentAccountReopenRequestNote -- InvestmentAccountReopenRequestAction : adminAction
InvestmentAccountReopenRequestNote -- InvestmentAccountReopenRequest : reopenRequest
BankFeeSummary -- FeeStatusSummary : feesFound
BankFeeSummary -- "0..*" BankFeeConnection : linkedAccounts
BankFeeSummary -- MonetaryAmount : totalNegotiableFees
BankFeeSummary -- MonetaryAmount : totalNegotiatedFees
BankFeeSummary -- MonetaryAmount : totalReimbursedFees
CoreRoundUpsItem -- CurrencyAmount : amount
CoreRoundUpsItem -- CurrencyAmount : initialAmount
CoreRoundUpsItem -- CurrencyAmount : transactionAmount
ActivitySummaryResponse -- "0..*" SummaryItem : activitySummaryItems
ActivitySummaryResponse -- CurrencyAmount : total
JobSearchCriteria -- "0..*" JobSearchFilter : filters
JobSearchCriteria -- JobLocation : location
MutationCreateAuthenticatedSupportTicketArgs -- CreateSupportTicketInput : input
LifeCalculatorSurvey -- Cta : cta
LifeCalculatorSurvey -- "0..*" Modal : modals
LifeCalculatorSurvey -- "0..*" LifeCalculatorQuestion : questions
LifeCalculatorSurvey -- Tip : tip
QueryPromotionsByUserIdArgs -- PromotionFilterInput : filter
BankFee -- MonetaryAmount : amount
MutationConnectAchAccountArgs -- ConnectAchAccountInput : input
BankAccountRequirements -- "0..*" BankAccountRequirement : close
TierDowngradeActionRequired -- "0..*" TierDowngradeAction : actions
HomeIcon -- Cta : cta
HomeIcon -- Image : icon
RecurringTransfersFilterInput -- RecurringTransferAccountIdFilterInput : filter
MutationSetFavoritePartnerOffersArgs -- FavoritePartnerOfferInput : input
MutationAuthenticateWithAppleArgs -- AuthenticateWithAppleInput : input
EarnOffer -- EarnOfferCtaDetails : ctaDetails
QueryEstimatedTransferDatesArgs -- EstimatedTransferDatesInput : input
OutsideContribution -- OutsideContributionCheckoutCart : checkoutCart
JobsOffer -- Image : companyLogo
JobsOffer -- JobLocation : location
JobsOffer -- JobsOfferSalary : salary
QueryAllPastSpendItemsArgs -- AllPastSpendItemsSchemaFilter : filter
QueryAllPastSpendItemsArgs -- PageInput : pagination
MilestoneDefinition -- AccountPointsRule : accountPointsRule
MilestoneDefinition -- MilestoneChallengePointsRule : challengePointsRule
MilestoneDefinition -- Image : inactiveLogo
MilestoneDefinition -- Image : logo
MilestoneDefinition -- MilestoneRule : rule
EmploymentInput -- "0..*" SuitabilityInput : suitability
ExistingRequestPendingReview -- InvestmentAccountReopenRequest : reopenRequest
LaterAccount -- LaterPortfolioPerformance : performance
LaterAccount -- RecurringInvestmentSettings : recurringSettings
ProtectLearningCenter -- "0..*" Article : articles
ProtectLearningCenter -- Image : image
InsuranceHome -- Cta : disclaimerCta
InsuranceHome -- Image : image
InsuranceHome -- "0..*" Modal : modals
InsuranceHome -- "0..*" InsuranceHomeWidget : widgets
MissingSsnBeneficiaryAlertItem -- Beneficiary : beneficiary
UnverifiedBeneficiarySsnAlert -- Beneficiary : beneficiary
BankCardPrefundTransfer -- PositiveCurrencyAmountInput : amount
MutationOpenEarlyAccountArgs -- OpenEarlyAccountInput : input
CheckPaymentConnection -- "0..*" CheckPaymentEdge : edges
CheckPaymentConnection -- PageInfo : pageInfo
CoreFoundMoneyRewardItem -- CurrencyAmount : amount
CreateAuthProfileResult -- Authenticator : defaultAuthenticator
CoreWithdrawalItem -- CurrencyAmount : amount
JobSearchOffer -- Image : backgroundImage
JobSearchOffer -- Image : desktopBackgroundImage
JobSearchOffer -- Image : logo
JobSearchOffer -- "0..*" JobSearchFilter : searchFilters
MutationRequestInvestmentAccountReopenArgs -- RequestInvestmentAccountReopenInput : input
TierSubscriptionTransition -- Tier : desiredTier
TierSubscriptionTransition -- TierPrice : desiredTierPrice
ConfigureSplitDepositDirectDepositIntentSettingResult -- SplitDepositDirectDepositIntentSetting : intent
SmartDepositMetadataResult -- "0..*" SplitDepositAllocation : recommendedAllocations
SmartDepositMetadataResult -- "0..*" SplitDepositTargetAccount : targetAccounts
MutationPasswordResetRequestArgs -- PasswordResetRequestInput : input
QuerySearchEmployersArgs -- SearchEmployersInput : input
SpendAccount -- BankCardOrder : bankCardOrder
MutationLockBankCardArgs -- LockBankCardInput : input
EmailAuthChallenge -- "0..*" AuthenticatorInfo : alternateAuthenticators
InitiateSmsChallengeResult -- "0..*" AuthenticatorInfo : alternateAuthenticators
SecurityPrice -- BigCurrencyAmount : marketValue
MutationUpdateMilestoneAccountLevelDefinitionArgs -- UpdateMilestoneAccountLevelDefinitionInput : updateLevelDefinitionInput
MutationCreateSupportTicketOrExceptionArgs -- CreateSupportTicketInput : input
QueryRoundUpsArgs -- PageInput : pageInput
BankTransactionConnection -- "0..*" BankTransactionEdge : edges
BankTransactionConnection -- PageInfo : pageInfo
SpendAtm -- SpendAtmAddress : address
HomeIcons -- "0..*" HomeIcon : icons
RoundUpTypePagination -- "0..*" RoundUpTypeEdge : edges
RoundUpTypePagination -- PageInfo : pageInfo
MutationStartAcornsPdfSwitchArgs -- StartAcornsPdfSwitchInput : input
ReissueBankCardResult -- BankCardRequestMailingAddress : mailingAddress
ConfigureSplitDepositDirectDepositIntentPayload -- SplitDepositDirectDepositIntentSetting : intent
QueryAllBankCardsArgs -- AllBankCardsFilter : filter
SpendAtmReimbursementItem -- CurrencyAmount : amount
MutationReportBankCardLostStolenArgs -- ReportBankCardLostStolenInput : input
SplitDepositSettingsMutationConfigureArgs -- ConfigureSettingsInput : input
CoreCollectionItem -- CurrencyAmount : amount
PastSpendItem -- CurrencyAmount : amount
ChallengePointsEarned -- DiscreteMilestoneProgress : earningProgress
UpdateMilestoneDefinitionInput -- ImageInput : inactiveLogo
UpdateMilestoneDefinitionInput -- ImageInput : logo
SpendAtmsPayload -- "0..*" SpendAtm : atms
StartCheckDepositInput -- ClientInfo : clientInfo
AccountStrengthResult -- "0..*" AccountAchievement : achievements
CreateMilestoneChallengeDefinitionInput -- ImageInput : logo
MutationCreateTransferArgs -- CustodianAddressInput : custodianAddress
UpdateAuthEmailResult -- Authenticator : defaultAuthenticator
UpdateMilestoneChallengeDefinitionResult -- Image : logo
UpdateMilestoneChallengeDefinitionResult -- "0..*" MilestoneDefinition : milestones
UpdateUserInfoResult -- FundingSource : fundingSource
UpdateUserInfoResult -- "0..*" InvestmentAccount : investmentAccounts
UpdateUserInfoResult -- Portfolio : portfolio
UpdateUserInfoResult -- "0..*" UserUpload : uploads
MutationSubscribeToTierArgs -- SubscribeToTierInput : input
SpendAtmWithdrawalItem -- CurrencyAmount : amount
JobsOfferEdge -- JobsOffer : node
CoreDividendsItem -- CurrencyAmount : amount
MilestoneGroup -- "0..*" MilestoneThemeGroupContent : contents
MilestoneGroup -- DiscreteMilestoneProgress : groupCompletion
MilestoneGroup -- Image : logo
MilestoneGroup -- DiscreteMilestoneProgress : groupPointsProgress
LifeQuoteResultSliders -- Cta : cta
LifeQuoteResultSliders -- Footer : footer
LifeQuoteResultSliders -- Header : header
LifeQuoteResultSliders -- "0..*" Modal : modals
LifeQuoteResultSliders -- "0..*" Premium : premiums
LifeQuoteResultSliders -- "0..*" QuoteSlider : sliders
BeneficiaryInfoInput -- AddressInput : mailingAddress
InvestmentAccountReopenRequest -- "0..*" UserInvestmentAccountReopenCheck : reopenChecks
InvestmentAccountReopenRequest -- UserV2 : user
SmsAuthChallenge -- "0..*" AuthenticatorInfo : alternateAuthenticators
UpdateAccountPortfolioResponse -- Beneficiary : beneficiary
UpdateAccountPortfolioResponse -- MonetaryAmount : cashBalance
UpdateAccountPortfolioResponse -- MonetaryAmount : currentBalance
UpdateAccountPortfolioResponse -- MonetaryAmount : currentBalanceWithPending
UpdateAccountPortfolioResponse -- MonetaryAmount : netInvestments
UpdateAccountPortfolioResponse -- MonetaryAmount : pendingBalance
UpdateAccountPortfolioResponse -- "0..*" Withdrawal : pendingWithdrawals
UpdateAccountPortfolioResponse -- Performance : performance
UpdateAccountPortfolioResponse -- Portfolio : portfolio
UpdateAccountPortfolioResponse -- Portfolio : recommendedPortfolio
UpdateAccountPortfolioResponse -- RecurringInvestmentSettings : recurringInvestmentSettings
UpdateAccountPortfolioResponse -- AccountRequirements : requirements
UpdateAccountPortfolioResponse -- InvestmentAccountSummary : summary
UpdateAccountPortfolioResponse -- MonetaryAmount : totalBonds
UpdateAccountPortfolioResponse -- MonetaryAmount : totalEquities
UpdateAccountPortfolioResponse -- InvestmentAccountTransferability : transferability
UpdateAccountPortfolioResponse -- MarketReturn : yearToDateReturn
QueryFinancialInstitutionsArgs -- PageInput : pageInput
LaterInvestmentItem -- CurrencyAmount : amount
FoundMoneySummary -- MonetaryAmount : totalFulfilledRewardsDollarValue
FoundMoneySummary -- MonetaryAmount : totalPendingRewardsDollarValue
FoundMoneySummary -- MonetaryAmount : totalRewardsDollarValue
RoundUpProfile -- "0..*" RoundUp : roundUps
LifeCoverageBreakdown -- LifeCoverageBreakdownCategory : debt
LifeCoverageBreakdown -- LifeCoverageBreakdownCategory : education
LifeCoverageBreakdown -- LifeCoverageBreakdownCategory : expenses
LifeCoverageBreakdown -- LifeCoverageBreakdownCategory : nearestCoverage
LifeCoverageBreakdown -- LifeCoverageBreakdownCategory : savings
LifeCoverageBreakdown -- LifeCoverageBreakdownCategory : totalNeeds
MutationInitiateTransferArgs -- InitiateTransferInput : input
BankFeeConnection -- Submission : latestSubmission
BankFeeConnection -- "0..*" Submission : submissions
AddDocumentUrlsInput -- "0..*" DocumentInput : documents
DeactivateTierSubscriptionResult -- Promotion : activePromotion
DeactivateTierSubscriptionResult -- SubscriptionMigration : migration
DeactivateTierSubscriptionResult -- Offer : offer
DeactivateTierSubscriptionResult -- Tier : tier
DeactivateTierSubscriptionResult -- TierPrice : tierPrice
DeactivateTierSubscriptionResult -- TierSubscriptionTransition : transition
SpendDigitalWalletItem -- CurrencyAmount : amount
SplitDeposit -- "0..*" SplitDepositAllocation : allocations
MutationCreateJobAlertArgs -- JobAlertCriteriaInput : alertCriteria
StartSubmittableSwitchPayload -- UserSwitch : userSwitch
AddressDeliverabilityCorrectedAddress -- AddressDeliverabilityAdditionalInfo : additionalInfo
CarouselOffer -- Cta : cta
CarouselOffer -- Image : logo
SuitabilityUpdateSuitabilityResult -- SuitabilityPortfolio : recommendedPortfolio
SuitabilityUpdateSuitabilityResult -- "0..*" SuitabilitySuitabilityResponse : suitabilityResponses
PastItemEdge -- PastItem : node
OutsideContributionCheckoutCart -- OutsideContributionCode : code
InsuranceHomeWidget -- Image : image
InsuranceHomeWidget -- Cta : noCta
InsuranceHomeWidget -- Cta : yesCta
InsuranceHomeWidget -- Cta : cta
InsuranceHomeWidget -- EducationSection : educationSection
InsuranceHomeWidget -- Image : icon
InsuranceHomeWidget -- "0..*" CarouselOffer : offers
MutationUnsubscribeUserFromTierArgs -- UnsubscribeUserFromTierInput : input
MutationUpdateUserInfoArgs -- PersonalInfoInput : input
QueryWithholdingEstimatesArgs -- CurrencyAmountInput : withdrawalAmount
PastCoreSummary -- CurrencyAmount : dividends
PastCoreSummary -- CurrencyAmount : foundMoneyRewards
PastCoreSummary -- CurrencyAmount : investments
PastCoreSummary -- CurrencyAmount : netReturns
PastCoreSummary -- CurrencyAmount : referralRewards
PastCoreSummary -- CurrencyAmount : withdrawals
ScheduleRecurringTransferResult -- RecurrenceRule : recurrenceRule
ScheduleRecurringTransferResult -- RecurringTransferEvent : transferEvent
ScheduleRecurringTransferResult -- "0..*" RecurringTransferPathException : pathExceptions
SpendTransferInItem -- CurrencyAmount : amount
LinkedAccount -- FinancialInstitution : financialInstitution
LinkedAccount -- "0..*" LinkedSubaccount : linkedSubaccounts
ReferralHistory -- "0..*" FriendSummary : friendSummary
ReferralHistory -- CurrencyAmount : totalReferralRewardsEarned
QueryAllBankDocumentsArgs -- AllBankDocumentsInput : input
BankCardOrder -- BankCardOrderAddressVerification : addressVerification
BankCardOrder -- BankCardOrderFundingSourceVerification : fundingSourceVerification
BankCardOrder -- BankCardOrderIdentityVerification : identityVerification
BankCardOrder -- BankCardOrderPrefundVerification : prefundVerification
EtfPerformance -- EtfGain : gain
EtfPerformance -- "0..*" EtfPrice : prices
AdvocateFriendsStatuses -- "0..*" Friend : friends
MilestoneAccountLevelDefinition -- Image : activeBackground
MilestoneAccountLevelDefinition -- Image : activeForeground
MilestoneAccountLevelDefinition -- Image : inactiveBackground
Tier -- "0..*" Product : products
Tier -- TierPrice : tierPrice
RequestSubscriptionMigrationWaiverResult -- SubscriptionMigration : migration
StartSubmittableSwitchInput -- StartSubmittableSwitchAddressInput : employerLocationAddress
SuitabilitySuitabilityResponse -- SuitabilitySuitabilityAnswer : answer
SuitabilitySuitabilityResponse -- SuitabilitySuitabilityQuestion : question
Header -- Image : image
SplitDepositSettings -- "0..*" SplitDepositAllocation : allocations
SplitDepositSettings -- "0..*" SplitDeposit : deposits
MutationTaxWithholdingAmountsArgs -- CurrencyAmountInput : totalSharesAmount
BankTransactionEdge -- BankTransaction : node
LifeQuoteStep -- Cta : cta
LifeQuoteStep -- Footer : footer
LifeQuoteStep -- "0..*" LifeQuoteQuestion : questions
LifeQuoteStep -- Tip : tip
UpdateBeneficiaryInfoResult -- "0..*" Address : addresses
UpdateBeneficiaryInfoResult -- "0..*" Phone : phoneNumbers
Advocate -- ExperienceContent : experienceContent
Advocate -- "0..*" Friend : friends
Advocate -- ReferralHistory : referralHistory
FinancialInstitutionTypePagination -- "0..*" FinancialInstitutionTypeEdge : edges
FinancialInstitutionTypePagination -- PageInfo : pageInfo
Question -- Answer : defaultAnswer
Question -- Image : image
Question -- "0..*" Answer : possibleAnswers
MutationVerifyPasswordsArgs -- VerifyPasswordsInput : input
QueryAllPastCoreItemsArgs -- AllPastCoreItemsSchemaFilter : filter
QueryAllPastCoreItemsArgs -- PageInput : pagination
QuoteSlider -- Tip : tip
LifeQuoteQuestion -- "0..*" QuestionAnswer : answers
LifeQuoteQuestion -- Tip : tip
DocumentRequestsInput -- DocumentRequestsPageInput : pageInput
RecurringTransfer -- RecurrenceRule : recurrenceRule
RecurringTransfer -- RecurringTransferEvent : transferEvent
QueryPartnerOfferGroupsByTypeArgs -- PartnerOfferGroupsTypeInput : partnerOfferGroupsTypeInput
CreateMilestoneDefinitionResult -- AccountPointsRule : accountPointsRule
CreateMilestoneDefinitionResult -- MilestoneChallengePointsRule : challengePointsRule
CreateMilestoneDefinitionResult -- Image : inactiveLogo
CreateMilestoneDefinitionResult -- Image : logo
CreateMilestoneDefinitionResult -- MilestoneRule : rule
QueryJobSearchV2Args -- PageInput : pagination
QueryJobSearchV2Args -- JobSearchCriteriaInput : searchCriteria
SetBeneficiarySsnResult -- "0..*" Address : addresses
SetBeneficiarySsnResult -- "0..*" Phone : phoneNumbers
RecurringTransferEventInput -- CurrencyAmountInput : amount
RecurringTransferEventInput -- RecurringTransferFundingSourceInput : fundingSource
RecurringTransferEventInput -- RecurringTransferAccountInput : targetAccount
AuthenticateResult -- "0..*" AuthenticatorInfo : alternateAuthenticators
SpendCheckPaymentItem -- CurrencyAmount : amount
TierOption -- TierPrice : preferredTierPrice
TierOption -- Tier : tier
TierOption -- "0..*" TierPrice : tierPrices
PromoOffer -- Image : backgroundImage
PromoOffer -- Image : desktopBackgroundImage
PromoOffer -- Image : logo
EarlyFeeInvestmentItem -- CurrencyAmount : amount
Milestone -- AccountPoints : accountPoints
Milestone -- ChallengePointsEarned : challengePoints
Milestone -- Destination : destination
Milestone -- EducationTip : educationTip
Milestone -- Image : logo
Milestone -- MilestoneProgress : progress
ProviderSearch -- Cta : cta
ProviderSearch -- "0..*" Provider : providers
ProviderSearch -- Image : searchImage
ProviderSearch -- UnknownProvider : unknownProvider
UnsubscribeUserFromTierResult -- "0..*" TierDowngradeAction : actions
Offer -- OfferExpiration : expiresAfter
Offer -- Offering : offering
Offer -- OfferPrice : price
InvalidTier -- "0..*" Tier : validTiers
QuerySpendAtmsArgs -- SpendAtmsInput : input
Fund -- BigCurrencyAmount : lastClosePrice
Fund -- BigCurrencyAmount : openPrice
Fund -- "0..*" SecurityHeadline : securityHeadlines
Fund -- SecurityProfile : securityProfile
Fund -- "0..*" TopHolding : topHoldings
Fund -- BigCurrencyAmount : week52High
Fund -- BigCurrencyAmount : week52Low
TierOptionByTierPriceIdResult -- TierPrice : preferredTierPrice
TierOptionByTierPriceIdResult -- Tier : tier
TierOptionByTierPriceIdResult -- "0..*" TierPrice : tierPrices
ChangeOutsideContributionAmountResult -- OutsideContributionCode : code
CoverageKnown -- Cta : cta
CoverageKnown -- EducationSection : educationSection
CoverageKnown -- Image : image
MutationCreateRolloverArgs -- CustodianAddressInput : custodianAddress
CoreInvestmentItem -- CurrencyAmount : amount
TierGroup -- "0..*" TierOption : tierOptions
TierGroup -- TierOption : winbackTierOption
FavoritePartnerOfferGroup -- "0..*" PartnerOfferGroupItem : offers
PastLaterSummary -- CurrencyAmount : contributions
PastLaterSummary -- CurrencyAmount : currentYearContributions
PastLaterSummary -- CurrencyAmount : dividends
PastLaterSummary -- CurrencyAmount : netReturns
PastLaterSummary -- CurrencyAmount : priorYearContributions
PastLaterSummary -- CurrencyAmount : withdrawals
SecurityPerformance -- SecurityGain : gain
SecurityPerformance -- "0..*" SecurityPrice : prices
MarketReturn -- MonetaryAmount : marketValue
PortfolioSecurity -- MonetaryAmount : marketValue
PortfolioSecurity -- MarketReturn : todaysReturn
PortfolioSecurity -- MarketReturn : totalReturn
MutationSetAuthenticationPinArgs -- SetAuthenticationPinInput : input
Modal -- "0..*" Cta : cta
Modal -- Image : logo
SubscribeToTierResult -- "0..*" TierPrice : validTierPrices
SubscribeToTierResult -- "0..*" Tier : validTiers
SubscribeToTierResult -- Promotion : activePromotion
SubscribeToTierResult -- SubscriptionMigration : migration
SubscribeToTierResult -- Offer : offer
SubscribeToTierResult -- Tier : tier
SubscribeToTierResult -- TierPrice : tierPrice
SubscribeToTierResult -- TierSubscriptionTransition : transition
MutationAddFavoritePartnerOffersArgs -- FavoritePartnerOfferInput : input
ExistingRequestPendingUserAction -- InvestmentAccountReopenRequest : reopenRequest
Security -- BigCurrencyAmount : lastClosePrice
Security -- BigCurrencyAmount : openPrice
Security -- "0..*" SecurityHeadline : securityHeadlines
Security -- SecurityProfile : securityProfile
Security -- BigCurrencyAmount : week52High
Security -- BigCurrencyAmount : week52Low
MutationRegisterEmailAuthenticatorArgs -- ChallengeAnswerInput : challengeAnswerInput
MutationRegisterEmailAuthenticatorArgs -- RegisterEmailAuthenticatorInput : input
MutationStartCheckDepositArgs -- StartCheckDepositInput : input
MutationCreateOutsideContributionArgs -- CreateOutsideContributionInput : input
AuthenticateForFeeNegotiationResult -- AutomationError : operationError
AuthenticateForFeeNegotiationResult -- TfaOptions : tfaOptions
RecommendedLifeCoverageWidget -- Cta : cta
RecommendedLifeCoverageWidget -- LifeCoverageBreakdown : coverageBreakdown
RecommendedLifeCoverageWidget -- "0..*" CarouselOffer : offers
MutationSetDefaultAuthenticatorArgs -- SetDefaultAuthenticatorInput : input
FeaturedOffers -- "0..*" FeaturedOffer : offers
QueryAllPastEarlyItemsArgs -- AllPastEarlyItemsSchemaFilter : filter
QueryAllPastEarlyItemsArgs -- PageInput : pagination
FoundMoneyReward -- MonetaryAmount : dollarValue
MutationUploadDocumentsArgs -- UploadDocumentsInput : input
Investment -- "0..*" InvestmentAllocation : allocations
CompleteCheckDepositInput -- CurrencyAmountInput : amount
SearchEmployersPayload -- "0..*" Employer : results
TopHolding -- BigCurrencyAmount : marketValue
Partner -- PartnerAuthorizationData : authorization
Partner -- "0..*" PartnerRoutingNumber : routingNumbers
Partner -- PartnerUserPayload : user
QueryEvaluateCheckDepositArgs -- EvaluateCheckDepositInput : input
FoundMoneyCampaignV2 -- "0..*" FoundMoneyCampaignOfferV2 : offers
QueryDocumentRequestsArgs -- DocumentRequestsInput : input
Portfolio -- "0..*" Etf : etfs
Portfolio -- "0..*" PortfolioSecurity : portfolioSecurities
Portfolio -- PortfolioProjection : projection
MutationUpdateAccountPortfolioArgs -- UpdateAccountPortfolioInput : input
ExtensionOwner -- "0..*" ExtensionCampaign : campaigns
MutationAssignLinkedSubaccountArgs -- AssignLinkedSubaccountInput : input
Beneficiary -- "0..*" Address : addresses
Beneficiary -- "0..*" Phone : phoneNumbers
MutationCreateBankAccountArgs -- CreateBankAccountInput : input
MutationUnblockDeviceArgs -- UnblockDeviceInput : input
MalformedRecurringTransferException -- "0..*" RecurringTransferPathException : pathExceptions
ReturnedCheckDeposit -- CurrencyAmount : amount
MutationCreateSupportTicketWithCustomFieldsArgs -- CreateCustomSupportTicketInput : input
MutationUpdatePersonalInfoArgs -- PersonalInfoInput : input
PastCoreItem -- CurrencyAmount : amount
MutationOrderBankCardArgs -- OrderBankCardInput : input
ExtensionCampaign -- ExtensionCampaignBackgroundImage : backgroundImage
ExtensionCampaign -- ExtensionCampaignCtaDetails : ctaDetails
ExtensionCampaign -- "0..*" ExtensionCampaignStore : stores
TransferableFrom -- TransferableAccount : from
IneligibilityLander -- InsuranceCarousel : alternatePartners
IneligibilityLander -- Cta : cta
IneligibilityLander -- Disclaimer : disclaimer
IneligibilityLander -- Image : logo
PartnerOfferGroup -- "0..*" PartnerOfferGroupItem : offers
SupportSection -- "0..*" SupportArticle : articles
SupportSection -- SupportCategory : category
AddressDeliverabilityResult -- AddressDeliverabilityAdditionalInfo : additionalInfo
PartnerChoices -- Cta : cta
PartnerChoices -- Image : icon
SendCheckPaymentInput -- CurrencyAmountInput : amount
SendCheckPaymentInput -- CheckPaymentRecipientInput : recipient
SendCheckPaymentInput -- CheckPaymentAddressInput : recipientAddress
MutationReinitiateChallengeArgs -- ReinitiateSmsChallengeInput : input
MutationUpdateAccountPointsRuleArgs -- UpdateAccountPointsRuleInput : updateAccountPointsRuleInput
ExploreCarousel -- "0..*" InsuranceSection : widgets
MutationUpdateInvestorQuestionsArgs -- InvestorQuestionsInput : input
MutationScheduleRecurringTransferArgs -- ScheduleRecurringTransferInput : input
MutationGenerateLinkSessionArgs -- GenerateLinkSessionInput : input
Notifications -- "0..*" Notification : emails
Notifications -- "0..*" Notification : pushes
User -- FundingSource : fundingSource
User -- "0..*" InvestmentAccount : investmentAccounts
User -- Portfolio : portfolio
User -- "0..*" UserUpload : uploads
MutationCancelInvestmentAccountClosureRequestArgs -- CancelInvestmentAccountClosureRequestInput : input
MutationUpdateAddressArgs -- AddressInput : input
DocumentRequestsConnection -- "0..*" DocumentRequestEdge : edges
DocumentRequestsConnection -- DocumentRequestsPageInfo : pageInfo
MutationRegisterUserArgs -- RegisterUserInput : input
MutationUpdateProfileArgs -- ProfileInput : input
SupportTicketFormField -- "0..*" CustomFieldOption : customFieldOptions
SupportTicketFormField -- "0..*" CustomFieldOption : systemFieldOptions
ReissueBankCardInput -- BankCardRequestMailingAddressInput : mailingAddress
PremiumsResult -- QuoteResult : quoteData
MilestoneHub -- "0..*" MilestoneGroup : groupedMilestones
MilestoneHub -- "0..*" MilestoneAccountLevelDefinition : levelDefinitions
MilestoneHub -- MilestoneHubAccount : userAccount
TierSubscriptionForUser -- Promotion : activePromotion
TierSubscriptionForUser -- SubscriptionMigration : migration
TierSubscriptionForUser -- Offer : offer
TierSubscriptionForUser -- Tier : tier
TierSubscriptionForUser -- TierPrice : tierPrice
TierSubscriptionForUser -- TierSubscriptionTransition : transition
FinancialInstitutionTypeEdge -- FinancialInstitution : node
MutationVerifyDeviceArgs -- ChallengeAnswerInput : challengeAnswerInput
MutationVerifyDeviceArgs -- VerifyDeviceInput : input
TierSubscription -- Promotion : activePromotion
TierSubscription -- SubscriptionMigration : migration
TierSubscription -- Offer : offer
TierSubscription -- Tier : tier
TierSubscription -- TierPrice : tierPrice
TierSubscription -- TierSubscriptionTransition : transition
CollapsedLifeRecommendation -- Cta : cta
CloseBankAccountResult -- CurrencyAmount : availableBalance
CloseBankAccountResult -- CurrencyAmount : balance
CloseBankAccountResult -- CurrencyAmount : pendingBalance
CloseBankAccountResult -- BankAccountRequirements : requirements
SummaryItem -- CurrencyAmount : amount
CreateOfferInput -- OfferPriceInput : price
LaterFeeInvestmentItem -- CurrencyAmount : amount
TaxWithholdingAmounts -- MonetaryAmount : federalWithholdingAmount
TaxWithholdingAmounts -- MonetaryAmount : stateWithholdingAmount

@enduml